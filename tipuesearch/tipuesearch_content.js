var tipuesearch = {"pages":[{"title":" MFI - Modern Fortran Interfaces ","text":"MFI - Modern Fortran Interfaces Developer Info I. G. Pauli","tags":"home","loc":"index.html"},{"title":"mfi_cdotc – MFI - Modern Fortran Interfaces","text":"public pure function mfi_cdotc(x, y, incx, incy) Modern interface for cdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32)","tags":"","loc":"proc/mfi_cdotc.html"},{"title":"mfi_cdotu – MFI - Modern Fortran Interfaces","text":"public pure function mfi_cdotu(x, y, incx, incy) Modern interface for cdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32)","tags":"","loc":"proc/mfi_cdotu.html"},{"title":"mfi_zdotc – MFI - Modern Fortran Interfaces","text":"public pure function mfi_zdotc(x, y, incx, incy) Modern interface for zdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64)","tags":"","loc":"proc/mfi_zdotc.html"},{"title":"mfi_zdotu – MFI - Modern Fortran Interfaces","text":"public pure function mfi_zdotu(x, y, incx, incy) Modern interface for zdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64)","tags":"","loc":"proc/mfi_zdotu.html"},{"title":"mfi_isamax – MFI - Modern Fortran Interfaces","text":"public pure function mfi_isamax(x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_isamax.html"},{"title":"mfi_idamax – MFI - Modern Fortran Interfaces","text":"public pure function mfi_idamax(x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_idamax.html"},{"title":"mfi_icamax – MFI - Modern Fortran Interfaces","text":"public pure function mfi_icamax(x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_icamax.html"},{"title":"mfi_izamax – MFI - Modern Fortran Interfaces","text":"public pure function mfi_izamax(x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_izamax.html"},{"title":"mfi_isamin – MFI - Modern Fortran Interfaces","text":"public pure function mfi_isamin(x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_isamin.html"},{"title":"mfi_idamin – MFI - Modern Fortran Interfaces","text":"public pure function mfi_idamin(x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_idamin.html"},{"title":"mfi_icamin – MFI - Modern Fortran Interfaces","text":"public pure function mfi_icamin(x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_icamin.html"},{"title":"mfi_izamin – MFI - Modern Fortran Interfaces","text":"public pure function mfi_izamin(x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"proc/mfi_izamin.html"},{"title":"mfi_sdot – MFI - Modern Fortran Interfaces","text":"public pure function mfi_sdot(x, y, incx, incy) Modern interface for sdot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL32)","tags":"","loc":"proc/mfi_sdot.html"},{"title":"mfi_sasum – MFI - Modern Fortran Interfaces","text":"public pure function mfi_sasum(x, incx) Modern interface for sasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32)","tags":"","loc":"proc/mfi_sasum.html"},{"title":"mfi_scasum – MFI - Modern Fortran Interfaces","text":"public pure function mfi_scasum(x, incx) Modern interface for scasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32)","tags":"","loc":"proc/mfi_scasum.html"},{"title":"mfi_snrm2 – MFI - Modern Fortran Interfaces","text":"public pure function mfi_snrm2(x, incx) Modern interface for snrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32)","tags":"","loc":"proc/mfi_snrm2.html"},{"title":"mfi_scnrm2 – MFI - Modern Fortran Interfaces","text":"public pure function mfi_scnrm2(x, incx) Modern interface for scnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32)","tags":"","loc":"proc/mfi_scnrm2.html"},{"title":"mfi_slamch – MFI - Modern Fortran Interfaces","text":"public pure function mfi_slamch(cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL32), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL32)","tags":"","loc":"proc/mfi_slamch.html"},{"title":"mfi_ddot – MFI - Modern Fortran Interfaces","text":"public pure function mfi_ddot(x, y, incx, incy) Modern interface for ddot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL64)","tags":"","loc":"proc/mfi_ddot.html"},{"title":"mfi_dasum – MFI - Modern Fortran Interfaces","text":"public pure function mfi_dasum(x, incx) Modern interface for dasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64)","tags":"","loc":"proc/mfi_dasum.html"},{"title":"mfi_dzasum – MFI - Modern Fortran Interfaces","text":"public pure function mfi_dzasum(x, incx) Modern interface for dzasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64)","tags":"","loc":"proc/mfi_dzasum.html"},{"title":"mfi_dnrm2 – MFI - Modern Fortran Interfaces","text":"public pure function mfi_dnrm2(x, incx) Modern interface for dnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64)","tags":"","loc":"proc/mfi_dnrm2.html"},{"title":"mfi_dznrm2 – MFI - Modern Fortran Interfaces","text":"public pure function mfi_dznrm2(x, incx) Modern interface for dznrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64)","tags":"","loc":"proc/mfi_dznrm2.html"},{"title":"mfi_dlamch – MFI - Modern Fortran Interfaces","text":"public pure function mfi_dlamch(cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL64), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL64)","tags":"","loc":"proc/mfi_dlamch.html"},{"title":"mfi_scopy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_scopy(x, y, incx, incy) Modern interface for scopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_scopy.html"},{"title":"mfi_dcopy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dcopy(x, y, incx, incy) Modern interface for dcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dcopy.html"},{"title":"mfi_ccopy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ccopy(x, y, incx, incy) Modern interface for ccopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_ccopy.html"},{"title":"mfi_zcopy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zcopy(x, y, incx, incy) Modern interface for zcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zcopy.html"},{"title":"mfi_sswap – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sswap(x, y, incx, incy) Modern interface for sswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_sswap.html"},{"title":"mfi_dswap – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dswap(x, y, incx, incy) Modern interface for dswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dswap.html"},{"title":"mfi_cswap – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cswap(x, y, incx, incy) Modern interface for cswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_cswap.html"},{"title":"mfi_zswap – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zswap(x, y, incx, incy) Modern interface for zswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zswap.html"},{"title":"mfi_saxpy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_saxpy(x, y, a, incx, incy) Modern interface for saxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_saxpy.html"},{"title":"mfi_daxpy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_daxpy(x, y, a, incx, incy) Modern interface for daxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_daxpy.html"},{"title":"mfi_caxpy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_caxpy(x, y, a, incx, incy) Modern interface for caxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) complex(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_caxpy.html"},{"title":"mfi_zaxpy – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zaxpy(x, y, a, incx, incy) Modern interface for zaxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) complex(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zaxpy.html"},{"title":"mfi_srot – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_srot(x, y, c, s, incx, incy) Modern interface for srot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - s * xi Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_srot.html"},{"title":"mfi_drot – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_drot(x, y, c, s, incx, incy) Modern interface for drot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - s * xi Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_drot.html"},{"title":"mfi_crot – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_crot(x, y, c, s, incx, incy) Modern interface for crot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c complex(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_crot.html"},{"title":"mfi_zrot – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zrot(x, y, c, s, incx, incy) Modern interface for zrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c complex(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zrot.html"},{"title":"mfi_csrot – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_csrot(x, y, c, s, incx, incy) Modern interface for csrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_csrot.html"},{"title":"mfi_zdrot – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zdrot(x, y, c, s, incx, incy) Modern interface for zdrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zdrot.html"},{"title":"mfi_srotm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_srotm(x, y, param, incx, incy) Modern interface for srotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_srotm.html"},{"title":"mfi_drotm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_drotm(x, y, param, incx, incy) Modern interface for drotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_drotm.html"},{"title":"mfi_sscal – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sscal(a, x, incx) Modern interface for sscal .\nSee also: mfi_scal , f77_scal .\nMFI_SSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_sscal.html"},{"title":"mfi_dscal – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dscal(a, x, incx) Modern interface for dscal .\nSee also: mfi_scal , f77_scal .\nMFI_DSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dscal.html"},{"title":"mfi_cscal – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cscal(a, x, incx) Modern interface for cscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_cscal.html"},{"title":"mfi_zscal – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zscal(a, x, incx) Modern interface for zscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_zscal.html"},{"title":"mfi_csscal – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_csscal(a, x, incx) Modern interface for csscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_csscal.html"},{"title":"mfi_zdscal – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zdscal(a, x, incx) Modern interface for zdscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_zdscal.html"},{"title":"mfi_sgbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgbmv(a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for sgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_sgbmv.html"},{"title":"mfi_dgbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgbmv(a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for dgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dgbmv.html"},{"title":"mfi_cgbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgbmv(a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for cgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_cgbmv.html"},{"title":"mfi_zgbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgbmv(a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for zgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zgbmv.html"},{"title":"mfi_sgemv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgemv(a, x, y, trans, alpha, beta, incx, incy) Modern interface for sgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_sgemv.html"},{"title":"mfi_dgemv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgemv(a, x, y, trans, alpha, beta, incx, incy) Modern interface for dgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dgemv.html"},{"title":"mfi_cgemv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgemv(a, x, y, trans, alpha, beta, incx, incy) Modern interface for cgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_cgemv.html"},{"title":"mfi_zgemv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgemv(a, x, y, trans, alpha, beta, incx, incy) Modern interface for zgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zgemv.html"},{"title":"mfi_sger – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sger(a, x, y, alpha, incx, incy) Modern interface for sger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_sger.html"},{"title":"mfi_dger – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dger(a, x, y, alpha, incx, incy) Modern interface for dger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dger.html"},{"title":"mfi_cgerc – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgerc(a, x, y, alpha, incx, incy) Modern interface for cgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_cgerc.html"},{"title":"mfi_zgerc – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgerc(a, x, y, alpha, incx, incy) Modern interface for zgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zgerc.html"},{"title":"mfi_cgeru – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgeru(a, x, y, alpha, incx, incy) Modern interface for cgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_cgeru.html"},{"title":"mfi_zgeru – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgeru(a, x, y, alpha, incx, incy) Modern interface for zgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zgeru.html"},{"title":"mfi_chbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chbmv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_chbmv.html"},{"title":"mfi_zhbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhbmv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zhbmv.html"},{"title":"mfi_chemv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chemv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_chemv.html"},{"title":"mfi_zhemv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhemv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zhemv.html"},{"title":"mfi_cher – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cher(a, x, uplo, alpha, incx) Modern interface for cher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_cher.html"},{"title":"mfi_zher – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zher(a, x, uplo, alpha, incx) Modern interface for zher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_zher.html"},{"title":"mfi_cher2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cher2(a, x, y, uplo, alpha, incx, incy) Modern interface for cher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_cher2.html"},{"title":"mfi_zher2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zher2(a, x, y, uplo, alpha, incx, incy) Modern interface for zher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zher2.html"},{"title":"mfi_chpmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chpmv(ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for chpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_chpmv.html"},{"title":"mfi_zhpmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhpmv(ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zhpmv.html"},{"title":"mfi_chpr – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chpr(ap, x, uplo, alpha, incx) Modern interface for chpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_chpr.html"},{"title":"mfi_zhpr – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhpr(ap, x, uplo, alpha, incx) Modern interface for zhpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_zhpr.html"},{"title":"mfi_chpr2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chpr2(ap, x, y, uplo, alpha, incx, incy) Modern interface for chpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_chpr2.html"},{"title":"mfi_zhpr2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhpr2(ap, x, y, uplo, alpha, incx, incy) Modern interface for zhpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_zhpr2.html"},{"title":"mfi_ssbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssbmv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_ssbmv.html"},{"title":"mfi_dsbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsbmv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dsbmv.html"},{"title":"mfi_sspmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sspmv(ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for sspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_sspmv.html"},{"title":"mfi_dspmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dspmv(ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for dspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dspmv.html"},{"title":"mfi_sspr – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sspr(ap, x, uplo, alpha, incx) Modern interface for sspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_sspr.html"},{"title":"mfi_dspr – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dspr(ap, x, uplo, alpha, incx) Modern interface for dspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dspr.html"},{"title":"mfi_sspr2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sspr2(ap, x, y, uplo, alpha, incx, incy) Modern interface for sspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_sspr2.html"},{"title":"mfi_dspr2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dspr2(ap, x, y, uplo, alpha, incx, incy) Modern interface for dspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dspr2.html"},{"title":"mfi_ssymv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssymv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_ssymv.html"},{"title":"mfi_dsymv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsymv(a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dsymv.html"},{"title":"mfi_ssyr – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssyr(a, x, uplo, alpha, incx) Modern interface for ssyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ssyr.html"},{"title":"mfi_dsyr – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsyr(a, x, uplo, alpha, incx) Modern interface for dsyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dsyr.html"},{"title":"mfi_ssyr2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssyr2(a, x, y, uplo, alpha, incx, incy) Modern interface for ssyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_ssyr2.html"},{"title":"mfi_dsyr2 – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsyr2(a, x, y, uplo, alpha, incx, incy) Modern interface for dsyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"proc/mfi_dsyr2.html"},{"title":"mfi_stbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_stbmv(a, x, uplo, trans, diag, incx) Modern interface for stbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_stbmv.html"},{"title":"mfi_dtbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtbmv(a, x, uplo, trans, diag, incx) Modern interface for dtbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dtbmv.html"},{"title":"mfi_ctbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctbmv(a, x, uplo, trans, diag, incx) Modern interface for ctbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ctbmv.html"},{"title":"mfi_ztbmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztbmv(a, x, uplo, trans, diag, incx) Modern interface for ztbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ztbmv.html"},{"title":"mfi_stbsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_stbsv(a, x, uplo, trans, diag, incx) Modern interface for stbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_stbsv.html"},{"title":"mfi_dtbsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtbsv(a, x, uplo, trans, diag, incx) Modern interface for dtbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dtbsv.html"},{"title":"mfi_ctbsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctbsv(a, x, uplo, trans, diag, incx) Modern interface for ctbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ctbsv.html"},{"title":"mfi_ztbsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztbsv(a, x, uplo, trans, diag, incx) Modern interface for ztbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ztbsv.html"},{"title":"mfi_stpmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_stpmv(ap, x, uplo, trans, diag, incx) Modern interface for stpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_stpmv.html"},{"title":"mfi_dtpmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtpmv(ap, x, uplo, trans, diag, incx) Modern interface for dtpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dtpmv.html"},{"title":"mfi_ctpmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctpmv(ap, x, uplo, trans, diag, incx) Modern interface for ctpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ctpmv.html"},{"title":"mfi_ztpmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztpmv(ap, x, uplo, trans, diag, incx) Modern interface for ztpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ztpmv.html"},{"title":"mfi_stpsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_stpsv(ap, x, uplo, trans, diag, incx) Modern interface for stpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_stpsv.html"},{"title":"mfi_dtpsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtpsv(ap, x, uplo, trans, diag, incx) Modern interface for dtpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dtpsv.html"},{"title":"mfi_ctpsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctpsv(ap, x, uplo, trans, diag, incx) Modern interface for ctpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ctpsv.html"},{"title":"mfi_ztpsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztpsv(ap, x, uplo, trans, diag, incx) Modern interface for ztpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ztpsv.html"},{"title":"mfi_strmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_strmv(a, x, uplo, trans, diag, incx) Modern interface for strmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_strmv.html"},{"title":"mfi_dtrmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtrmv(a, x, uplo, trans, diag, incx) Modern interface for dtrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dtrmv.html"},{"title":"mfi_ctrmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctrmv(a, x, uplo, trans, diag, incx) Modern interface for ctrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ctrmv.html"},{"title":"mfi_ztrmv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztrmv(a, x, uplo, trans, diag, incx) Modern interface for ztrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ztrmv.html"},{"title":"mfi_strsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_strsv(a, x, uplo, trans, diag, incx) Modern interface for strsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_strsv.html"},{"title":"mfi_dtrsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtrsv(a, x, uplo, trans, diag, incx) Modern interface for dtrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_dtrsv.html"},{"title":"mfi_ctrsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctrsv(a, x, uplo, trans, diag, incx) Modern interface for ctrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ctrsv.html"},{"title":"mfi_ztrsv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztrsv(a, x, uplo, trans, diag, incx) Modern interface for ztrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"proc/mfi_ztrsv.html"},{"title":"mfi_sgemm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgemm(a, b, c, transa, transb, alpha, beta) Modern interface for sgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta","tags":"","loc":"proc/mfi_sgemm.html"},{"title":"mfi_dgemm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgemm(a, b, c, transa, transb, alpha, beta) Modern interface for dgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"proc/mfi_dgemm.html"},{"title":"mfi_cgemm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgemm(a, b, c, transa, transb, alpha, beta) Modern interface for cgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta","tags":"","loc":"proc/mfi_cgemm.html"},{"title":"mfi_zgemm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgemm(a, b, c, transa, transb, alpha, beta) Modern interface for zgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"proc/mfi_zgemm.html"},{"title":"mfi_chemm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chemm(a, b, c, side, uplo, alpha, beta) Modern interface for chemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta","tags":"","loc":"proc/mfi_chemm.html"},{"title":"mfi_zhemm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhemm(a, b, c, side, uplo, alpha, beta) Modern interface for zhemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"proc/mfi_zhemm.html"},{"title":"mfi_cherk – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cherk(a, c, uplo, trans, alpha, beta) Modern interface for cherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta","tags":"","loc":"proc/mfi_cherk.html"},{"title":"mfi_zherk – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zherk(a, c, uplo, trans, alpha, beta) Modern interface for zherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta","tags":"","loc":"proc/mfi_zherk.html"},{"title":"mfi_cher2k – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cher2k(a, b, c, uplo, trans, alpha, beta) Modern interface for cher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta","tags":"","loc":"proc/mfi_cher2k.html"},{"title":"mfi_zher2k – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zher2k(a, b, c, uplo, trans, alpha, beta) Modern interface for zher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta","tags":"","loc":"proc/mfi_zher2k.html"},{"title":"mfi_ssymm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssymm(a, b, c, side, uplo, alpha, beta) Modern interface for ssymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta","tags":"","loc":"proc/mfi_ssymm.html"},{"title":"mfi_dsymm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsymm(a, b, c, side, uplo, alpha, beta) Modern interface for dsymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"proc/mfi_dsymm.html"},{"title":"mfi_ssyrk – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssyrk(a, c, uplo, trans, alpha, beta) Modern interface for ssyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta","tags":"","loc":"proc/mfi_ssyrk.html"},{"title":"mfi_dsyrk – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsyrk(a, c, uplo, trans, alpha, beta) Modern interface for dsyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"proc/mfi_dsyrk.html"},{"title":"mfi_ssyr2k – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ssyr2k(a, b, c, uplo, trans, alpha, beta) Modern interface for ssyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta","tags":"","loc":"proc/mfi_ssyr2k.html"},{"title":"mfi_dsyr2k – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dsyr2k(a, b, c, uplo, trans, alpha, beta) Modern interface for dsyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"proc/mfi_dsyr2k.html"},{"title":"mfi_strmm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_strmm(a, b, side, uplo, transa, diag, alpha) Modern interface for strmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_strmm.html"},{"title":"mfi_dtrmm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtrmm(a, b, side, uplo, transa, diag, alpha) Modern interface for dtrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_dtrmm.html"},{"title":"mfi_ctrmm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctrmm(a, b, side, uplo, transa, diag, alpha) Modern interface for ctrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_ctrmm.html"},{"title":"mfi_ztrmm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztrmm(a, b, side, uplo, transa, diag, alpha) Modern interface for ztrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_ztrmm.html"},{"title":"mfi_strsm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_strsm(a, b, side, uplo, transa, diag, alpha) Modern interface for strsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_strsm.html"},{"title":"mfi_dtrsm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dtrsm(a, b, side, uplo, transa, diag, alpha) Modern interface for dtrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_dtrsm.html"},{"title":"mfi_ctrsm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ctrsm(a, b, side, uplo, transa, diag, alpha) Modern interface for ctrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_ctrsm.html"},{"title":"mfi_ztrsm – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_ztrsm(a, b, side, uplo, transa, diag, alpha) Modern interface for ztrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"proc/mfi_ztrsm.html"},{"title":"mfi_copy – MFI - Modern Fortran Interfaces","text":"public interface mfi_copy Generic modern interface for COPY.\nSupports s, d, c, z.\nSee also: scopy , dcopy , ccopy , zcopy . Module Procedures public pure subroutine mfi_scopy (x, y, incx, incy) Modern interface for scopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dcopy (x, y, incx, incy) Modern interface for dcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_ccopy (x, y, incx, incy) Modern interface for ccopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zcopy (x, y, incx, incy) Modern interface for zcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_copy.html"},{"title":"mfi_swap – MFI - Modern Fortran Interfaces","text":"public interface mfi_swap Generic modern interface for SWAP.\nSupports s, d, c, z.\nSee also: sswap , dswap , cswap , zswap . Module Procedures public pure subroutine mfi_sswap (x, y, incx, incy) Modern interface for sswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dswap (x, y, incx, incy) Modern interface for dswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cswap (x, y, incx, incy) Modern interface for cswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zswap (x, y, incx, incy) Modern interface for zswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_swap.html"},{"title":"mfi_axpy – MFI - Modern Fortran Interfaces","text":"public interface mfi_axpy Generic modern interface for AXPY.\nSupports s, d, c, z.\nSee also: saxpy , daxpy , caxpy , zaxpy . Module Procedures public pure subroutine mfi_saxpy (x, y, a, incx, incy) Modern interface for saxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_daxpy (x, y, a, incx, incy) Modern interface for daxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_caxpy (x, y, a, incx, incy) Modern interface for caxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) complex(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zaxpy (x, y, a, incx, incy) Modern interface for zaxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) complex(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_axpy.html"},{"title":"mfi_dot – MFI - Modern Fortran Interfaces","text":"public interface mfi_dot Generic modern interface for DOT.\nSupports s, d.\nSee also: sdot , ddot . Module Procedures public pure function mfi_sdot (x, y, incx, incy) Modern interface for sdot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL32) public pure function mfi_ddot (x, y, incx, incy) Modern interface for ddot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL64)","tags":"","loc":"interface/mfi_dot.html"},{"title":"mfi_dotc – MFI - Modern Fortran Interfaces","text":"public interface mfi_dotc Generic modern interface for DOTC.\nSupports c, z.\nSee also: cdotc , zdotc . Module Procedures public pure function mfi_cdotc (x, y, incx, incy) Modern interface for cdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32) public pure function mfi_zdotc (x, y, incx, incy) Modern interface for zdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64)","tags":"","loc":"interface/mfi_dotc.html"},{"title":"mfi_dotu – MFI - Modern Fortran Interfaces","text":"public interface mfi_dotu Generic modern interface for DOTU.\nSupports c, z.\nSee also: cdotu , zdotu . Module Procedures public pure function mfi_cdotu (x, y, incx, incy) Modern interface for cdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32) public pure function mfi_zdotu (x, y, incx, incy) Modern interface for zdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64)","tags":"","loc":"interface/mfi_dotu.html"},{"title":"mfi_asum – MFI - Modern Fortran Interfaces","text":"public interface mfi_asum Generic modern interface for ASUM.\nSupports s, d, sc, dz.\nSee also: sasum , dasum , scasum , dzasum . Module Procedures public pure function mfi_sasum (x, incx) Modern interface for sasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dasum (x, incx) Modern interface for dasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_scasum (x, incx) Modern interface for scasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dzasum (x, incx) Modern interface for dzasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64)","tags":"","loc":"interface/mfi_asum.html"},{"title":"mfi_nrm2 – MFI - Modern Fortran Interfaces","text":"public interface mfi_nrm2 Generic modern interface for NRM2.\nSupports s, d, sc, dz.\nSee also: snrm2 , dnrm2 , scnrm2 , dznrm2 . Module Procedures public pure function mfi_snrm2 (x, incx) Modern interface for snrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dnrm2 (x, incx) Modern interface for dnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_scnrm2 (x, incx) Modern interface for scnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dznrm2 (x, incx) Modern interface for dznrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64)","tags":"","loc":"interface/mfi_nrm2.html"},{"title":"mfi_rot – MFI - Modern Fortran Interfaces","text":"public interface mfi_rot Generic modern interface for ROT.\nSupports s, d, c, z, cs, zd.\nSee also: srot , drot , crot , zrot , csrot , zdrot . Module Procedures public pure subroutine mfi_srot (x, y, c, s, incx, incy) Modern interface for srot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_drot (x, y, c, s, incx, incy) Modern interface for drot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_crot (x, y, c, s, incx, incy) Modern interface for crot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c complex(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zrot (x, y, c, s, incx, incy) Modern interface for zrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c complex(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_csrot (x, y, c, s, incx, incy) Modern interface for csrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zdrot (x, y, c, s, incx, incy) Modern interface for zdrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_rot.html"},{"title":"mfi_rotm – MFI - Modern Fortran Interfaces","text":"public interface mfi_rotm Generic modern interface for ROTM.\nSupports s, d.\nSee also: srotm , drotm . Module Procedures public pure subroutine mfi_srotm (x, y, param, incx, incy) Modern interface for srotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_drotm (x, y, param, incx, incy) Modern interface for drotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_rotm.html"},{"title":"mfi_scal – MFI - Modern Fortran Interfaces","text":"public interface mfi_scal Generic modern interface for SCAL.\nSupports s, d, c, z, cs, zd.\nSee also: sscal , dscal , cscal , zscal , csscal , zdscal . Module Procedures public pure subroutine mfi_sscal (a, x, incx) Modern interface for sscal .\nSee also: mfi_scal , f77_scal .\nMFI_SSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_dscal (a, x, incx) Modern interface for dscal .\nSee also: mfi_scal , f77_scal .\nMFI_DSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_cscal (a, x, incx) Modern interface for cscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_zscal (a, x, incx) Modern interface for zscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_csscal (a, x, incx) Modern interface for csscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_zdscal (a, x, incx) Modern interface for zdscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_scal.html"},{"title":"mfi_gbmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_gbmv Generic modern interface for GBMV.\nSupports s, d, c, z.\nSee also: sgbmv , dgbmv , cgbmv , zgbmv . Module Procedures public pure subroutine mfi_sgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for sgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for dgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for cgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for zgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_gbmv.html"},{"title":"mfi_gemv – MFI - Modern Fortran Interfaces","text":"public interface mfi_gemv Generic modern interface for GEMV.\nSupports s, d, c, z.\nSee also: sgemv , dgemv , cgemv , zgemv . Module Procedures public pure subroutine mfi_sgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for sgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for dgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for cgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for zgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_gemv.html"},{"title":"mfi_ger – MFI - Modern Fortran Interfaces","text":"public interface mfi_ger Generic modern interface for GER.\nSupports s, d.\nSee also: sger , dger . Module Procedures public pure subroutine mfi_sger (a, x, y, alpha, incx, incy) Modern interface for sger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dger (a, x, y, alpha, incx, incy) Modern interface for dger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_ger.html"},{"title":"mfi_gerc – MFI - Modern Fortran Interfaces","text":"public interface mfi_gerc Generic modern interface for GERC.\nSupports c, z.\nSee also: cgerc , zgerc . Module Procedures public pure subroutine mfi_cgerc (a, x, y, alpha, incx, incy) Modern interface for cgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgerc (a, x, y, alpha, incx, incy) Modern interface for zgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_gerc.html"},{"title":"mfi_geru – MFI - Modern Fortran Interfaces","text":"public interface mfi_geru Generic modern interface for GERU.\nSupports c, z.\nSee also: cgeru , zgeru . Module Procedures public pure subroutine mfi_cgeru (a, x, y, alpha, incx, incy) Modern interface for cgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgeru (a, x, y, alpha, incx, incy) Modern interface for zgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_geru.html"},{"title":"mfi_hbmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_hbmv Generic modern interface for HBMV.\nSupports c, z.\nSee also: chbmv , zhbmv . Module Procedures public pure subroutine mfi_chbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_hbmv.html"},{"title":"mfi_hemv – MFI - Modern Fortran Interfaces","text":"public interface mfi_hemv Generic modern interface for HEMV.\nSupports c, z.\nSee also: chemv , zhemv . Module Procedures public pure subroutine mfi_chemv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhemv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_hemv.html"},{"title":"mfi_her – MFI - Modern Fortran Interfaces","text":"public interface mfi_her Generic modern interface for HER.\nSupports c, z.\nSee also: cher , zher . Module Procedures public pure subroutine mfi_cher (a, x, uplo, alpha, incx) Modern interface for cher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_zher (a, x, uplo, alpha, incx) Modern interface for zher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_her.html"},{"title":"mfi_her2 – MFI - Modern Fortran Interfaces","text":"public interface mfi_her2 Generic modern interface for HER2.\nSupports c, z.\nSee also: cher2 , zher2 . Module Procedures public pure subroutine mfi_cher2 (a, x, y, uplo, alpha, incx, incy) Modern interface for cher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zher2 (a, x, y, uplo, alpha, incx, incy) Modern interface for zher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_her2.html"},{"title":"mfi_hpmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_hpmv Generic modern interface for HPMV.\nSupports c, z.\nSee also: chpmv , zhpmv . Module Procedures public pure subroutine mfi_chpmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for chpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhpmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_hpmv.html"},{"title":"mfi_hpr – MFI - Modern Fortran Interfaces","text":"public interface mfi_hpr Generic modern interface for HPR.\nSupports c, z.\nSee also: chpr , zhpr . Module Procedures public pure subroutine mfi_chpr (ap, x, uplo, alpha, incx) Modern interface for chpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_zhpr (ap, x, uplo, alpha, incx) Modern interface for zhpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_hpr.html"},{"title":"mfi_hpr2 – MFI - Modern Fortran Interfaces","text":"public interface mfi_hpr2 Generic modern interface for HPR2.\nSupports c, z.\nSee also: chpr2 , zhpr2 . Module Procedures public pure subroutine mfi_chpr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for chpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhpr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for zhpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_hpr2.html"},{"title":"mfi_sbmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_sbmv Generic modern interface for SBMV.\nSupports s, d.\nSee also: ssbmv , dsbmv . Module Procedures public pure subroutine mfi_ssbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_sbmv.html"},{"title":"mfi_spmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_spmv Generic modern interface for SPMV.\nSupports s, d.\nSee also: sspmv , dspmv . Module Procedures public pure subroutine mfi_sspmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for sspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dspmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for dspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_spmv.html"},{"title":"mfi_spr – MFI - Modern Fortran Interfaces","text":"public interface mfi_spr Generic modern interface for SPR.\nSupports s, d.\nSee also: sspr , dspr . Module Procedures public pure subroutine mfi_sspr (ap, x, uplo, alpha, incx) Modern interface for sspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_dspr (ap, x, uplo, alpha, incx) Modern interface for dspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_spr.html"},{"title":"mfi_spr2 – MFI - Modern Fortran Interfaces","text":"public interface mfi_spr2 Generic modern interface for SPR2.\nSupports s, d.\nSee also: sspr2 , dspr2 . Module Procedures public pure subroutine mfi_sspr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for sspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dspr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for dspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_spr2.html"},{"title":"mfi_symv – MFI - Modern Fortran Interfaces","text":"public interface mfi_symv Generic modern interface for SYMV.\nSupports s, d.\nSee also: ssymv , dsymv . Module Procedures public pure subroutine mfi_ssymv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsymv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_symv.html"},{"title":"mfi_syr – MFI - Modern Fortran Interfaces","text":"public interface mfi_syr Generic modern interface for SYR.\nSupports s, d.\nSee also: ssyr , dsyr . Module Procedures public pure subroutine mfi_ssyr (a, x, uplo, alpha, incx) Modern interface for ssyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_dsyr (a, x, uplo, alpha, incx) Modern interface for dsyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_syr.html"},{"title":"mfi_syr2 – MFI - Modern Fortran Interfaces","text":"public interface mfi_syr2 Generic modern interface for SYR2.\nSupports s, d.\nSee also: ssyr2 , dsyr2 . Module Procedures public pure subroutine mfi_ssyr2 (a, x, y, uplo, alpha, incx, incy) Modern interface for ssyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsyr2 (a, x, y, uplo, alpha, incx, incy) Modern interface for dsyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy","tags":"","loc":"interface/mfi_syr2.html"},{"title":"mfi_tbmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_tbmv Generic modern interface for TBMV.\nSupports s, d, c, z.\nSee also: stbmv , dtbmv , ctbmv , ztbmv . Module Procedures public pure subroutine mfi_stbmv (a, x, uplo, trans, diag, incx) Modern interface for stbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtbmv (a, x, uplo, trans, diag, incx) Modern interface for dtbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctbmv (a, x, uplo, trans, diag, incx) Modern interface for ctbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztbmv (a, x, uplo, trans, diag, incx) Modern interface for ztbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_tbmv.html"},{"title":"mfi_tbsv – MFI - Modern Fortran Interfaces","text":"public interface mfi_tbsv Generic modern interface for TBSV.\nSupports s, d, c, z.\nSee also: stbsv , dtbsv , ctbsv , ztbsv . Module Procedures public pure subroutine mfi_stbsv (a, x, uplo, trans, diag, incx) Modern interface for stbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtbsv (a, x, uplo, trans, diag, incx) Modern interface for dtbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctbsv (a, x, uplo, trans, diag, incx) Modern interface for ctbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztbsv (a, x, uplo, trans, diag, incx) Modern interface for ztbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_tbsv.html"},{"title":"mfi_tpmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_tpmv Generic modern interface for TPMV.\nSupports s, d, c, z.\nSee also: stpmv , dtpmv , ctpmv , ztpmv . Module Procedures public pure subroutine mfi_stpmv (ap, x, uplo, trans, diag, incx) Modern interface for stpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtpmv (ap, x, uplo, trans, diag, incx) Modern interface for dtpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctpmv (ap, x, uplo, trans, diag, incx) Modern interface for ctpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztpmv (ap, x, uplo, trans, diag, incx) Modern interface for ztpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_tpmv.html"},{"title":"mfi_tpsv – MFI - Modern Fortran Interfaces","text":"public interface mfi_tpsv Generic modern interface for TPSV.\nSupports s, d, c, z.\nSee also: stpsv , dtpsv , ctpsv , ztpsv . Module Procedures public pure subroutine mfi_stpsv (ap, x, uplo, trans, diag, incx) Modern interface for stpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtpsv (ap, x, uplo, trans, diag, incx) Modern interface for dtpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctpsv (ap, x, uplo, trans, diag, incx) Modern interface for ctpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztpsv (ap, x, uplo, trans, diag, incx) Modern interface for ztpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_tpsv.html"},{"title":"mfi_trmv – MFI - Modern Fortran Interfaces","text":"public interface mfi_trmv Generic modern interface for TRMV.\nSupports s, d, c, z.\nSee also: strmv , dtrmv , ctrmv , ztrmv . Module Procedures public pure subroutine mfi_strmv (a, x, uplo, trans, diag, incx) Modern interface for strmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtrmv (a, x, uplo, trans, diag, incx) Modern interface for dtrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctrmv (a, x, uplo, trans, diag, incx) Modern interface for ctrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztrmv (a, x, uplo, trans, diag, incx) Modern interface for ztrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_trmv.html"},{"title":"mfi_trsv – MFI - Modern Fortran Interfaces","text":"public interface mfi_trsv Generic modern interface for TRSV.\nSupports s, d, c, z.\nSee also: strsv , dtrsv , ctrsv , ztrsv . Module Procedures public pure subroutine mfi_strsv (a, x, uplo, trans, diag, incx) Modern interface for strsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtrsv (a, x, uplo, trans, diag, incx) Modern interface for dtrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctrsv (a, x, uplo, trans, diag, incx) Modern interface for ctrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztrsv (a, x, uplo, trans, diag, incx) Modern interface for ztrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx","tags":"","loc":"interface/mfi_trsv.html"},{"title":"mfi_gemm – MFI - Modern Fortran Interfaces","text":"public interface mfi_gemm Generic modern interface for GEMM.\nSupports s, d, c, z.\nSee also: sgemm , dgemm , cgemm , zgemm . Module Procedures public pure subroutine mfi_sgemm (a, b, c, transa, transb, alpha, beta) Modern interface for sgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dgemm (a, b, c, transa, transb, alpha, beta) Modern interface for dgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_cgemm (a, b, c, transa, transb, alpha, beta) Modern interface for cgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_zgemm (a, b, c, transa, transb, alpha, beta) Modern interface for zgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"interface/mfi_gemm.html"},{"title":"mfi_hemm – MFI - Modern Fortran Interfaces","text":"public interface mfi_hemm Generic modern interface for HEMM.\nSupports c, z.\nSee also: chemm , zhemm . Module Procedures public pure subroutine mfi_chemm (a, b, c, side, uplo, alpha, beta) Modern interface for chemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_zhemm (a, b, c, side, uplo, alpha, beta) Modern interface for zhemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"interface/mfi_hemm.html"},{"title":"mfi_herk – MFI - Modern Fortran Interfaces","text":"public interface mfi_herk Generic modern interface for HERK.\nSupports c, z.\nSee also: cherk , zherk . Module Procedures public pure subroutine mfi_cherk (a, c, uplo, trans, alpha, beta) Modern interface for cherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_zherk (a, c, uplo, trans, alpha, beta) Modern interface for zherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta","tags":"","loc":"interface/mfi_herk.html"},{"title":"mfi_her2k – MFI - Modern Fortran Interfaces","text":"public interface mfi_her2k Generic modern interface for HER2K.\nSupports c, z.\nSee also: cher2k , zher2k . Module Procedures public pure subroutine mfi_cher2k (a, b, c, uplo, trans, alpha, beta) Modern interface for cher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_zher2k (a, b, c, uplo, trans, alpha, beta) Modern interface for zher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta","tags":"","loc":"interface/mfi_her2k.html"},{"title":"mfi_symm – MFI - Modern Fortran Interfaces","text":"public interface mfi_symm Generic modern interface for SYMM.\nSupports s, d.\nSee also: ssymm , dsymm . Module Procedures public pure subroutine mfi_ssymm (a, b, c, side, uplo, alpha, beta) Modern interface for ssymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsymm (a, b, c, side, uplo, alpha, beta) Modern interface for dsymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"interface/mfi_symm.html"},{"title":"mfi_syrk – MFI - Modern Fortran Interfaces","text":"public interface mfi_syrk Generic modern interface for SYRK.\nSupports s, d.\nSee also: ssyrk , dsyrk . Module Procedures public pure subroutine mfi_ssyrk (a, c, uplo, trans, alpha, beta) Modern interface for ssyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsyrk (a, c, uplo, trans, alpha, beta) Modern interface for dsyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"interface/mfi_syrk.html"},{"title":"mfi_syr2k – MFI - Modern Fortran Interfaces","text":"public interface mfi_syr2k Generic modern interface for SYR2K.\nSupports s, d.\nSee also: ssyr2k , dsyr2k . Module Procedures public pure subroutine mfi_ssyr2k (a, b, c, uplo, trans, alpha, beta) Modern interface for ssyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsyr2k (a, b, c, uplo, trans, alpha, beta) Modern interface for dsyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta","tags":"","loc":"interface/mfi_syr2k.html"},{"title":"mfi_trmm – MFI - Modern Fortran Interfaces","text":"public interface mfi_trmm Generic modern interface for TRMM.\nSupports s, d, c, z.\nSee also: strmm , dtrmm , ctrmm , ztrmm . Module Procedures public pure subroutine mfi_strmm (a, b, side, uplo, transa, diag, alpha) Modern interface for strmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_dtrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for dtrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_ctrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for ctrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_ztrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for ztrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"interface/mfi_trmm.html"},{"title":"mfi_trsm – MFI - Modern Fortran Interfaces","text":"public interface mfi_trsm Generic modern interface for TRSM.\nSupports s, d, c, z.\nSee also: strsm , dtrsm , ctrsm , ztrsm . Module Procedures public pure subroutine mfi_strsm (a, b, side, uplo, transa, diag, alpha) Modern interface for strsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_dtrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for dtrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_ctrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for ctrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_ztrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for ztrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"interface/mfi_trsm.html"},{"title":"mfi_lamch – MFI - Modern Fortran Interfaces","text":"public interface mfi_lamch Generic modern interface for LAMCH.\nSupports s, d.\nSee also: f77_lamch , f77_lamch . Module Procedures public pure function mfi_slamch (cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL32), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL32) public pure function mfi_dlamch (cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL64), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL64)","tags":"","loc":"interface/mfi_lamch.html"},{"title":"mfi_iamax – MFI - Modern Fortran Interfaces","text":"public interface mfi_iamax Generic modern interface for IAMAX.\nSupports s, d, c, z.\nSee also: f77_iamax , f77_iamax , f77_iamax , f77_iamax . Module Procedures public pure function mfi_isamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_idamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_icamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_izamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"interface/mfi_iamax.html"},{"title":"mfi_iamin – MFI - Modern Fortran Interfaces","text":"public interface mfi_iamin Generic modern interface for IAMIN.\nSupports s, d, c, z.\nSee also: f77_iamin , f77_iamin , f77_iamin , f77_iamin . Module Procedures public pure function mfi_isamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_idamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_icamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_izamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer","tags":"","loc":"interface/mfi_iamin.html"},{"title":"isamax – MFI - Modern Fortran Interfaces","text":"public pure function isamax(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/isamax.html"},{"title":"idamax – MFI - Modern Fortran Interfaces","text":"public pure function idamax(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/idamax.html"},{"title":"icamax – MFI - Modern Fortran Interfaces","text":"public pure function icamax(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/icamax.html"},{"title":"izamax – MFI - Modern Fortran Interfaces","text":"public pure function izamax(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/izamax.html"},{"title":"isamin – MFI - Modern Fortran Interfaces","text":"public pure function isamin(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/isamin.html"},{"title":"idamin – MFI - Modern Fortran Interfaces","text":"public pure function idamin(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/idamin.html"},{"title":"icamin – MFI - Modern Fortran Interfaces","text":"public pure function icamin(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/icamin.html"},{"title":"izamin – MFI - Modern Fortran Interfaces","text":"public pure function izamin(n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"proc/izamin.html"},{"title":"f77_copy – MFI - Modern Fortran Interfaces","text":"public interface f77_copy Generic old style interface for COPY.\nSupports s, d, c, z.\nSee also: mfi_copy , scopy , dcopy , ccopy , zcopy . Subroutines public pure subroutine scopy(n, x, incx, y, incy) Original interface for SCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dcopy(n, x, incx, y, incy) Original interface for DCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine ccopy(n, x, incx, y, incy) Original interface for CCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zcopy(n, x, incx, y, incy) Original interface for ZCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_copy.html"},{"title":"f77_swap – MFI - Modern Fortran Interfaces","text":"public interface f77_swap Generic old style interface for SWAP.\nSupports s, d, c, z.\nSee also: mfi_swap , sswap , dswap , cswap , zswap . Subroutines public pure subroutine sswap(n, x, incx, y, incy) Original interface for SSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dswap(n, x, incx, y, incy) Original interface for DSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine cswap(n, x, incx, y, incy) Original interface for CSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zswap(n, x, incx, y, incy) Original interface for ZSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_swap.html"},{"title":"f77_axpy – MFI - Modern Fortran Interfaces","text":"public interface f77_axpy Generic old style interface for AXPY.\nSupports s, d, c, z.\nSee also: mfi_axpy , saxpy , daxpy , caxpy , zaxpy . Subroutines public pure subroutine saxpy(n, a, x, incx, y, incy) Original interface for SAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine daxpy(n, a, x, incx, y, incy) Original interface for DAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine caxpy(n, a, x, incx, y, incy) Original interface for CAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zaxpy(n, a, x, incx, y, incy) Original interface for ZAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_axpy.html"},{"title":"f77_dot – MFI - Modern Fortran Interfaces","text":"public interface f77_dot Generic old style interface for DOT.\nSupports s, d.\nSee also: mfi_dot , sdot , ddot . Functions public pure function sdot(n, x, incx, y, incy) Original interface for SDOT\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy Return Value real(kind=REAL32) public pure function ddot(n, x, incx, y, incy) Original interface for DDOT\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy Return Value real(kind=REAL64)","tags":"","loc":"interface/f77_dot.html"},{"title":"f77_dotc – MFI - Modern Fortran Interfaces","text":"public interface f77_dotc Generic old style interface for DOTC.\nSupports c, z.\nSee also: mfi_dotc , cdotc , zdotc . Functions public pure function cdotc(n, x, incx, y, incy) Original interface for CDOTC\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL32) public pure function zdotc(n, x, incx, y, incy) Original interface for ZDOTC\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL64)","tags":"","loc":"interface/f77_dotc.html"},{"title":"f77_dotu – MFI - Modern Fortran Interfaces","text":"public interface f77_dotu Generic old style interface for DOTU.\nSupports c, z.\nSee also: mfi_dotu , cdotu , zdotu . Functions public pure function cdotu(n, x, incx, y, incy) Original interface for CDOTU\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL32) public pure function zdotu(n, x, incx, y, incy) Original interface for ZDOTU\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL64)","tags":"","loc":"interface/f77_dotu.html"},{"title":"f77_asum – MFI - Modern Fortran Interfaces","text":"public interface f77_asum Generic old style interface for ASUM.\nSupports s, d, sc, dz.\nSee also: mfi_asum , sasum , dasum , scasum , dzasum . Functions public pure function sasum(n, x, incx) Original interface for SASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function scasum(n, x, incx) Original interface for SCASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function dasum(n, x, incx) Original interface for DASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64) public pure function dzasum(n, x, incx) Original interface for DZASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64)","tags":"","loc":"interface/f77_asum.html"},{"title":"f77_nrm2 – MFI - Modern Fortran Interfaces","text":"public interface f77_nrm2 Generic old style interface for NRM2.\nSupports s, d, sc, dz.\nSee also: mfi_nrm2 , snrm2 , dnrm2 , scnrm2 , dznrm2 . Functions public pure function snrm2(n, x, incx) Original interface for SNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function scnrm2(n, x, incx) Original interface for SCNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function dnrm2(n, x, incx) Original interface for DNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64) public pure function dznrm2(n, x, incx) Original interface for DZNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64)","tags":"","loc":"interface/f77_nrm2.html"},{"title":"f77_rot – MFI - Modern Fortran Interfaces","text":"public interface f77_rot Generic old style interface for ROT.\nSupports s, d, c, z, cs, zd.\nSee also: mfi_rot , srot , drot , crot , zrot , csrot , zdrot . Subroutines public pure subroutine srot(n, x, incx, y, incy, c, s) Original interface for SROT\nSee also: mfi_rot , f77_rot .\nSROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s public pure subroutine drot(n, x, incx, y, incy, c, s) Original interface for DROT\nSee also: mfi_rot , f77_rot .\nDROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s public pure subroutine crot(n, x, incx, y, incy, c, s) Original interface for CROT\nSee also: mfi_rot , f77_rot .\nCROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: c complex(kind=REAL32), intent(in) :: s public pure subroutine zrot(n, x, incx, y, incy, c, s) Original interface for ZROT\nSee also: mfi_rot , f77_rot .\nZROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: c complex(kind=REAL64), intent(in) :: s public pure subroutine csrot(n, x, incx, y, incy, c, s) Original interface for CSROT\nSee also: mfi_rot , f77_rot .\nCSROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s public pure subroutine zdrot(n, x, incx, y, incy, c, s) Original interface for ZDROT\nSee also: mfi_rot , f77_rot .\nZDROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s","tags":"","loc":"interface/f77_rot.html"},{"title":"f77_rotg – MFI - Modern Fortran Interfaces","text":"public interface f77_rotg Generic old style interface for ROTG.\nSupports s, d, c, z.\nSee also: mfi_rotg , srotg , drotg , crotg , zrotg . Subroutines public pure subroutine srotg(a, b, c, s) Original interface for SROTG\n See also: mfi_rotg , f77_rotg .\nsrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - s c ] [ b ] [ 0 ] satisfying c**2 + s**2 = 1 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a real(kind=REAL32), intent(inout) :: b real(kind=REAL32), intent(out) :: c real(kind=REAL32), intent(out) :: s public pure subroutine drotg(a, b, c, s) Original interface for DROTG\n See also: mfi_rotg , f77_rotg .\ndrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - s c ] [ b ] [ 0 ] satisfying c**2 + s**2 = 1 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a real(kind=REAL64), intent(inout) :: b real(kind=REAL64), intent(out) :: c real(kind=REAL64), intent(out) :: s public pure subroutine crotg(a, b, c, s) Original interface for CROTG\n See also: mfi_rotg , f77_rotg .\ncrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - conjg ( s ) c ] [ b ] [ 0 ] where c is real, s is complex, and c**2 + conjg(s)*s = 1 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a complex(kind=REAL32), intent(inout) :: b real(kind=REAL32), intent(out) :: c complex(kind=REAL32), intent(out) :: s public pure subroutine zrotg(a, b, c, s) Original interface for ZROTG\n See also: mfi_rotg , f77_rotg .\nzrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - conjg ( s ) c ] [ b ] [ 0 ] where c is real, s is complex, and c**2 + conjg(s)*s = 1 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a complex(kind=REAL64), intent(inout) :: b real(kind=REAL64), intent(out) :: c complex(kind=REAL64), intent(out) :: s","tags":"","loc":"interface/f77_rotg.html"},{"title":"f77_rotm – MFI - Modern Fortran Interfaces","text":"public interface f77_rotm Generic old style interface for ROTM.\nSupports s, d.\nSee also: mfi_rotm , srotm , drotm . Subroutines public pure subroutine srotm(n, x, incx, y, incy, param) Original interface for SROTM\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: param (5) public pure subroutine drotm(n, x, incx, y, incy, param) Original interface for DROTM\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: param (5)","tags":"","loc":"interface/f77_rotm.html"},{"title":"f77_rotmg – MFI - Modern Fortran Interfaces","text":"public interface f77_rotmg Generic old style interface for ROTMG.\nSupports s, d.\nSee also: mfi_rotmg , srotmg , drotmg . Subroutines public pure subroutine srotmg(d1, d2, x1, y1, param) Original interface for SROTMG\nSee also: mfi_rotmg , f77_rotmg . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: d1 real(kind=REAL32), intent(inout) :: d2 real(kind=REAL32), intent(inout) :: x1 real(kind=REAL32), intent(in) :: y1 real(kind=REAL32), intent(out) :: param (5) public pure subroutine drotmg(d1, d2, x1, y1, param) Original interface for DROTMG\nSee also: mfi_rotmg , f77_rotmg . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: d1 real(kind=REAL64), intent(inout) :: d2 real(kind=REAL64), intent(inout) :: x1 real(kind=REAL64), intent(in) :: y1 real(kind=REAL64), intent(out) :: param (5)","tags":"","loc":"interface/f77_rotmg.html"},{"title":"f77_scal – MFI - Modern Fortran Interfaces","text":"public interface f77_scal Generic old style interface for SCAL.\nSupports s, d, c, z, cs, zd.\nSee also: mfi_scal , sscal , dscal , cscal , zscal , csscal , zdscal . Subroutines public pure subroutine sscal(n, a, x, incx) Original interface for SSCAL\nSee also: mfi_scal , f77_scal .\nSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dscal(n, a, x, incx) Original interface for DSCAL\nSee also: mfi_scal , f77_scal .\nDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine cscal(n, a, x, incx) Original interface for CSCAL\nSee also: mfi_scal , f77_scal .\nCSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine zscal(n, a, x, incx) Original interface for ZSCAL\nSee also: mfi_scal , f77_scal .\nZSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine csscal(n, a, x, incx) Original interface for CSSCAL\nSee also: mfi_scal , f77_scal .\nCSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine zdscal(n, a, x, incx) Original interface for ZDSCAL\nSee also: mfi_scal , f77_scal .\nZDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_scal.html"},{"title":"f77_gbmv – MFI - Modern Fortran Interfaces","text":"public interface f77_gbmv Generic old style interface for GBMV.\nSupports s, d, c, z.\nSee also: mfi_gbmv , sgbmv , dgbmv , cgbmv , zgbmv . Subroutines public pure subroutine sgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for SGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for DGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine cgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for CGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_gbmv.html"},{"title":"f77_gemv – MFI - Modern Fortran Interfaces","text":"public interface f77_gemv Generic old style interface for GEMV.\nSupports s, d, c, z.\nSee also: mfi_gemv , sgemv , dgemv , cgemv , zgemv . Subroutines public pure subroutine sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for SGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for DGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine cgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for CGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_gemv.html"},{"title":"f77_ger – MFI - Modern Fortran Interfaces","text":"public interface f77_ger Generic old style interface for GER.\nSupports s, d.\nSee also: mfi_ger , sger , dger . Subroutines public pure subroutine sger(m, n, alpha, x, incx, y, incy, a, lda) Original interface for SGER\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine dger(m, n, alpha, x, incx, y, incy, a, lda) Original interface for DGER\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_ger.html"},{"title":"f77_gerc – MFI - Modern Fortran Interfaces","text":"public interface f77_gerc Generic old style interface for GERC.\nSupports c, z.\nSee also: mfi_gerc , cgerc , zgerc . Subroutines public pure subroutine cgerc(m, n, alpha, x, incx, y, incy, a, lda) Original interface for CGERC\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zgerc(m, n, alpha, x, incx, y, incy, a, lda) Original interface for ZGERC\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_gerc.html"},{"title":"f77_geru – MFI - Modern Fortran Interfaces","text":"public interface f77_geru Generic old style interface for GERU.\nSupports c, z.\nSee also: mfi_geru , cgeru , zgeru . Subroutines public pure subroutine cgeru(m, n, alpha, x, incx, y, incy, a, lda) Original interface for CGERU\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zgeru(m, n, alpha, x, incx, y, incy, a, lda) Original interface for ZGERU\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_geru.html"},{"title":"f77_hbmv – MFI - Modern Fortran Interfaces","text":"public interface f77_hbmv Generic old style interface for HBMV.\nSupports c, z.\nSee also: mfi_hbmv , chbmv , zhbmv . Subroutines public pure subroutine chbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for CHBMV\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zhbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZHBMV\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_hbmv.html"},{"title":"f77_hemv – MFI - Modern Fortran Interfaces","text":"public interface f77_hemv Generic old style interface for HEMV.\nSupports c, z.\nSee also: mfi_hemv , chemv , zhemv . Subroutines public pure subroutine chemv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for CHEMV\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zhemv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZHEMV\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_hemv.html"},{"title":"f77_her – MFI - Modern Fortran Interfaces","text":"public interface f77_her Generic old style interface for HER.\nSupports c, z.\nSee also: mfi_her , cher , zher . Subroutines public pure subroutine cher(uplo, n, alpha, x, incx, a, lda) Original interface for CHER\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zher(uplo, n, alpha, x, incx, a, lda) Original interface for ZHER\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_her.html"},{"title":"f77_her2 – MFI - Modern Fortran Interfaces","text":"public interface f77_her2 Generic old style interface for HER2.\nSupports c, z.\nSee also: mfi_her2 , cher2 , zher2 . Subroutines public pure subroutine cher2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for CHER2\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zher2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for ZHER2\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_her2.html"},{"title":"f77_hpmv – MFI - Modern Fortran Interfaces","text":"public interface f77_hpmv Generic old style interface for HPMV.\nSupports c, z.\nSee also: mfi_hpmv , chpmv , zhpmv . Subroutines public pure subroutine chpmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for CHPMV\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: ap (*) complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zhpmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for ZHPMV\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: ap (*) complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_hpmv.html"},{"title":"f77_hpr – MFI - Modern Fortran Interfaces","text":"public interface f77_hpr Generic old style interface for HPR.\nSupports c, z.\nSee also: mfi_hpr , chpr , zhpr . Subroutines public pure subroutine chpr(uplo, n, alpha, x, incx, ap) Original interface for CHPR\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: ap (*) public pure subroutine zhpr(uplo, n, alpha, x, incx, ap) Original interface for ZHPR\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: ap (*)","tags":"","loc":"interface/f77_hpr.html"},{"title":"f77_hpr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_hpr2 Generic old style interface for HPR2.\nSupports c, z.\nSee also: mfi_hpr2 , chpr2 , zhpr2 . Subroutines public pure subroutine chpr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for CHPR2\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: ap (*) public pure subroutine zhpr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for ZHPR2\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: ap (*)","tags":"","loc":"interface/f77_hpr2.html"},{"title":"f77_sbmv – MFI - Modern Fortran Interfaces","text":"public interface f77_sbmv Generic old style interface for SBMV.\nSupports s, d.\nSee also: mfi_sbmv , ssbmv , dsbmv . Subroutines public pure subroutine ssbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for SSBMV\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dsbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for DSBMV\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_sbmv.html"},{"title":"f77_spmv – MFI - Modern Fortran Interfaces","text":"public interface f77_spmv Generic old style interface for SPMV.\nSupports s, d.\nSee also: mfi_spmv , sspmv , dspmv . Subroutines public pure subroutine sspmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for SSPMV\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: ap (*) real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dspmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for DSPMV\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: ap (*) real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_spmv.html"},{"title":"f77_spr – MFI - Modern Fortran Interfaces","text":"public interface f77_spr Generic old style interface for SPR.\nSupports s, d.\nSee also: mfi_spr , sspr , dspr . Subroutines public pure subroutine sspr(uplo, n, alpha, x, incx, ap) Original interface for SSPR\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: ap (*) public pure subroutine dspr(uplo, n, alpha, x, incx, ap) Original interface for DSPR\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: ap (*)","tags":"","loc":"interface/f77_spr.html"},{"title":"f77_spr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_spr2 Generic old style interface for SPR2.\nSupports s, d.\nSee also: mfi_spr2 , sspr2 , dspr2 . Subroutines public pure subroutine sspr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for SSPR2\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(inout) :: ap (*) public pure subroutine dspr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for DSPR2\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(inout) :: ap (*)","tags":"","loc":"interface/f77_spr2.html"},{"title":"f77_symv – MFI - Modern Fortran Interfaces","text":"public interface f77_symv Generic old style interface for SYMV.\nSupports s, d.\nSee also: mfi_symv , ssymv , dsymv . Subroutines public pure subroutine ssymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for SSYMV\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dsymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for DSYMV\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy","tags":"","loc":"interface/f77_symv.html"},{"title":"f77_syr – MFI - Modern Fortran Interfaces","text":"public interface f77_syr Generic old style interface for SYR.\nSupports s, d.\nSee also: mfi_syr , ssyr , dsyr . Subroutines public pure subroutine ssyr(uplo, n, alpha, x, incx, a, lda) Original interface for SSYR\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine dsyr(uplo, n, alpha, x, incx, a, lda) Original interface for DSYR\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_syr.html"},{"title":"f77_syr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_syr2 Generic old style interface for SYR2.\nSupports s, d.\nSee also: mfi_syr2 , ssyr2 , dsyr2 . Subroutines public pure subroutine ssyr2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for SSYR2\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine dsyr2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for DSYR2\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda","tags":"","loc":"interface/f77_syr2.html"},{"title":"f77_tbmv – MFI - Modern Fortran Interfaces","text":"public interface f77_tbmv Generic old style interface for TBMV.\nSupports s, d, c, z.\nSee also: mfi_tbmv , stbmv , dtbmv , ctbmv , ztbmv . Subroutines public pure subroutine stbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for STBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for DTBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for CTBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for ZTBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_tbmv.html"},{"title":"f77_tbsv – MFI - Modern Fortran Interfaces","text":"public interface f77_tbsv Generic old style interface for TBSV.\nSupports s, d, c, z.\nSee also: mfi_tbsv , stbsv , dtbsv , ctbsv , ztbsv . Subroutines public pure subroutine stbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for STBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for DTBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for CTBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for ZTBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_tbsv.html"},{"title":"f77_tpmv – MFI - Modern Fortran Interfaces","text":"public interface f77_tpmv Generic old style interface for TPMV.\nSupports s, d, c, z.\nSee also: mfi_tpmv , stpmv , dtpmv , ctpmv , ztpmv . Subroutines public pure subroutine stpmv(uplo, trans, diag, n, ap, x, incx) Original interface for STPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: ap (*) real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtpmv(uplo, trans, diag, n, ap, x, incx) Original interface for DTPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: ap (*) real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctpmv(uplo, trans, diag, n, ap, x, incx) Original interface for CTPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: ap (*) complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztpmv(uplo, trans, diag, n, ap, x, incx) Original interface for ZTPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: ap (*) complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_tpmv.html"},{"title":"f77_tpsv – MFI - Modern Fortran Interfaces","text":"public interface f77_tpsv Generic old style interface for TPSV.\nSupports s, d, c, z.\nSee also: mfi_tpsv , stpsv , dtpsv , ctpsv , ztpsv . Subroutines public pure subroutine stpsv(uplo, trans, diag, n, ap, x, incx) Original interface for STPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: ap (*) real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtpsv(uplo, trans, diag, n, ap, x, incx) Original interface for DTPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: ap (*) real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctpsv(uplo, trans, diag, n, ap, x, incx) Original interface for CTPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: ap (*) complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztpsv(uplo, trans, diag, n, ap, x, incx) Original interface for ZTPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: ap (*) complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_tpsv.html"},{"title":"f77_trmv – MFI - Modern Fortran Interfaces","text":"public interface f77_trmv Generic old style interface for TRMV.\nSupports s, d, c, z.\nSee also: mfi_trmv , strmv , dtrmv , ctrmv , ztrmv . Subroutines public pure subroutine strmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for STRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtrmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for DTRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctrmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for CTRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztrmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for ZTRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_trmv.html"},{"title":"f77_trsv – MFI - Modern Fortran Interfaces","text":"public interface f77_trsv Generic old style interface for TRSV.\nSupports s, d, c, z.\nSee also: mfi_trsv , strsv , dtrsv , ctrsv , ztrsv . Subroutines public pure subroutine strsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for STRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtrsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for DTRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctrsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for CTRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztrsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for ZTRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx","tags":"","loc":"interface/f77_trsv.html"},{"title":"f77_gemm – MFI - Modern Fortran Interfaces","text":"public interface f77_gemm Generic old style interface for GEMM.\nSupports s, d, c, z.\nSee also: mfi_gemm , sgemm , dgemm , cgemm , zgemm . Subroutines public pure subroutine sgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for SGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for DGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine cgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for CGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for ZGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_gemm.html"},{"title":"f77_hemm – MFI - Modern Fortran Interfaces","text":"public interface f77_hemm Generic old style interface for HEMM.\nSupports c, z.\nSee also: mfi_hemm , chemm , zhemm . Subroutines public pure subroutine chemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for CHEMM\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zhemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for ZHEMM\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_hemm.html"},{"title":"f77_herk – MFI - Modern Fortran Interfaces","text":"public interface f77_herk Generic old style interface for HERK.\nSupports c, z.\nSee also: mfi_herk , cherk , zherk . Subroutines public pure subroutine cherk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for CHERK\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=wp), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=wp), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zherk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for ZHERK\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=wp), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=wp), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_herk.html"},{"title":"f77_her2k – MFI - Modern Fortran Interfaces","text":"public interface f77_her2k Generic old style interface for HER2K.\nSupports c, z.\nSee also: mfi_her2k , cher2k , zher2k . Subroutines public pure subroutine cher2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for CHER2K\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=wp), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zher2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for ZHER2K\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=wp), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_her2k.html"},{"title":"f77_symm – MFI - Modern Fortran Interfaces","text":"public interface f77_symm Generic old style interface for SYMM.\nSupports s, d.\nSee also: mfi_symm , ssymm , dsymm . Subroutines public pure subroutine ssymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for SSYMM\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dsymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for DSYMM\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_symm.html"},{"title":"f77_syrk – MFI - Modern Fortran Interfaces","text":"public interface f77_syrk Generic old style interface for SYRK.\nSupports s, d.\nSee also: mfi_syrk , ssyrk , dsyrk . Subroutines public pure subroutine ssyrk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for SSYRK\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dsyrk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for DSYRK\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_syrk.html"},{"title":"f77_syr2k – MFI - Modern Fortran Interfaces","text":"public interface f77_syr2k Generic old style interface for SYR2K.\nSupports s, d.\nSee also: mfi_syr2k , ssyr2k , dsyr2k . Subroutines public pure subroutine ssyr2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for SSYR2K\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dsyr2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for DSYR2K\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc","tags":"","loc":"interface/f77_syr2k.html"},{"title":"f77_trmm – MFI - Modern Fortran Interfaces","text":"public interface f77_trmm Generic old style interface for TRMM.\nSupports s, d, c, z.\nSee also: mfi_trmm , strmm , dtrmm , ctrmm , ztrmm . Subroutines public pure subroutine strmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for STRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine dtrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for DTRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ctrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for CTRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ztrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for ZTRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb","tags":"","loc":"interface/f77_trmm.html"},{"title":"f77_trsm – MFI - Modern Fortran Interfaces","text":"public interface f77_trsm Generic old style interface for TRSM.\nSupports s, d, c, z.\nSee also: mfi_trsm , strsm , dtrsm , ctrsm , ztrsm . Subroutines public pure subroutine strsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for STRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine dtrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for DTRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ctrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for CTRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ztrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for ZTRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb","tags":"","loc":"interface/f77_trsm.html"},{"title":"slamch – MFI - Modern Fortran Interfaces","text":"interface ?lamch supports s, d. See mfi_lamch for the modern version. public pure function slamch(cmach) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach Return Value real(kind=real32) Description SLAMCH determines single precision machine parameters.","tags":"","loc":"interface/slamch.html"},{"title":"dlamch – MFI - Modern Fortran Interfaces","text":"interface ?lamch supports s, d. See mfi_lamch for the modern version. public pure function dlamch(cmach) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach Return Value real(kind=real64) Description DLAMCH determines double precision machine parameters.","tags":"","loc":"interface/dlamch.html"},{"title":"sdsdot – MFI - Modern Fortran Interfaces","text":"interface public pure function sdsdot(n, sb, sx, incx, sy, incy) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=wp), intent(in) :: sb real(kind=wp), intent(in) :: sx (*) integer, intent(in) :: incx real(kind=wp), intent(in) :: sy (*) integer, intent(in) :: incy Return Value real(kind=wp) Description Compute the inner product of two vectors with extended\nprecision accumulation. Returns S.P. result with dot product accumulated in D.P.\nSDSDOT = SB + sum for I = 0 to N-1 of SX(LX+I INCX) SY(LY+I INCY),\nwhere LX = 1 if INCX .GE. 0, else LX = 1+(1-N) INCX, and LY is\ndefined in a similar way using INCY.","tags":"","loc":"interface/sdsdot.html"},{"title":"dsdot – MFI - Modern Fortran Interfaces","text":"interface public pure function dsdot(n, sx, incx, sy, incy) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=sp), intent(in) :: sx (*) integer, intent(in) :: incx real(kind=sp), intent(in) :: sy (*) integer, intent(in) :: incy Return Value real(kind=dp) Description Compute the inner product of two vectors with extended\nprecision accumulation and result. Returns D.P. dot product accumulated in D.P., for S.P. SX and SY\nDSDOT = sum for I = 0 to N-1 of  SX(LX+I INCX) * SY(LY+I INCY),\nwhere LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\ndefined in a similar way using INCY.","tags":"","loc":"interface/dsdot.html"},{"title":"f77_iamax – MFI - Modern Fortran Interfaces","text":"public interface f77_iamax Module Procedures public pure function isamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function idamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function icamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function izamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"interface/f77_iamax.html"},{"title":"f77_iamin – MFI - Modern Fortran Interfaces","text":"public interface f77_iamin Module Procedures public pure function isamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function idamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function icamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function izamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"interface/f77_iamin.html"},{"title":"mfi_sgeqrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgeqrf(a, tau, info) Modern interface for sgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_sgeqrf.html"},{"title":"mfi_dgeqrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgeqrf(a, tau, info) Modern interface for dgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dgeqrf.html"},{"title":"mfi_cgeqrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgeqrf(a, tau, info) Modern interface for cgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cgeqrf.html"},{"title":"mfi_zgeqrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgeqrf(a, tau, info) Modern interface for zgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zgeqrf.html"},{"title":"mfi_sgerqf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgerqf(a, tau, info) Modern interface for sgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_sgerqf.html"},{"title":"mfi_dgerqf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgerqf(a, tau, info) Modern interface for dgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dgerqf.html"},{"title":"mfi_cgerqf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgerqf(a, tau, info) Modern interface for cgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cgerqf.html"},{"title":"mfi_zgerqf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgerqf(a, tau, info) Modern interface for zgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zgerqf.html"},{"title":"mfi_sgetrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgetrf(a, ipiv, info) Modern interface for sgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_sgetrf.html"},{"title":"mfi_dgetrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgetrf(a, ipiv, info) Modern interface for dgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dgetrf.html"},{"title":"mfi_cgetrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgetrf(a, ipiv, info) Modern interface for cgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cgetrf.html"},{"title":"mfi_zgetrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgetrf(a, ipiv, info) Modern interface for zgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zgetrf.html"},{"title":"mfi_sgetri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgetri(a, ipiv, info) Modern interface for sgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_sgetri.html"},{"title":"mfi_dgetri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgetri(a, ipiv, info) Modern interface for dgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dgetri.html"},{"title":"mfi_cgetri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgetri(a, ipiv, info) Modern interface for cgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cgetri.html"},{"title":"mfi_zgetri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgetri(a, ipiv, info) Modern interface for zgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zgetri.html"},{"title":"mfi_sgetrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgetrs(a, ipiv, b, trans, info) Modern interface for sgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_sgetrs.html"},{"title":"mfi_dgetrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgetrs(a, ipiv, b, trans, info) Modern interface for dgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dgetrs.html"},{"title":"mfi_cgetrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgetrs(a, ipiv, b, trans, info) Modern interface for cgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cgetrs.html"},{"title":"mfi_zgetrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgetrs(a, ipiv, b, trans, info) Modern interface for zgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zgetrs.html"},{"title":"mfi_chetrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chetrf(a, uplo, ipiv, info) Modern interface for chetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_chetrf.html"},{"title":"mfi_zhetrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhetrf(a, uplo, ipiv, info) Modern interface for zhetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zhetrf.html"},{"title":"mfi_chegv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_chegv(a, b, w, itype, jobz, uplo, info) Modern interface for chegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) real(kind=REAL32), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_chegv.html"},{"title":"mfi_zhegv – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zhegv(a, b, w, itype, jobz, uplo, info) Modern interface for zhegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) real(kind=REAL64), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zhegv.html"},{"title":"mfi_cheevd – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cheevd(a, w, jobz, uplo, info) Modern interface for cheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cheevd.html"},{"title":"mfi_zheevd – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zheevd(a, w, jobz, uplo, info) Modern interface for zheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zheevd.html"},{"title":"mfi_sgesvd – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_sgesvd(a, s, u, vt, ww, job, info) Modern interface for sgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) real(kind=REAL32), intent(out), optional, target :: u (:,:) real(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_sgesvd.html"},{"title":"mfi_dgesvd – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dgesvd(a, s, u, vt, ww, job, info) Modern interface for dgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) real(kind=REAL64), intent(out), optional, target :: u (:,:) real(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dgesvd.html"},{"title":"mfi_cgesvd – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cgesvd(a, s, u, vt, ww, job, info) Modern interface for cgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) complex(kind=REAL32), intent(out), optional, target :: u (:,:) complex(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cgesvd.html"},{"title":"mfi_zgesvd – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zgesvd(a, s, u, vt, ww, job, info) Modern interface for zgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) complex(kind=REAL64), intent(out), optional, target :: u (:,:) complex(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zgesvd.html"},{"title":"mfi_spotrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_spotrf(a, info, uplo) Modern interface for spotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_spotrf.html"},{"title":"mfi_dpotrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dpotrf(a, info, uplo) Modern interface for dpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_dpotrf.html"},{"title":"mfi_cpotrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cpotrf(a, info, uplo) Modern interface for cpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_cpotrf.html"},{"title":"mfi_zpotrf – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zpotrf(a, info, uplo) Modern interface for zpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_zpotrf.html"},{"title":"mfi_spotri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_spotri(a, info, uplo) Modern interface for spotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_spotri.html"},{"title":"mfi_dpotri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dpotri(a, info, uplo) Modern interface for dpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_dpotri.html"},{"title":"mfi_cpotri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cpotri(a, info, uplo) Modern interface for cpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_cpotri.html"},{"title":"mfi_zpotri – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zpotri(a, info, uplo) Modern interface for zpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"proc/mfi_zpotri.html"},{"title":"mfi_spotrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_spotrs(a, b, uplo, info) Modern interface for spotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_spotrs.html"},{"title":"mfi_dpotrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dpotrs(a, b, uplo, info) Modern interface for dpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dpotrs.html"},{"title":"mfi_cpotrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cpotrs(a, b, uplo, info) Modern interface for cpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cpotrs.html"},{"title":"mfi_zpotrs – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zpotrs(a, b, uplo, info) Modern interface for zpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zpotrs.html"},{"title":"mfi_spocon – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_spocon(a, anorm, rcond, uplo, info) Modern interface for spocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_spocon.html"},{"title":"mfi_dpocon – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_dpocon(a, anorm, rcond, uplo, info) Modern interface for dpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_dpocon.html"},{"title":"mfi_cpocon – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_cpocon(a, anorm, rcond, uplo, info) Modern interface for cpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_cpocon.html"},{"title":"mfi_zpocon – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_zpocon(a, anorm, rcond, uplo, info) Modern interface for zpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"proc/mfi_zpocon.html"},{"title":"mfi_error – MFI - Modern Fortran Interfaces","text":"public pure subroutine mfi_error(name, info) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name integer, intent(in) :: info","tags":"","loc":"proc/mfi_error.html"},{"title":"mfi_geqrf – MFI - Modern Fortran Interfaces","text":"public interface mfi_geqrf Generic modern interface for GEQRF.\nSupports s, d, c, z.\nSee also: sgeqrf , dgeqrf , cgeqrf , zgeqrf . Module Procedures public pure subroutine mfi_sgeqrf (a, tau, info) Modern interface for sgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_dgeqrf (a, tau, info) Modern interface for dgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_cgeqrf (a, tau, info) Modern interface for cgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_zgeqrf (a, tau, info) Modern interface for zgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_geqrf.html"},{"title":"mfi_gerqf – MFI - Modern Fortran Interfaces","text":"public interface mfi_gerqf Generic modern interface for GERQF.\nSupports s, d, c, z.\nSee also: sgerqf , dgerqf , cgerqf , zgerqf . Module Procedures public pure subroutine mfi_sgerqf (a, tau, info) Modern interface for sgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_dgerqf (a, tau, info) Modern interface for dgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_cgerqf (a, tau, info) Modern interface for cgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_zgerqf (a, tau, info) Modern interface for zgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_gerqf.html"},{"title":"mfi_getrf – MFI - Modern Fortran Interfaces","text":"public interface mfi_getrf Generic modern interface for GETRF.\nSupports s, d, c, z.\nSee also: sgetrf , dgetrf , cgetrf , zgetrf . Module Procedures public pure subroutine mfi_sgetrf (a, ipiv, info) Modern interface for sgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_dgetrf (a, ipiv, info) Modern interface for dgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_cgetrf (a, ipiv, info) Modern interface for cgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zgetrf (a, ipiv, info) Modern interface for zgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_getrf.html"},{"title":"mfi_getri – MFI - Modern Fortran Interfaces","text":"public interface mfi_getri Generic modern interface for GETRI.\nSupports s, d, c, z.\nSee also: sgetri , dgetri , cgetri , zgetri . Module Procedures public pure subroutine mfi_sgetri (a, ipiv, info) Modern interface for sgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_dgetri (a, ipiv, info) Modern interface for dgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_cgetri (a, ipiv, info) Modern interface for cgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zgetri (a, ipiv, info) Modern interface for zgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_getri.html"},{"title":"mfi_getrs – MFI - Modern Fortran Interfaces","text":"public interface mfi_getrs Generic modern interface for GETRS.\nSupports s, d, c, z.\nSee also: sgetrs , dgetrs , cgetrs , zgetrs . Module Procedures public pure subroutine mfi_sgetrs (a, ipiv, b, trans, info) Modern interface for sgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_dgetrs (a, ipiv, b, trans, info) Modern interface for dgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_cgetrs (a, ipiv, b, trans, info) Modern interface for cgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_zgetrs (a, ipiv, b, trans, info) Modern interface for zgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_getrs.html"},{"title":"mfi_hetrf – MFI - Modern Fortran Interfaces","text":"public interface mfi_hetrf Generic modern interface for HETRF.\nSupports c, z.\nSee also: chetrf , zhetrf . Module Procedures public pure subroutine mfi_chetrf (a, uplo, ipiv, info) Modern interface for chetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zhetrf (a, uplo, ipiv, info) Modern interface for zhetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_hetrf.html"},{"title":"mfi_hegv – MFI - Modern Fortran Interfaces","text":"public interface mfi_hegv Generic modern interface for HEGV.\nSupports c, z.\nSee also: chegv , zhegv . Module Procedures public pure subroutine mfi_chegv (a, b, w, itype, jobz, uplo, info) Modern interface for chegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) real(kind=REAL32), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zhegv (a, b, w, itype, jobz, uplo, info) Modern interface for zhegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) real(kind=REAL64), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_hegv.html"},{"title":"mfi_heevd – MFI - Modern Fortran Interfaces","text":"public interface mfi_heevd Generic modern interface for HEEVD.\nSupports c, z.\nSee also: cheevd , zheevd . Module Procedures public pure subroutine mfi_cheevd (a, w, jobz, uplo, info) Modern interface for cheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zheevd (a, w, jobz, uplo, info) Modern interface for zheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_heevd.html"},{"title":"mfi_gesvd – MFI - Modern Fortran Interfaces","text":"public interface mfi_gesvd Generic modern interface for GESVD.\nSupports s, d, c, z.\nSee also: sgesvd , dgesvd , cgesvd , zgesvd . Module Procedures public pure subroutine mfi_sgesvd (a, s, u, vt, ww, job, info) Modern interface for sgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) real(kind=REAL32), intent(out), optional, target :: u (:,:) real(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_dgesvd (a, s, u, vt, ww, job, info) Modern interface for dgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) real(kind=REAL64), intent(out), optional, target :: u (:,:) real(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_cgesvd (a, s, u, vt, ww, job, info) Modern interface for cgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) complex(kind=REAL32), intent(out), optional, target :: u (:,:) complex(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_zgesvd (a, s, u, vt, ww, job, info) Modern interface for zgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) complex(kind=REAL64), intent(out), optional, target :: u (:,:) complex(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_gesvd.html"},{"title":"mfi_potrf – MFI - Modern Fortran Interfaces","text":"public interface mfi_potrf Generic modern interface for POTRF.\nSupports s, d, c, z.\nSee also: spotrf , dpotrf , cpotrf , zpotrf . Module Procedures public pure subroutine mfi_spotrf (a, info, uplo) Modern interface for spotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_dpotrf (a, info, uplo) Modern interface for dpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_cpotrf (a, info, uplo) Modern interface for cpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_zpotrf (a, info, uplo) Modern interface for zpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"interface/mfi_potrf.html"},{"title":"mfi_potri – MFI - Modern Fortran Interfaces","text":"public interface mfi_potri Generic modern interface for POTRI.\nSupports s, d, c, z.\nSee also: spotri , dpotri , cpotri , zpotri . Module Procedures public pure subroutine mfi_spotri (a, info, uplo) Modern interface for spotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_dpotri (a, info, uplo) Modern interface for dpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_cpotri (a, info, uplo) Modern interface for cpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_zpotri (a, info, uplo) Modern interface for zpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo","tags":"","loc":"interface/mfi_potri.html"},{"title":"mfi_potrs – MFI - Modern Fortran Interfaces","text":"public interface mfi_potrs Generic modern interface for POTRS.\nSupports s, d, c, z.\nSee also: spotrs , dpotrs , cpotrs , zpotrs . Module Procedures public pure subroutine mfi_spotrs (a, b, uplo, info) Modern interface for spotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_dpotrs (a, b, uplo, info) Modern interface for dpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cpotrs (a, b, uplo, info) Modern interface for cpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zpotrs (a, b, uplo, info) Modern interface for zpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_potrs.html"},{"title":"mfi_pocon – MFI - Modern Fortran Interfaces","text":"public interface mfi_pocon Generic modern interface for POCON.\nSupports s, d, c, z.\nSee also: spocon , dpocon , cpocon , zpocon . Module Procedures public pure subroutine mfi_spocon (a, anorm, rcond, uplo, info) Modern interface for spocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_dpocon (a, anorm, rcond, uplo, info) Modern interface for dpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cpocon (a, anorm, rcond, uplo, info) Modern interface for cpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zpocon (a, anorm, rcond, uplo, info) Modern interface for zpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info","tags":"","loc":"interface/mfi_pocon.html"},{"title":"f77_geqrf – MFI - Modern Fortran Interfaces","text":"public interface f77_geqrf Generic old style interface for GEQRF.\nSupports s, d, c, z.\nSee also: mfi_geqrf , sgeqrf , dgeqrf , cgeqrf , zgeqrf . Subroutines public pure subroutine sgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for SGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: tau (*) real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for DGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: tau (*) real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for CGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(out) :: tau (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for ZGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(out) :: tau (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_geqrf.html"},{"title":"f77_gerqf – MFI - Modern Fortran Interfaces","text":"public interface f77_gerqf Generic old style interface for GERQF.\nSupports s, d, c, z.\nSee also: mfi_gerqf , sgerqf , dgerqf , cgerqf , zgerqf . Subroutines public pure subroutine sgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for SGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: tau (*) real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for DGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: tau (*) real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for CGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(out) :: tau (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for ZGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(out) :: tau (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gerqf.html"},{"title":"f77_getrf – MFI - Modern Fortran Interfaces","text":"public interface f77_getrf Generic old style interface for GETRF.\nSupports s, d, c, z.\nSee also: mfi_getrf , sgetrf , dgetrf , cgetrf , zgetrf . Subroutines public pure subroutine sgetrf(m, n, a, lda, ipiv, info) Original interface for SGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public pure subroutine dgetrf(m, n, a, lda, ipiv, info) Original interface for DGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public pure subroutine cgetrf(m, n, a, lda, ipiv, info) Original interface for CGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public pure subroutine zgetrf(m, n, a, lda, ipiv, info) Original interface for ZGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_getrf.html"},{"title":"f77_getri – MFI - Modern Fortran Interfaces","text":"public interface f77_getri Generic old style interface for GETRI.\nSupports s, d, c, z.\nSee also: mfi_getri , sgetri , dgetri , cgetri , zgetri . Subroutines public pure subroutine sgetri(n, a, lda, ipiv, work, lwork, info) Original interface for SGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgetri(n, a, lda, ipiv, work, lwork, info) Original interface for DGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgetri(n, a, lda, ipiv, work, lwork, info) Original interface for CGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgetri(n, a, lda, ipiv, work, lwork, info) Original interface for ZGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_getri.html"},{"title":"f77_getrs – MFI - Modern Fortran Interfaces","text":"public interface f77_getrs Generic old style interface for GETRS.\nSupports s, d, c, z.\nSee also: mfi_getrs , sgetrs , dgetrs , cgetrs , zgetrs . Subroutines public pure subroutine sgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for SGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine dgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for DGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine cgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for CGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine zgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for ZGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info","tags":"","loc":"interface/f77_getrs.html"},{"title":"f77_hetrf – MFI - Modern Fortran Interfaces","text":"public interface f77_hetrf Generic old style interface for HETRF.\nSupports c, z.\nSee also: mfi_hetrf , chetrf , zhetrf . Subroutines public pure subroutine chetrf(uplo, n, a, lda, ipiv, work, lwork, info) Original interface for CHETRF\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zhetrf(uplo, n, a, lda, ipiv, work, lwork, info) Original interface for ZHETRF\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_hetrf.html"},{"title":"f77_hegv – MFI - Modern Fortran Interfaces","text":"public interface f77_hegv Generic old style interface for HEGV.\nSupports c, z.\nSee also: mfi_hegv , chegv , zhegv . Subroutines public pure subroutine chegv(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info) Original interface for CHEGV\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name integer, intent(in) :: itype character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(in) :: rwork (*) integer, intent(out) :: info public pure subroutine zhegv(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info) Original interface for ZHEGV\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name integer, intent(in) :: itype character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(in) :: rwork (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_hegv.html"},{"title":"f77_heevd – MFI - Modern Fortran Interfaces","text":"public interface f77_heevd Generic old style interface for HEEVD.\nSupports c, z.\nSee also: mfi_heevd , cheevd , zheevd . Subroutines public pure subroutine cheevd(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for CHEEVD\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info public pure subroutine zheevd(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for ZHEEVD\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info","tags":"","loc":"interface/f77_heevd.html"},{"title":"f77_gesvd – MFI - Modern Fortran Interfaces","text":"public interface f77_gesvd Generic old style interface for GESVD.\nSupports s, d, c, z.\nSee also: mfi_gesvd , sgesvd , dgesvd , cgesvd , zgesvd . Subroutines public pure subroutine sgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info) Original interface for SGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: s (*) real(kind=REAL32), intent(out) :: u (ldu,*) integer, intent(in) :: ldu real(kind=REAL32), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info) Original interface for DGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: s (*) real(kind=REAL64), intent(out) :: u (ldu,*) integer, intent(in) :: ldu real(kind=REAL64), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info) Original interface for CGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: s (*) complex(kind=REAL32), intent(out) :: u (ldu,*) integer, intent(in) :: ldu complex(kind=REAL32), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(in) :: rwork (*) integer, intent(out) :: info public pure subroutine zgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info) Original interface for ZGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: s (*) complex(kind=REAL64), intent(out) :: u (ldu,*) integer, intent(in) :: ldu complex(kind=REAL64), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(in) :: rwork (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_gesvd.html"},{"title":"f77_potrf – MFI - Modern Fortran Interfaces","text":"public interface f77_potrf Generic old style interface for POTRF.\nSupports s, d, c, z.\nSee also: mfi_potrf , spotrf , dpotrf , cpotrf , zpotrf . Subroutines public pure subroutine spotrf(uplo, n, a, lda, info) Original interface for SPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine dpotrf(uplo, n, a, lda, info) Original interface for DPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine cpotrf(uplo, n, a, lda, info) Original interface for CPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine zpotrf(uplo, n, a, lda, info) Original interface for ZPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info","tags":"","loc":"interface/f77_potrf.html"},{"title":"f77_potri – MFI - Modern Fortran Interfaces","text":"public interface f77_potri Generic old style interface for POTRI.\nSupports s, d, c, z.\nSee also: mfi_potri , spotri , dpotri , cpotri , zpotri . Subroutines public pure subroutine spotri(uplo, n, a, lda, info) Original interface for SPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine dpotri(uplo, n, a, lda, info) Original interface for DPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine cpotri(uplo, n, a, lda, info) Original interface for CPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine zpotri(uplo, n, a, lda, info) Original interface for ZPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info","tags":"","loc":"interface/f77_potri.html"},{"title":"f77_potrs – MFI - Modern Fortran Interfaces","text":"public interface f77_potrs Generic old style interface for POTRS.\nSupports s, d, c, z.\nSee also: mfi_potrs , spotrs , dpotrs , cpotrs , zpotrs . Subroutines public pure subroutine spotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for SPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine dpotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for DPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine cpotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for CPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine zpotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for ZPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info","tags":"","loc":"interface/f77_potrs.html"},{"title":"f77_pocon – MFI - Modern Fortran Interfaces","text":"public interface f77_pocon Generic old style interface for POCON.\nSupports s, d, c, z.\nSee also: mfi_pocon , spocon , dpocon , cpocon , zpocon . Subroutines public pure subroutine spocon(uplo, n, a, lda, anorm, rcond, work, iwork, info) Original interface for SPOCON\nSee also: mfi_pocon , f77_pocon .\nspocon estimates the reciprocal of the condition number (in the\n1-norm) of a real(REAL32) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by sPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond real(kind=REAL32), intent(inout) :: work (*) integer, intent(inout) :: iwork (*) integer, intent(out) :: info public pure subroutine dpocon(uplo, n, a, lda, anorm, rcond, work, iwork, info) Original interface for DPOCON\nSee also: mfi_pocon , f77_pocon .\ndpocon estimates the reciprocal of the condition number (in the\n1-norm) of a real(REAL64) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by dPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond real(kind=REAL64), intent(inout) :: work (*) integer, intent(inout) :: iwork (*) integer, intent(out) :: info public pure subroutine cpocon(uplo, n, a, lda, anorm, rcond, work, rwork, info) Original interface for CPOCON\nSee also: mfi_pocon , f77_pocon .\ncpocon estimates the reciprocal of the condition number (in the\n1-norm) of a complex(REAL32) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by cPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond complex(kind=REAL32), intent(inout) :: work (*) real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(out) :: info public pure subroutine zpocon(uplo, n, a, lda, anorm, rcond, work, rwork, info) Original interface for ZPOCON\nSee also: mfi_pocon , f77_pocon .\nzpocon estimates the reciprocal of the condition number (in the\n1-norm) of a complex(REAL64) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by zPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond complex(kind=REAL64), intent(inout) :: work (*) real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_pocon.html"},{"title":"f77_heevx – MFI - Modern Fortran Interfaces","text":"public interface f77_heevx Generic old style interface for HEEVX.\nSupports c, z.\nSee also: mfi_heevx , cheevx , zheevx . Subroutines public pure subroutine cheevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, ifail, info) Original interface for CHEEVX\nSee also: mfi_heevx , f77_heevx . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: vl real(kind=REAL32), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL32), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(in) :: ifail integer, intent(out) :: info public pure subroutine zheevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, ifail, info) Original interface for ZHEEVX\nSee also: mfi_heevx , f77_heevx . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: vl real(kind=REAL64), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL64), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(in) :: ifail integer, intent(out) :: info","tags":"","loc":"interface/f77_heevx.html"},{"title":"f77_heevr – MFI - Modern Fortran Interfaces","text":"public interface f77_heevr Generic old style interface for HEEVR.\nSupports c, z.\nSee also: mfi_heevr , cheevr , zheevr . Subroutines public pure subroutine cheevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for CHEEVR\nSee also: mfi_heevr , f77_heevr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: vl real(kind=REAL32), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL32), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz integer, intent(in) :: isuppz (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info public pure subroutine zheevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for ZHEEVR\nSee also: mfi_heevr , f77_heevr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: vl real(kind=REAL64), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL64), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz integer, intent(in) :: isuppz (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info","tags":"","loc":"interface/f77_heevr.html"},{"title":"f77_gels – MFI - Modern Fortran Interfaces","text":"public interface f77_gels Generic old style interface for GELS.\nSupports s, d, c, z.\nSee also: mfi_gels , sgels , dgels , cgels , zgels . Subroutines public pure subroutine sgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for SGELS\nSee also: mfi_gels , f77_gels .\nSGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for DGELS\nSee also: mfi_gels , f77_gels .\nDGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for CGELS\nSee also: mfi_gels , f77_gels .\nCGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for ZGELS\nSee also: mfi_gels , f77_gels .\nZGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gels.html"},{"title":"f77_gelst – MFI - Modern Fortran Interfaces","text":"public interface f77_gelst Generic old style interface for GELST.\nSupports s, d, c, z.\nSee also: mfi_gelst , sgelst , dgelst , cgelst , zgelst . Subroutines public pure subroutine sgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for SGELST\nSee also: mfi_gelst , f77_gelst .\nSGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for DGELST\nSee also: mfi_gelst , f77_gelst .\nDGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for CGELST\nSee also: mfi_gelst , f77_gelst .\nCGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for ZGELST\nSee also: mfi_gelst , f77_gelst .\nZGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gelst.html"},{"title":"f77_getsls – MFI - Modern Fortran Interfaces","text":"public interface f77_getsls Generic old style interface for GETSLS.\nSupports s, d, c, z.\nSee also: mfi_getsls , sgetsls , dgetsls , cgetsls , zgetsls . Subroutines public pure subroutine sgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for SGETSLS\nSee also: mfi_getsls , f77_getsls .\nSGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for DGETSLS\nSee also: mfi_getsls , f77_getsls .\nDGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for CGETSLS\nSee also: mfi_getsls , f77_getsls .\nCGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for ZGETSLS\nSee also: mfi_getsls , f77_getsls .\nZGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_getsls.html"},{"title":"f77_gelsd – MFI - Modern Fortran Interfaces","text":"public interface f77_gelsd Generic old style interface for GELSD.\nSupports s, d, c, z.\nSee also: mfi_gelsd , sgelsd , dgelsd , cgelsd , zgelsd . Subroutines public pure subroutine sgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for SGELSD\nSee also: mfi_gelsd , f77_gelsd .\nSGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: s (*) real(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public pure subroutine dgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for DGELSD\nSee also: mfi_gelsd , f77_gelsd .\nDGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: s (*) real(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public pure subroutine cgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for CGELSD\nSee also: mfi_gelsd , f77_gelsd .\nCGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: s (*) complex(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public pure subroutine zgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for ZGELSD\nSee also: mfi_gelsd , f77_gelsd .\nZGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: s (*) complex(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_gelsd.html"},{"title":"f77_gelss – MFI - Modern Fortran Interfaces","text":"public interface f77_gelss Generic old style interface for GELSS.\nSupports s, d, c, z.\nSee also: mfi_gelss , sgelss , dgelss , cgelss , zgelss . Subroutines public pure subroutine sgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for SGELSS\nSee also: mfi_gelss , f77_gelss .\nSGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: s (*) real(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for DGELSS\nSee also: mfi_gelss , f77_gelss .\nDGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: s (*) real(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for CGELSS\nSee also: mfi_gelss , f77_gelss .\nCGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: s (*) complex(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for ZGELSS\nSee also: mfi_gelss , f77_gelss .\nZGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: s (*) complex(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gelss.html"},{"title":"f77_gelsy – MFI - Modern Fortran Interfaces","text":"public interface f77_gelsy Generic old style interface for GELSY.\nSupports s, d, c, z.\nSee also: mfi_gelsy , sgelsy , dgelsy , cgelsy , zgelsy . Subroutines public pure subroutine sgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for SGELSY\nSee also: mfi_gelsy , f77_gelsy .\nSGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) real(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for DGELSY\nSee also: mfi_gelsy , f77_gelsy .\nDGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) real(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for CGELSY\nSee also: mfi_gelsy , f77_gelsy .\nCGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) complex(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for ZGELSY\nSee also: mfi_gelsy , f77_gelsy .\nZGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) complex(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gelsy.html"},{"title":"f77_gglse – MFI - Modern Fortran Interfaces","text":"public interface f77_gglse Generic old style interface for GGLSE.\nSupports s, d, c, z.\nSee also: mfi_gglse , sgglse , dgglse , cgglse , zgglse . Subroutines public pure subroutine sgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for SGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(inout) :: c (*) real(kind=REAL32), intent(inout) :: d (*) real(kind=REAL32), intent(out) :: x (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for DGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(inout) :: c (*) real(kind=REAL64), intent(inout) :: d (*) real(kind=REAL64), intent(out) :: x (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for CGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(inout) :: c (*) complex(kind=REAL32), intent(inout) :: d (*) complex(kind=REAL32), intent(out) :: x (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for ZGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(inout) :: c (*) complex(kind=REAL64), intent(inout) :: d (*) complex(kind=REAL64), intent(out) :: x (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gglse.html"},{"title":"f77_gglsm – MFI - Modern Fortran Interfaces","text":"public interface f77_gglsm Generic old style interface for GGLSM.\nSupports s, d, c, z.\nSee also: mfi_gglsm , sgglsm , dgglsm , cgglsm , zgglsm . Subroutines public pure subroutine sgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for SGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(inout) :: d (*) real(kind=REAL32), intent(out) :: x (*) real(kind=REAL32), intent(out) :: y (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for DGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(inout) :: d (*) real(kind=REAL64), intent(out) :: x (*) real(kind=REAL64), intent(out) :: y (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for CGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(inout) :: d (*) complex(kind=REAL32), intent(out) :: x (*) complex(kind=REAL32), intent(out) :: y (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for ZGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(inout) :: d (*) complex(kind=REAL64), intent(out) :: x (*) complex(kind=REAL64), intent(out) :: y (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_gglsm.html"},{"title":"f77_org2r – MFI - Modern Fortran Interfaces","text":"public interface f77_org2r Generic old style interface for ORG2R.\nSupports s, d.\nSee also: mfi_org2r , sorg2r , dorg2r . Subroutines public pure subroutine sorg2r(m, n, k, a, lda, tau, work, info) Original interface for SORG2R\nSee also: mfi_org2r , f77_org2r .\nThis routine generates an real(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by sgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dorg2r(m, n, k, a, lda, tau, work, info) Original interface for DORG2R\nSee also: mfi_org2r , f77_org2r .\nThis routine generates an real(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by dgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_org2r.html"},{"title":"f77_orgr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_orgr2 Generic old style interface for ORGR2.\nSupports s, d.\nSee also: mfi_orgr2 , sorgr2 , dorgr2 . Subroutines public pure subroutine sorgr2(m, n, k, a, lda, tau, work, info) Original interface for SORGR2\nSee also: mfi_orgr2 , f77_orgr2 .\nThis routine generates an real(REAL32)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by sgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dorgr2(m, n, k, a, lda, tau, work, info) Original interface for DORGR2\nSee also: mfi_orgr2 , f77_orgr2 .\nThis routine generates an real(REAL64)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by dgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_orgr2.html"},{"title":"f77_orm2r – MFI - Modern Fortran Interfaces","text":"public interface f77_orm2r Generic old style interface for ORM2R.\nSupports s, d.\nSee also: mfi_orm2r , sorm2r , dorm2r . Subroutines public pure subroutine sorm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for SORM2R\n See also: mfi_orm2r , f77_orm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dorm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for DORM2R\n See also: mfi_orm2r , f77_orm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_orm2r.html"},{"title":"f77_ormr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_ormr2 Generic old style interface for ORMR2.\nSupports s, d.\nSee also: mfi_ormr2 , sormr2 , dormr2 . Subroutines public pure subroutine sormr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for SORMR2\n See also: mfi_ormr2 , f77_ormr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dormr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for DORMR2\n See also: mfi_ormr2 , f77_ormr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_ormr2.html"},{"title":"f77_ormqr – MFI - Modern Fortran Interfaces","text":"public interface f77_ormqr Generic old style interface for ORMQR.\nSupports s, d.\nSee also: mfi_ormqr , sormqr , dormqr . Subroutines public pure subroutine sormqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for SORMQR\n See also: mfi_ormqr , f77_ormqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dormqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for DORMQR\n See also: mfi_ormqr , f77_ormqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_ormqr.html"},{"title":"f77_ormrq – MFI - Modern Fortran Interfaces","text":"public interface f77_ormrq Generic old style interface for ORMRQ.\nSupports s, d.\nSee also: mfi_ormrq , sormrq , dormrq . Subroutines public pure subroutine sormrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for SORMRQ\n See also: mfi_ormrq , f77_ormrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dormrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for DORMRQ\n See also: mfi_ormrq , f77_ormrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_ormrq.html"},{"title":"f77_orgqr – MFI - Modern Fortran Interfaces","text":"public interface f77_orgqr Generic old style interface for ORGQR.\nSupports s, d.\nSee also: mfi_orgqr , sorgqr , dorgqr . Subroutines public pure subroutine sorgqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for SORGQR\nSee also: mfi_orgqr , f77_orgqr .\nThis routine generates an real(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by sgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dorgqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for DORGQR\nSee also: mfi_orgqr , f77_orgqr .\nThis routine generates an real(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by dgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_orgqr.html"},{"title":"f77_orgrq – MFI - Modern Fortran Interfaces","text":"public interface f77_orgrq Generic old style interface for ORGRQ.\nSupports s, d.\nSee also: mfi_orgrq , sorgrq , dorgrq . Subroutines public pure subroutine sorgrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for SORGRQ\nSee also: mfi_orgrq , f77_orgrq .\nThis routine generates an real(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by sgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dorgrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for DORGRQ\nSee also: mfi_orgrq , f77_orgrq .\nThis routine generates an real(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by dgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_orgrq.html"},{"title":"f77_ung2r – MFI - Modern Fortran Interfaces","text":"public interface f77_ung2r Generic old style interface for UNG2R.\nSupports c, z.\nSee also: mfi_ung2r , cung2r , zung2r . Subroutines public pure subroutine cung2r(m, n, k, a, lda, tau, work, info) Original interface for CUNG2R\nSee also: mfi_ung2r , f77_ung2r .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by cgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zung2r(m, n, k, a, lda, tau, work, info) Original interface for ZUNG2R\nSee also: mfi_ung2r , f77_ung2r .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by zgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_ung2r.html"},{"title":"f77_ungr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_ungr2 Generic old style interface for UNGR2.\nSupports c, z.\nSee also: mfi_ungr2 , cungr2 , zungr2 . Subroutines public pure subroutine cungr2(m, n, k, a, lda, tau, work, info) Original interface for CUNGR2\nSee also: mfi_ungr2 , f77_ungr2 .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by cgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zungr2(m, n, k, a, lda, tau, work, info) Original interface for ZUNGR2\nSee also: mfi_ungr2 , f77_ungr2 .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by zgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_ungr2.html"},{"title":"f77_unm2r – MFI - Modern Fortran Interfaces","text":"public interface f77_unm2r Generic old style interface for UNM2R.\nSupports c, z.\nSee also: mfi_unm2r , cunm2r , zunm2r . Subroutines public pure subroutine cunm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for CUNM2R\n See also: mfi_unm2r , f77_unm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zunm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for ZUNM2R\n See also: mfi_unm2r , f77_unm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_unm2r.html"},{"title":"f77_unmr2 – MFI - Modern Fortran Interfaces","text":"public interface f77_unmr2 Generic old style interface for UNMR2.\nSupports c, z.\nSee also: mfi_unmr2 , cunmr2 , zunmr2 . Subroutines public pure subroutine cunmr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for CUNMR2\n See also: mfi_unmr2 , f77_unmr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zunmr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for ZUNMR2\n See also: mfi_unmr2 , f77_unmr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info","tags":"","loc":"interface/f77_unmr2.html"},{"title":"f77_unmqr – MFI - Modern Fortran Interfaces","text":"public interface f77_unmqr Generic old style interface for UNMQR.\nSupports c, z.\nSee also: mfi_unmqr , cunmqr , zunmqr . Subroutines public pure subroutine cunmqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for CUNMQR\n See also: mfi_unmqr , f77_unmqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zunmqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for ZUNMQR\n See also: mfi_unmqr , f77_unmqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_unmqr.html"},{"title":"f77_unmrq – MFI - Modern Fortran Interfaces","text":"public interface f77_unmrq Generic old style interface for UNMRQ.\nSupports c, z.\nSee also: mfi_unmrq , cunmrq , zunmrq . Subroutines public pure subroutine cunmrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for CUNMRQ\n See also: mfi_unmrq , f77_unmrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zunmrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for ZUNMRQ\n See also: mfi_unmrq , f77_unmrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_unmrq.html"},{"title":"f77_ungqr – MFI - Modern Fortran Interfaces","text":"public interface f77_ungqr Generic old style interface for UNGQR.\nSupports c, z.\nSee also: mfi_ungqr , cungqr , zungqr . Subroutines public pure subroutine cungqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for CUNGQR\nSee also: mfi_ungqr , f77_ungqr .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by cgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zungqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for ZUNGQR\nSee also: mfi_ungqr , f77_ungqr .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by zgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_ungqr.html"},{"title":"f77_ungrq – MFI - Modern Fortran Interfaces","text":"public interface f77_ungrq Generic old style interface for UNGRQ.\nSupports c, z.\nSee also: mfi_ungrq , cungrq , zungrq . Subroutines public pure subroutine cungrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for CUNGRQ\nSee also: mfi_ungrq , f77_ungrq .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by cgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zungrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for ZUNGRQ\nSee also: mfi_ungrq , f77_ungrq .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by zgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info","tags":"","loc":"interface/f77_ungrq.html"},{"title":"f77_lartg – MFI - Modern Fortran Interfaces","text":"public interface f77_lartg Generic old style interface for LARTG.\nSupports s, d, c, z.\nSee also: mfi_lartg , slartg , dlartg , clartg , zlartg . Subroutines public pure subroutine slartg(f, g, c, s, r) Original interface for SLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: f real(kind=REAL32), intent(inout) :: g real(kind=wp), intent(inout) :: c real(kind=REAL32), intent(inout) :: s real(kind=REAL32), intent(inout) :: r public pure subroutine dlartg(f, g, c, s, r) Original interface for DLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: f real(kind=REAL64), intent(inout) :: g real(kind=wp), intent(inout) :: c real(kind=REAL64), intent(inout) :: s real(kind=REAL64), intent(inout) :: r public pure subroutine clartg(f, g, c, s, r) Original interface for CLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: f complex(kind=REAL32), intent(inout) :: g real(kind=wp), intent(inout) :: c complex(kind=REAL32), intent(inout) :: s complex(kind=REAL32), intent(inout) :: r public pure subroutine zlartg(f, g, c, s, r) Original interface for ZLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: f complex(kind=REAL64), intent(inout) :: g real(kind=wp), intent(inout) :: c complex(kind=REAL64), intent(inout) :: s complex(kind=REAL64), intent(inout) :: r","tags":"","loc":"interface/f77_lartg.html"},{"title":"f77_xerbla – MFI - Modern Fortran Interfaces","text":"public interface f77_xerbla Subroutines public pure subroutine xerbla(name, info) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name integer, intent(in) :: info","tags":"","loc":"interface/f77_xerbla.html"},{"title":"mfi_blas – MFI - Modern Fortran Interfaces","text":"Modern fortran interfaces for BLAS Uses iso_fortran_env f77_blas Interfaces public        interface mfi_copy Generic modern interface for COPY.\nSupports s, d, c, z.\nSee also: scopy , dcopy , ccopy , zcopy . public pure subroutine mfi_scopy (x, y, incx, incy) Modern interface for scopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dcopy (x, y, incx, incy) Modern interface for dcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_ccopy (x, y, incx, incy) Modern interface for ccopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zcopy (x, y, incx, incy) Modern interface for zcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_swap Generic modern interface for SWAP.\nSupports s, d, c, z.\nSee also: sswap , dswap , cswap , zswap . public pure subroutine mfi_sswap (x, y, incx, incy) Modern interface for sswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dswap (x, y, incx, incy) Modern interface for dswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cswap (x, y, incx, incy) Modern interface for cswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zswap (x, y, incx, incy) Modern interface for zswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_axpy Generic modern interface for AXPY.\nSupports s, d, c, z.\nSee also: saxpy , daxpy , caxpy , zaxpy . public pure subroutine mfi_saxpy (x, y, a, incx, incy) Modern interface for saxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_daxpy (x, y, a, incx, incy) Modern interface for daxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_caxpy (x, y, a, incx, incy) Modern interface for caxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) complex(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zaxpy (x, y, a, incx, incy) Modern interface for zaxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) complex(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_dot Generic modern interface for DOT.\nSupports s, d.\nSee also: sdot , ddot . public pure function mfi_sdot (x, y, incx, incy) Modern interface for sdot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL32) public pure function mfi_ddot (x, y, incx, incy) Modern interface for ddot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL64) public        interface mfi_dotc Generic modern interface for DOTC.\nSupports c, z.\nSee also: cdotc , zdotc . public pure function mfi_cdotc (x, y, incx, incy) Modern interface for cdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32) public pure function mfi_zdotc (x, y, incx, incy) Modern interface for zdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64) public        interface mfi_dotu Generic modern interface for DOTU.\nSupports c, z.\nSee also: cdotu , zdotu . public pure function mfi_cdotu (x, y, incx, incy) Modern interface for cdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32) public pure function mfi_zdotu (x, y, incx, incy) Modern interface for zdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64) public        interface mfi_asum Generic modern interface for ASUM.\nSupports s, d, sc, dz.\nSee also: sasum , dasum , scasum , dzasum . public pure function mfi_sasum (x, incx) Modern interface for sasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dasum (x, incx) Modern interface for dasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_scasum (x, incx) Modern interface for scasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dzasum (x, incx) Modern interface for dzasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public        interface mfi_nrm2 Generic modern interface for NRM2.\nSupports s, d, sc, dz.\nSee also: snrm2 , dnrm2 , scnrm2 , dznrm2 . public pure function mfi_snrm2 (x, incx) Modern interface for snrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dnrm2 (x, incx) Modern interface for dnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_scnrm2 (x, incx) Modern interface for scnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_dznrm2 (x, incx) Modern interface for dznrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public        interface mfi_rot Generic modern interface for ROT.\nSupports s, d, c, z, cs, zd.\nSee also: srot , drot , crot , zrot , csrot , zdrot . public pure subroutine mfi_srot (x, y, c, s, incx, incy) Modern interface for srot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - s * xi Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_drot (x, y, c, s, incx, incy) Modern interface for drot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - s * xi Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_crot (x, y, c, s, incx, incy) Modern interface for crot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c complex(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zrot (x, y, c, s, incx, incy) Modern interface for zrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c complex(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_csrot (x, y, c, s, incx, incy) Modern interface for csrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zdrot (x, y, c, s, incx, incy) Modern interface for zdrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: xi = c * xi + s * yi yi = c * yi - conj ( s ) * xi Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_rotm Generic modern interface for ROTM.\nSupports s, d.\nSee also: srotm , drotm . public pure subroutine mfi_srotm (x, y, param, incx, incy) Modern interface for srotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_drotm (x, y, param, incx, incy) Modern interface for drotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_scal Generic modern interface for SCAL.\nSupports s, d, c, z, cs, zd.\nSee also: sscal , dscal , cscal , zscal , csscal , zdscal . public pure subroutine mfi_sscal (a, x, incx) Modern interface for sscal .\nSee also: mfi_scal , f77_scal .\nMFI_SSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_dscal (a, x, incx) Modern interface for dscal .\nSee also: mfi_scal , f77_scal .\nMFI_DSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_cscal (a, x, incx) Modern interface for cscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_zscal (a, x, incx) Modern interface for zscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_csscal (a, x, incx) Modern interface for csscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_zdscal (a, x, incx) Modern interface for zdscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public        interface mfi_gbmv Generic modern interface for GBMV.\nSupports s, d, c, z.\nSee also: sgbmv , dgbmv , cgbmv , zgbmv . public pure subroutine mfi_sgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for sgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for dgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for cgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for zgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_gemv Generic modern interface for GEMV.\nSupports s, d, c, z.\nSee also: sgemv , dgemv , cgemv , zgemv . public pure subroutine mfi_sgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for sgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for dgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for cgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for zgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_ger Generic modern interface for GER.\nSupports s, d.\nSee also: sger , dger . public pure subroutine mfi_sger (a, x, y, alpha, incx, incy) Modern interface for sger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dger (a, x, y, alpha, incx, incy) Modern interface for dger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_gerc Generic modern interface for GERC.\nSupports c, z.\nSee also: cgerc , zgerc . public pure subroutine mfi_cgerc (a, x, y, alpha, incx, incy) Modern interface for cgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgerc (a, x, y, alpha, incx, incy) Modern interface for zgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_geru Generic modern interface for GERU.\nSupports c, z.\nSee also: cgeru , zgeru . public pure subroutine mfi_cgeru (a, x, y, alpha, incx, incy) Modern interface for cgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgeru (a, x, y, alpha, incx, incy) Modern interface for zgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_hbmv Generic modern interface for HBMV.\nSupports c, z.\nSee also: chbmv , zhbmv . public pure subroutine mfi_chbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_hemv Generic modern interface for HEMV.\nSupports c, z.\nSee also: chemv , zhemv . public pure subroutine mfi_chemv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhemv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_her Generic modern interface for HER.\nSupports c, z.\nSee also: cher , zher . public pure subroutine mfi_cher (a, x, uplo, alpha, incx) Modern interface for cher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_zher (a, x, uplo, alpha, incx) Modern interface for zher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public        interface mfi_her2 Generic modern interface for HER2.\nSupports c, z.\nSee also: cher2 , zher2 . public pure subroutine mfi_cher2 (a, x, y, uplo, alpha, incx, incy) Modern interface for cher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zher2 (a, x, y, uplo, alpha, incx, incy) Modern interface for zher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_hpmv Generic modern interface for HPMV.\nSupports c, z.\nSee also: chpmv , zhpmv . public pure subroutine mfi_chpmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for chpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhpmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_hpr Generic modern interface for HPR.\nSupports c, z.\nSee also: chpr , zhpr . public pure subroutine mfi_chpr (ap, x, uplo, alpha, incx) Modern interface for chpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_zhpr (ap, x, uplo, alpha, incx) Modern interface for zhpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public        interface mfi_hpr2 Generic modern interface for HPR2.\nSupports c, z.\nSee also: chpr2 , zhpr2 . public pure subroutine mfi_chpr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for chpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhpr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for zhpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_sbmv Generic modern interface for SBMV.\nSupports s, d.\nSee also: ssbmv , dsbmv . public pure subroutine mfi_ssbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_spmv Generic modern interface for SPMV.\nSupports s, d.\nSee also: sspmv , dspmv . public pure subroutine mfi_sspmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for sspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dspmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for dspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_spr Generic modern interface for SPR.\nSupports s, d.\nSee also: sspr , dspr . public pure subroutine mfi_sspr (ap, x, uplo, alpha, incx) Modern interface for sspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_dspr (ap, x, uplo, alpha, incx) Modern interface for dspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx public        interface mfi_spr2 Generic modern interface for SPR2.\nSupports s, d.\nSee also: sspr2 , dspr2 . public pure subroutine mfi_sspr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for sspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dspr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for dspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_symv Generic modern interface for SYMV.\nSupports s, d.\nSee also: ssymv , dsymv . public pure subroutine mfi_ssymv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsymv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_syr Generic modern interface for SYR.\nSupports s, d.\nSee also: ssyr , dsyr . public pure subroutine mfi_ssyr (a, x, uplo, alpha, incx) Modern interface for ssyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_dsyr (a, x, uplo, alpha, incx) Modern interface for dsyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx public        interface mfi_syr2 Generic modern interface for SYR2.\nSupports s, d.\nSee also: ssyr2 , dsyr2 . public pure subroutine mfi_ssyr2 (a, x, y, uplo, alpha, incx, incy) Modern interface for ssyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsyr2 (a, x, y, uplo, alpha, incx, incy) Modern interface for dsyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public        interface mfi_tbmv Generic modern interface for TBMV.\nSupports s, d, c, z.\nSee also: stbmv , dtbmv , ctbmv , ztbmv . public pure subroutine mfi_stbmv (a, x, uplo, trans, diag, incx) Modern interface for stbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtbmv (a, x, uplo, trans, diag, incx) Modern interface for dtbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctbmv (a, x, uplo, trans, diag, incx) Modern interface for ctbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztbmv (a, x, uplo, trans, diag, incx) Modern interface for ztbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public        interface mfi_tbsv Generic modern interface for TBSV.\nSupports s, d, c, z.\nSee also: stbsv , dtbsv , ctbsv , ztbsv . public pure subroutine mfi_stbsv (a, x, uplo, trans, diag, incx) Modern interface for stbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtbsv (a, x, uplo, trans, diag, incx) Modern interface for dtbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctbsv (a, x, uplo, trans, diag, incx) Modern interface for ctbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztbsv (a, x, uplo, trans, diag, incx) Modern interface for ztbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public        interface mfi_tpmv Generic modern interface for TPMV.\nSupports s, d, c, z.\nSee also: stpmv , dtpmv , ctpmv , ztpmv . public pure subroutine mfi_stpmv (ap, x, uplo, trans, diag, incx) Modern interface for stpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtpmv (ap, x, uplo, trans, diag, incx) Modern interface for dtpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctpmv (ap, x, uplo, trans, diag, incx) Modern interface for ctpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztpmv (ap, x, uplo, trans, diag, incx) Modern interface for ztpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public        interface mfi_tpsv Generic modern interface for TPSV.\nSupports s, d, c, z.\nSee also: stpsv , dtpsv , ctpsv , ztpsv . public pure subroutine mfi_stpsv (ap, x, uplo, trans, diag, incx) Modern interface for stpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtpsv (ap, x, uplo, trans, diag, incx) Modern interface for dtpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctpsv (ap, x, uplo, trans, diag, incx) Modern interface for ctpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztpsv (ap, x, uplo, trans, diag, incx) Modern interface for ztpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public        interface mfi_trmv Generic modern interface for TRMV.\nSupports s, d, c, z.\nSee also: strmv , dtrmv , ctrmv , ztrmv . public pure subroutine mfi_strmv (a, x, uplo, trans, diag, incx) Modern interface for strmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtrmv (a, x, uplo, trans, diag, incx) Modern interface for dtrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctrmv (a, x, uplo, trans, diag, incx) Modern interface for ctrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztrmv (a, x, uplo, trans, diag, incx) Modern interface for ztrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public        interface mfi_trsv Generic modern interface for TRSV.\nSupports s, d, c, z.\nSee also: strsv , dtrsv , ctrsv , ztrsv . public pure subroutine mfi_strsv (a, x, uplo, trans, diag, incx) Modern interface for strsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtrsv (a, x, uplo, trans, diag, incx) Modern interface for dtrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctrsv (a, x, uplo, trans, diag, incx) Modern interface for ctrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztrsv (a, x, uplo, trans, diag, incx) Modern interface for ztrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public        interface mfi_gemm Generic modern interface for GEMM.\nSupports s, d, c, z.\nSee also: sgemm , dgemm , cgemm , zgemm . public pure subroutine mfi_sgemm (a, b, c, transa, transb, alpha, beta) Modern interface for sgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dgemm (a, b, c, transa, transb, alpha, beta) Modern interface for dgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_cgemm (a, b, c, transa, transb, alpha, beta) Modern interface for cgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_zgemm (a, b, c, transa, transb, alpha, beta) Modern interface for zgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta public        interface mfi_hemm Generic modern interface for HEMM.\nSupports c, z.\nSee also: chemm , zhemm . public pure subroutine mfi_chemm (a, b, c, side, uplo, alpha, beta) Modern interface for chemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_zhemm (a, b, c, side, uplo, alpha, beta) Modern interface for zhemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta public        interface mfi_herk Generic modern interface for HERK.\nSupports c, z.\nSee also: cherk , zherk . public pure subroutine mfi_cherk (a, c, uplo, trans, alpha, beta) Modern interface for cherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_zherk (a, c, uplo, trans, alpha, beta) Modern interface for zherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public        interface mfi_her2k Generic modern interface for HER2K.\nSupports c, z.\nSee also: cher2k , zher2k . public pure subroutine mfi_cher2k (a, b, c, uplo, trans, alpha, beta) Modern interface for cher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_zher2k (a, b, c, uplo, trans, alpha, beta) Modern interface for zher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public        interface mfi_symm Generic modern interface for SYMM.\nSupports s, d.\nSee also: ssymm , dsymm . public pure subroutine mfi_ssymm (a, b, c, side, uplo, alpha, beta) Modern interface for ssymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsymm (a, b, c, side, uplo, alpha, beta) Modern interface for dsymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public        interface mfi_syrk Generic modern interface for SYRK.\nSupports s, d.\nSee also: ssyrk , dsyrk . public pure subroutine mfi_ssyrk (a, c, uplo, trans, alpha, beta) Modern interface for ssyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsyrk (a, c, uplo, trans, alpha, beta) Modern interface for dsyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public        interface mfi_syr2k Generic modern interface for SYR2K.\nSupports s, d.\nSee also: ssyr2k , dsyr2k . public pure subroutine mfi_ssyr2k (a, b, c, uplo, trans, alpha, beta) Modern interface for ssyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsyr2k (a, b, c, uplo, trans, alpha, beta) Modern interface for dsyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public        interface mfi_trmm Generic modern interface for TRMM.\nSupports s, d, c, z.\nSee also: strmm , dtrmm , ctrmm , ztrmm . public pure subroutine mfi_strmm (a, b, side, uplo, transa, diag, alpha) Modern interface for strmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_dtrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for dtrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_ctrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for ctrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_ztrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for ztrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha public        interface mfi_trsm Generic modern interface for TRSM.\nSupports s, d, c, z.\nSee also: strsm , dtrsm , ctrsm , ztrsm . public pure subroutine mfi_strsm (a, b, side, uplo, transa, diag, alpha) Modern interface for strsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_dtrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for dtrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_ctrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for ctrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_ztrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for ztrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha public        interface mfi_lamch Generic modern interface for LAMCH.\nSupports s, d.\nSee also: f77_lamch , f77_lamch . public pure function mfi_slamch (cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL32), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL32) public pure function mfi_dlamch (cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL64), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL64) public        interface mfi_iamax Generic modern interface for IAMAX.\nSupports s, d, c, z.\nSee also: f77_iamax , f77_iamax , f77_iamax , f77_iamax . public pure function mfi_isamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_idamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_icamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_izamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public        interface mfi_iamin Generic modern interface for IAMIN.\nSupports s, d, c, z.\nSee also: f77_iamin , f77_iamin , f77_iamin , f77_iamin . public pure function mfi_isamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_idamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_icamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_izamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer Functions public pure function mfi_cdotc (x, y, incx, incy) Modern interface for cdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32) public pure function mfi_cdotu (x, y, incx, incy) Modern interface for cdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL32) public pure function mfi_zdotc (x, y, incx, incy) Modern interface for zdotc .\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64) public pure function mfi_zdotu (x, y, incx, incy) Modern interface for zdotu .\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value complex(kind=REAL64) public pure function mfi_isamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_idamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_icamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_izamax (x, incx) Modern interface for f77_iamax .\nSee also: mfi_iamax , f77_iamax . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_isamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_idamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_icamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_izamin (x, incx) Modern interface for f77_iamin .\nSee also: mfi_iamin , f77_iamin . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value integer public pure function mfi_sdot (x, y, incx, incy) Modern interface for sdot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL32) public pure function mfi_sasum (x, incx) Modern interface for sasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_scasum (x, incx) Modern interface for scasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_snrm2 (x, incx) Modern interface for snrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_scnrm2 (x, incx) Modern interface for scnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL32) public pure function mfi_slamch (cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL32), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL32) public pure function mfi_ddot (x, y, incx, incy) Modern interface for ddot .\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy Return Value real(kind=REAL64) public pure function mfi_dasum (x, incx) Modern interface for dasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_dzasum (x, incx) Modern interface for dzasum .\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_dnrm2 (x, incx) Modern interface for dnrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_dznrm2 (x, incx) Modern interface for dznrm2 .\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) integer, intent(in), optional :: incx Return Value real(kind=REAL64) public pure function mfi_dlamch (cmach, kind) result(res) Modern interface for f77_lamch .\nSee also: mfi_lamch , f77_lamch . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach real(kind=REAL64), intent(in) :: kind Just a kind placeholder Return Value real(kind=REAL64) Subroutines public pure subroutine mfi_scopy (x, y, incx, incy) Modern interface for scopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dcopy (x, y, incx, incy) Modern interface for dcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_ccopy (x, y, incx, incy) Modern interface for ccopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zcopy (x, y, incx, incy) Modern interface for zcopy .\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_sswap (x, y, incx, incy) Modern interface for sswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dswap (x, y, incx, incy) Modern interface for dswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cswap (x, y, incx, incy) Modern interface for cswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zswap (x, y, incx, incy) Modern interface for zswap .\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_saxpy (x, y, a, incx, incy) Modern interface for saxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_daxpy (x, y, a, incx, incy) Modern interface for daxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_caxpy (x, y, a, incx, incy) Modern interface for caxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) complex(kind=REAL32), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zaxpy (x, y, a, incx, incy) Modern interface for zaxpy .\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) complex(kind=REAL64), intent(in), optional :: a integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_srot (x, y, c, s, incx, incy) Modern interface for srot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_drot (x, y, c, s, incx, incy) Modern interface for drot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_crot (x, y, c, s, incx, incy) Modern interface for crot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c complex(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zrot (x, y, c, s, incx, incy) Modern interface for zrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c complex(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_csrot (x, y, c, s, incx, incy) Modern interface for csrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zdrot (x, y, c, s, incx, incy) Modern interface for zdrot .\n See also: mfi_rot , f77_rot .\n Given two vectors x and y,\n each vector element of these vectors is replaced as follows: Read more… Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_srotm (x, y, param, incx, incy) Modern interface for srotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: x (:) real(kind=REAL32), intent(inout) :: y (:) real(kind=REAL32), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_drotm (x, y, param, incx, incy) Modern interface for drotm .\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: x (:) real(kind=REAL64), intent(inout) :: y (:) real(kind=REAL64), intent(in) :: param (5) integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_sscal (a, x, incx) Modern interface for sscal .\nSee also: mfi_scal , f77_scal .\nMFI_SSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_dscal (a, x, incx) Modern interface for dscal .\nSee also: mfi_scal , f77_scal .\nMFI_DSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_cscal (a, x, incx) Modern interface for cscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_zscal (a, x, incx) Modern interface for zscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_csscal (a, x, incx) Modern interface for csscal .\nSee also: mfi_scal , f77_scal .\nMFI_CSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_zdscal (a, x, incx) Modern interface for zdscal .\nSee also: mfi_scal , f77_scal .\nMFI_ZDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (:) integer, intent(in), optional :: incx public pure subroutine mfi_sgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for sgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for dgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for cgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgbmv (a, x, y, kl, m, alpha, beta, trans, incx, incy) Modern interface for zgbmv .\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) integer, intent(in), optional :: kl integer, intent(in), optional :: m complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta character(len=1), intent(in), optional :: trans integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_sgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for sgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for dgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for cgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgemv (a, x, y, trans, alpha, beta, incx, incy) Modern interface for zgemv .\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_sger (a, x, y, alpha, incx, incy) Modern interface for sger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dger (a, x, y, alpha, incx, incy) Modern interface for dger .\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgerc (a, x, y, alpha, incx, incy) Modern interface for cgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgerc (a, x, y, alpha, incx, incy) Modern interface for zgerc .\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cgeru (a, x, y, alpha, incx, incy) Modern interface for cgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zgeru (a, x, y, alpha, incx, incy) Modern interface for zgeru .\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_chbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhbmv .\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_chemv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for chemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhemv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhemv .\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_cher (a, x, uplo, alpha, incx) Modern interface for cher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_zher (a, x, uplo, alpha, incx) Modern interface for zher .\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_cher2 (a, x, y, uplo, alpha, incx, incy) Modern interface for cher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zher2 (a, x, y, uplo, alpha, incx, incy) Modern interface for zher2 .\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_chpmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for chpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhpmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for zhpmv .\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_chpr (ap, x, uplo, alpha, incx) Modern interface for chpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_zhpr (ap, x, uplo, alpha, incx) Modern interface for zhpr .\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=wp), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_chpr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for chpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: ap (:) complex(kind=REAL32), intent(in) :: x (:) complex(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_zhpr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for zhpr2 .\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: ap (:) complex(kind=REAL64), intent(in) :: x (:) complex(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_ssbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsbmv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsbmv .\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_sspmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for sspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dspmv (ap, x, y, uplo, alpha, beta, incx, incy) Modern interface for dspmv .\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_sspr (ap, x, uplo, alpha, incx) Modern interface for sspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_dspr (ap, x, uplo, alpha, incx) Modern interface for dspr .\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_sspr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for sspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: ap (:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dspr2 (ap, x, y, uplo, alpha, incx, incy) Modern interface for dspr2 .\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: ap (:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_ssymv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for ssymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsymv (a, x, y, uplo, alpha, beta, incx, incy) Modern interface for dsymv .\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(inout) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_ssyr (a, x, uplo, alpha, incx) Modern interface for ssyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_dsyr (a, x, uplo, alpha, incx) Modern interface for dsyr .\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx public pure subroutine mfi_ssyr2 (a, x, y, uplo, alpha, incx, incy) Modern interface for ssyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: x (:) real(kind=REAL32), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_dsyr2 (a, x, y, uplo, alpha, incx, incy) Modern interface for dsyr2 .\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: x (:) real(kind=REAL64), intent(in) :: y (:) character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha integer, intent(in), optional :: incx integer, intent(in), optional :: incy public pure subroutine mfi_stbmv (a, x, uplo, trans, diag, incx) Modern interface for stbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtbmv (a, x, uplo, trans, diag, incx) Modern interface for dtbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctbmv (a, x, uplo, trans, diag, incx) Modern interface for ctbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztbmv (a, x, uplo, trans, diag, incx) Modern interface for ztbmv .\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_stbsv (a, x, uplo, trans, diag, incx) Modern interface for stbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtbsv (a, x, uplo, trans, diag, incx) Modern interface for dtbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctbsv (a, x, uplo, trans, diag, incx) Modern interface for ctbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztbsv (a, x, uplo, trans, diag, incx) Modern interface for ztbsv .\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_stpmv (ap, x, uplo, trans, diag, incx) Modern interface for stpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtpmv (ap, x, uplo, trans, diag, incx) Modern interface for dtpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctpmv (ap, x, uplo, trans, diag, incx) Modern interface for ctpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztpmv (ap, x, uplo, trans, diag, incx) Modern interface for ztpmv .\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_stpsv (ap, x, uplo, trans, diag, incx) Modern interface for stpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: ap (:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtpsv (ap, x, uplo, trans, diag, incx) Modern interface for dtpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: ap (:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctpsv (ap, x, uplo, trans, diag, incx) Modern interface for ctpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: ap (:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztpsv (ap, x, uplo, trans, diag, incx) Modern interface for ztpsv .\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: ap (:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_strmv (a, x, uplo, trans, diag, incx) Modern interface for strmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtrmv (a, x, uplo, trans, diag, incx) Modern interface for dtrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctrmv (a, x, uplo, trans, diag, incx) Modern interface for ctrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztrmv (a, x, uplo, trans, diag, incx) Modern interface for ztrmv .\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_strsv (a, x, uplo, trans, diag, incx) Modern interface for strsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_dtrsv (a, x, uplo, trans, diag, incx) Modern interface for dtrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ctrsv (a, x, uplo, trans, diag, incx) Modern interface for ctrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_ztrsv (a, x, uplo, trans, diag, incx) Modern interface for ztrsv .\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: x (:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans character(len=1), intent(in), optional :: diag integer, intent(in), optional :: incx public pure subroutine mfi_sgemm (a, b, c, transa, transb, alpha, beta) Modern interface for sgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dgemm (a, b, c, transa, transb, alpha, beta) Modern interface for dgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_cgemm (a, b, c, transa, transb, alpha, beta) Modern interface for cgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_zgemm (a, b, c, transa, transb, alpha, beta) Modern interface for zgemm .\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_chemm (a, b, c, side, uplo, alpha, beta) Modern interface for chemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL32), intent(in), optional :: alpha complex(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_zhemm (a, b, c, side, uplo, alpha, beta) Modern interface for zhemm .\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo complex(kind=REAL64), intent(in), optional :: alpha complex(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_cherk (a, c, uplo, trans, alpha, beta) Modern interface for cherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_zherk (a, c, uplo, trans, alpha, beta) Modern interface for zherk .\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=wp), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_cher2k (a, b, c, uplo, trans, alpha, beta) Modern interface for cher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(in) :: b (:,:) complex(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL32), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_zher2k (a, b, c, uplo, trans, alpha, beta) Modern interface for zher2k .\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(in) :: b (:,:) complex(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans complex(kind=REAL64), intent(in), optional :: alpha real(kind=wp), intent(in), optional :: beta public pure subroutine mfi_ssymm (a, b, c, side, uplo, alpha, beta) Modern interface for ssymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsymm (a, b, c, side, uplo, alpha, beta) Modern interface for dsymm .\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_ssyrk (a, c, uplo, trans, alpha, beta) Modern interface for ssyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsyrk (a, c, uplo, trans, alpha, beta) Modern interface for dsyrk .\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_ssyr2k (a, b, c, uplo, trans, alpha, beta) Modern interface for ssyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(in) :: b (:,:) real(kind=REAL32), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL32), intent(in), optional :: alpha real(kind=REAL32), intent(in), optional :: beta public pure subroutine mfi_dsyr2k (a, b, c, uplo, trans, alpha, beta) Modern interface for dsyr2k .\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(in) :: b (:,:) real(kind=REAL64), intent(inout) :: c (:,:) character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: trans real(kind=REAL64), intent(in), optional :: alpha real(kind=REAL64), intent(in), optional :: beta public pure subroutine mfi_strmm (a, b, side, uplo, transa, diag, alpha) Modern interface for strmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_dtrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for dtrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_ctrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for ctrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_ztrmm (a, b, side, uplo, transa, diag, alpha) Modern interface for ztrmm .\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_strsm (a, b, side, uplo, transa, diag, alpha) Modern interface for strsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_dtrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for dtrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag real(kind=REAL64), intent(in), optional :: alpha public pure subroutine mfi_ctrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for ctrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL32), intent(in), optional :: alpha public pure subroutine mfi_ztrsm (a, b, side, uplo, transa, diag, alpha) Modern interface for ztrsm .\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: side character(len=1), intent(in), optional :: uplo character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: diag complex(kind=REAL64), intent(in), optional :: alpha","tags":"","loc":"module/mfi_blas.html"},{"title":"f77_blas – MFI - Modern Fortran Interfaces","text":"Improved and original F77 interfaces for BLAS Uses iso_fortran_env Interfaces public        interface f77_copy Generic old style interface for COPY.\nSupports s, d, c, z.\nSee also: mfi_copy , scopy , dcopy , ccopy , zcopy . public pure subroutine scopy(n, x, incx, y, incy) Original interface for SCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dcopy(n, x, incx, y, incy) Original interface for DCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine ccopy(n, x, incx, y, incy) Original interface for CCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zcopy(n, x, incx, y, incy) Original interface for ZCOPY\nSee also: mfi_copy , f77_copy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_swap Generic old style interface for SWAP.\nSupports s, d, c, z.\nSee also: mfi_swap , sswap , dswap , cswap , zswap . public pure subroutine sswap(n, x, incx, y, incy) Original interface for SSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dswap(n, x, incx, y, incy) Original interface for DSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine cswap(n, x, incx, y, incy) Original interface for CSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zswap(n, x, incx, y, incy) Original interface for ZSWAP\nSee also: mfi_swap , f77_swap . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_axpy Generic old style interface for AXPY.\nSupports s, d, c, z.\nSee also: mfi_axpy , saxpy , daxpy , caxpy , zaxpy . public pure subroutine saxpy(n, a, x, incx, y, incy) Original interface for SAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine daxpy(n, a, x, incx, y, incy) Original interface for DAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine caxpy(n, a, x, incx, y, incy) Original interface for CAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zaxpy(n, a, x, incx, y, incy) Original interface for ZAXPY\nSee also: mfi_axpy , f77_axpy . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_dot Generic old style interface for DOT.\nSupports s, d.\nSee also: mfi_dot , sdot , ddot . public pure function sdot(n, x, incx, y, incy) Original interface for SDOT\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy Return Value real(kind=REAL32) public pure function ddot(n, x, incx, y, incy) Original interface for DDOT\nSee also: mfi_dot , f77_dot . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy Return Value real(kind=REAL64) public        interface f77_dotc Generic old style interface for DOTC.\nSupports c, z.\nSee also: mfi_dotc , cdotc , zdotc . public pure function cdotc(n, x, incx, y, incy) Original interface for CDOTC\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL32) public pure function zdotc(n, x, incx, y, incy) Original interface for ZDOTC\nSee also: mfi_dotc , f77_dotc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL64) public        interface f77_dotu Generic old style interface for DOTU.\nSupports c, z.\nSee also: mfi_dotu , cdotu , zdotu . public pure function cdotu(n, x, incx, y, incy) Original interface for CDOTU\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL32) public pure function zdotu(n, x, incx, y, incy) Original interface for ZDOTU\nSee also: mfi_dotu , f77_dotu . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy Return Value complex(kind=REAL64) public        interface f77_asum Generic old style interface for ASUM.\nSupports s, d, sc, dz.\nSee also: mfi_asum , sasum , dasum , scasum , dzasum . public pure function sasum(n, x, incx) Original interface for SASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function scasum(n, x, incx) Original interface for SCASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function dasum(n, x, incx) Original interface for DASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64) public pure function dzasum(n, x, incx) Original interface for DZASUM\nSee also: mfi_asum , f77_asum . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64) public        interface f77_nrm2 Generic old style interface for NRM2.\nSupports s, d, sc, dz.\nSee also: mfi_nrm2 , snrm2 , dnrm2 , scnrm2 , dznrm2 . public pure function snrm2(n, x, incx) Original interface for SNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function scnrm2(n, x, incx) Original interface for SCNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL32) public pure function dnrm2(n, x, incx) Original interface for DNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64) public pure function dznrm2(n, x, incx) Original interface for DZNRM2\nSee also: mfi_nrm2 , f77_nrm2 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=REAL64) public        interface f77_rot Generic old style interface for ROT.\nSupports s, d, c, z, cs, zd.\nSee also: mfi_rot , srot , drot , crot , zrot , csrot , zdrot . public pure subroutine srot(n, x, incx, y, incy, c, s) Original interface for SROT\nSee also: mfi_rot , f77_rot .\nSROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s public pure subroutine drot(n, x, incx, y, incy, c, s) Original interface for DROT\nSee also: mfi_rot , f77_rot .\nDROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s public pure subroutine crot(n, x, incx, y, incy, c, s) Original interface for CROT\nSee also: mfi_rot , f77_rot .\nCROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: c complex(kind=REAL32), intent(in) :: s public pure subroutine zrot(n, x, incx, y, incy, c, s) Original interface for ZROT\nSee also: mfi_rot , f77_rot .\nZROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: c complex(kind=REAL64), intent(in) :: s public pure subroutine csrot(n, x, incx, y, incy, c, s) Original interface for CSROT\nSee also: mfi_rot , f77_rot .\nCSROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: c real(kind=REAL32), intent(in) :: s public pure subroutine zdrot(n, x, incx, y, incy, c, s) Original interface for ZDROT\nSee also: mfi_rot , f77_rot .\nZDROT applies a plane rotation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: c real(kind=REAL64), intent(in) :: s public        interface f77_rotg Generic old style interface for ROTG.\nSupports s, d, c, z.\nSee also: mfi_rotg , srotg , drotg , crotg , zrotg . public pure subroutine srotg(a, b, c, s) Original interface for SROTG\n See also: mfi_rotg , f77_rotg .\nsrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - s c ] [ b ] [ 0 ] satisfying c**2 + s**2 = 1 . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a real(kind=REAL32), intent(inout) :: b real(kind=REAL32), intent(out) :: c real(kind=REAL32), intent(out) :: s public pure subroutine drotg(a, b, c, s) Original interface for DROTG\n See also: mfi_rotg , f77_rotg .\ndrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - s c ] [ b ] [ 0 ] satisfying c**2 + s**2 = 1 . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a real(kind=REAL64), intent(inout) :: b real(kind=REAL64), intent(out) :: c real(kind=REAL64), intent(out) :: s public pure subroutine crotg(a, b, c, s) Original interface for CROTG\n See also: mfi_rotg , f77_rotg .\ncrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - conjg ( s ) c ] [ b ] [ 0 ] where c is real, s is complex, and c**2 + conjg(s)*s = 1 . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a complex(kind=REAL32), intent(inout) :: b real(kind=REAL32), intent(out) :: c complex(kind=REAL32), intent(out) :: s public pure subroutine zrotg(a, b, c, s) Original interface for ZROTG\n See also: mfi_rotg , f77_rotg .\nzrotg generates a Givens rotation with real cosine and complex sine: [ c s ] [ a ] = [ r ] [ - conjg ( s ) c ] [ b ] [ 0 ] where c is real, s is complex, and c**2 + conjg(s)*s = 1 . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a complex(kind=REAL64), intent(inout) :: b real(kind=REAL64), intent(out) :: c complex(kind=REAL64), intent(out) :: s public        interface f77_rotm Generic old style interface for ROTM.\nSupports s, d.\nSee also: mfi_rotm , srotm , drotm . public pure subroutine srotm(n, x, incx, y, incy, param) Original interface for SROTM\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(in) :: param (5) public pure subroutine drotm(n, x, incx, y, incy, param) Original interface for DROTM\nSee also: mfi_rotm , f77_rotm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(in) :: param (5) public        interface f77_rotmg Generic old style interface for ROTMG.\nSupports s, d.\nSee also: mfi_rotmg , srotmg , drotmg . public pure subroutine srotmg(d1, d2, x1, y1, param) Original interface for SROTMG\nSee also: mfi_rotmg , f77_rotmg . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: d1 real(kind=REAL32), intent(inout) :: d2 real(kind=REAL32), intent(inout) :: x1 real(kind=REAL32), intent(in) :: y1 real(kind=REAL32), intent(out) :: param (5) public pure subroutine drotmg(d1, d2, x1, y1, param) Original interface for DROTMG\nSee also: mfi_rotmg , f77_rotmg . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: d1 real(kind=REAL64), intent(inout) :: d2 real(kind=REAL64), intent(inout) :: x1 real(kind=REAL64), intent(in) :: y1 real(kind=REAL64), intent(out) :: param (5) public        interface f77_scal Generic old style interface for SCAL.\nSupports s, d, c, z, cs, zd.\nSee also: mfi_scal , sscal , dscal , cscal , zscal , csscal , zdscal . public pure subroutine sscal(n, a, x, incx) Original interface for SSCAL\nSee also: mfi_scal , f77_scal .\nSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: a real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dscal(n, a, x, incx) Original interface for DSCAL\nSee also: mfi_scal , f77_scal .\nDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: a real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine cscal(n, a, x, incx) Original interface for CSCAL\nSee also: mfi_scal , f77_scal .\nCSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine zscal(n, a, x, incx) Original interface for ZSCAL\nSee also: mfi_scal , f77_scal .\nZSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine csscal(n, a, x, incx) Original interface for CSSCAL\nSee also: mfi_scal , f77_scal .\nCSSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: a complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine zdscal(n, a, x, incx) Original interface for ZDSCAL\nSee also: mfi_scal , f77_scal .\nZDSCAL scales a vector by a constant. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: a complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_gbmv Generic old style interface for GBMV.\nSupports s, d, c, z.\nSee also: mfi_gbmv , sgbmv , dgbmv , cgbmv , zgbmv . public pure subroutine sgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for SGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for DGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine cgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for CGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zgbmv(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZGBMV\nSee also: mfi_gbmv , f77_gbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: kl integer, intent(in) :: ku complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_gemv Generic old style interface for GEMV.\nSupports s, d, c, z.\nSee also: mfi_gemv , sgemv , dgemv , cgemv , zgemv . public pure subroutine sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for SGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for DGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine cgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for CGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZGEMV\nSee also: mfi_gemv , f77_gemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_ger Generic old style interface for GER.\nSupports s, d.\nSee also: mfi_ger , sger , dger . public pure subroutine sger(m, n, alpha, x, incx, y, incy, a, lda) Original interface for SGER\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine dger(m, n, alpha, x, incx, y, incy, a, lda) Original interface for DGER\nSee also: mfi_ger , f77_ger . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_gerc Generic old style interface for GERC.\nSupports c, z.\nSee also: mfi_gerc , cgerc , zgerc . public pure subroutine cgerc(m, n, alpha, x, incx, y, incy, a, lda) Original interface for CGERC\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zgerc(m, n, alpha, x, incx, y, incy, a, lda) Original interface for ZGERC\nSee also: mfi_gerc , f77_gerc . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_geru Generic old style interface for GERU.\nSupports c, z.\nSee also: mfi_geru , cgeru , zgeru . public pure subroutine cgeru(m, n, alpha, x, incx, y, incy, a, lda) Original interface for CGERU\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zgeru(m, n, alpha, x, incx, y, incy, a, lda) Original interface for ZGERU\nSee also: mfi_geru , f77_geru . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_hbmv Generic old style interface for HBMV.\nSupports c, z.\nSee also: mfi_hbmv , chbmv , zhbmv . public pure subroutine chbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for CHBMV\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zhbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZHBMV\nSee also: mfi_hbmv , f77_hbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_hemv Generic old style interface for HEMV.\nSupports c, z.\nSee also: mfi_hemv , chemv , zhemv . public pure subroutine chemv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for CHEMV\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zhemv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for ZHEMV\nSee also: mfi_hemv , f77_hemv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_her Generic old style interface for HER.\nSupports c, z.\nSee also: mfi_her , cher , zher . public pure subroutine cher(uplo, n, alpha, x, incx, a, lda) Original interface for CHER\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zher(uplo, n, alpha, x, incx, a, lda) Original interface for ZHER\nSee also: mfi_her , f77_her . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_her2 Generic old style interface for HER2.\nSupports c, z.\nSee also: mfi_her2 , cher2 , zher2 . public pure subroutine cher2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for CHER2\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine zher2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for ZHER2\nSee also: mfi_her2 , f77_her2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_hpmv Generic old style interface for HPMV.\nSupports c, z.\nSee also: mfi_hpmv , chpmv , zhpmv . public pure subroutine chpmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for CHPMV\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: ap (*) complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine zhpmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for ZHPMV\nSee also: mfi_hpmv , f77_hpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: ap (*) complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_hpr Generic old style interface for HPR.\nSupports c, z.\nSee also: mfi_hpr , chpr , zhpr . public pure subroutine chpr(uplo, n, alpha, x, incx, ap) Original interface for CHPR\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(inout) :: ap (*) public pure subroutine zhpr(uplo, n, alpha, x, incx, ap) Original interface for ZHPR\nSee also: mfi_hpr , f77_hpr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=wp), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(inout) :: ap (*) public        interface f77_hpr2 Generic old style interface for HPR2.\nSupports c, z.\nSee also: mfi_hpr2 , chpr2 , zhpr2 . public pure subroutine chpr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for CHPR2\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL32), intent(inout) :: ap (*) public pure subroutine zhpr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for ZHPR2\nSee also: mfi_hpr2 , f77_hpr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx complex(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy complex(kind=REAL64), intent(inout) :: ap (*) public        interface f77_sbmv Generic old style interface for SBMV.\nSupports s, d.\nSee also: mfi_sbmv , ssbmv , dsbmv . public pure subroutine ssbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for SSBMV\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dsbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy) Original interface for DSBMV\nSee also: mfi_sbmv , f77_sbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_spmv Generic old style interface for SPMV.\nSupports s, d.\nSee also: mfi_spmv , sspmv , dspmv . public pure subroutine sspmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for SSPMV\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: ap (*) real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dspmv(uplo, n, alpha, ap, x, incx, beta, y, incy) Original interface for DSPMV\nSee also: mfi_spmv , f77_spmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: ap (*) real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_spr Generic old style interface for SPR.\nSupports s, d.\nSee also: mfi_spr , sspr , dspr . public pure subroutine sspr(uplo, n, alpha, x, incx, ap) Original interface for SSPR\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: ap (*) public pure subroutine dspr(uplo, n, alpha, x, incx, ap) Original interface for DSPR\nSee also: mfi_spr , f77_spr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: ap (*) public        interface f77_spr2 Generic old style interface for SPR2.\nSupports s, d.\nSee also: mfi_spr2 , sspr2 , dspr2 . public pure subroutine sspr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for SSPR2\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(inout) :: ap (*) public pure subroutine dspr2(uplo, n, alpha, x, incx, y, incy, ap) Original interface for DSPR2\nSee also: mfi_spr2 , f77_spr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(inout) :: ap (*) public        interface f77_symv Generic old style interface for SYMV.\nSupports s, d.\nSee also: mfi_symv , ssymv , dsymv . public pure subroutine ssymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for SSYMV\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: y (*) integer, intent(in) :: incy public pure subroutine dsymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy) Original interface for DSYMV\nSee also: mfi_symv , f77_symv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: y (*) integer, intent(in) :: incy public        interface f77_syr Generic old style interface for SYR.\nSupports s, d.\nSee also: mfi_syr , ssyr , dsyr . public pure subroutine ssyr(uplo, n, alpha, x, incx, a, lda) Original interface for SSYR\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine dsyr(uplo, n, alpha, x, incx, a, lda) Original interface for DSYR\nSee also: mfi_syr , f77_syr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_syr2 Generic old style interface for SYR2.\nSupports s, d.\nSee also: mfi_syr2 , ssyr2 , dsyr2 . public pure subroutine ssyr2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for SSYR2\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL32), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda public pure subroutine dsyr2(uplo, n, alpha, x, incx, y, incy, a, lda) Original interface for DSYR2\nSee also: mfi_syr2 , f77_syr2 . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx real(kind=REAL64), intent(in) :: y (*) integer, intent(in) :: incy real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda public        interface f77_tbmv Generic old style interface for TBMV.\nSupports s, d, c, z.\nSee also: mfi_tbmv , stbmv , dtbmv , ctbmv , ztbmv . public pure subroutine stbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for STBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for DTBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for CTBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztbmv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for ZTBMV\nSee also: mfi_tbmv , f77_tbmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_tbsv Generic old style interface for TBSV.\nSupports s, d, c, z.\nSee also: mfi_tbsv , stbsv , dtbsv , ctbsv , ztbsv . public pure subroutine stbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for STBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for DTBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for CTBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztbsv(uplo, trans, diag, n, k, a, lda, x, incx) Original interface for ZTBSV\nSee also: mfi_tbsv , f77_tbsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_tpmv Generic old style interface for TPMV.\nSupports s, d, c, z.\nSee also: mfi_tpmv , stpmv , dtpmv , ctpmv , ztpmv . public pure subroutine stpmv(uplo, trans, diag, n, ap, x, incx) Original interface for STPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: ap (*) real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtpmv(uplo, trans, diag, n, ap, x, incx) Original interface for DTPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: ap (*) real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctpmv(uplo, trans, diag, n, ap, x, incx) Original interface for CTPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: ap (*) complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztpmv(uplo, trans, diag, n, ap, x, incx) Original interface for ZTPMV\nSee also: mfi_tpmv , f77_tpmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: ap (*) complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_tpsv Generic old style interface for TPSV.\nSupports s, d, c, z.\nSee also: mfi_tpsv , stpsv , dtpsv , ctpsv , ztpsv . public pure subroutine stpsv(uplo, trans, diag, n, ap, x, incx) Original interface for STPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: ap (*) real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtpsv(uplo, trans, diag, n, ap, x, incx) Original interface for DTPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: ap (*) real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctpsv(uplo, trans, diag, n, ap, x, incx) Original interface for CTPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: ap (*) complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztpsv(uplo, trans, diag, n, ap, x, incx) Original interface for ZTPSV\nSee also: mfi_tpsv , f77_tpsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: ap (*) complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_trmv Generic old style interface for TRMV.\nSupports s, d, c, z.\nSee also: mfi_trmv , strmv , dtrmv , ctrmv , ztrmv . public pure subroutine strmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for STRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtrmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for DTRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctrmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for CTRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztrmv(uplo, trans, diag, n, a, lda, x, incx) Original interface for ZTRMV\nSee also: mfi_trmv , f77_trmv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_trsv Generic old style interface for TRSV.\nSupports s, d, c, z.\nSee also: mfi_trsv , strsv , dtrsv , ctrsv , ztrsv . public pure subroutine strsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for STRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine dtrsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for DTRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ctrsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for CTRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: x (*) integer, intent(in) :: incx public pure subroutine ztrsv(uplo, trans, diag, n, a, lda, x, incx) Original interface for ZTRSV\nSee also: mfi_trsv , f77_trsv . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans character(len=1), intent(in) :: diag integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: x (*) integer, intent(in) :: incx public        interface f77_gemm Generic old style interface for GEMM.\nSupports s, d, c, z.\nSee also: mfi_gemm , sgemm , dgemm , cgemm , zgemm . public pure subroutine sgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for SGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for DGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine cgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for CGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for ZGEMM\nSee also: mfi_gemm , f77_gemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_hemm Generic old style interface for HEMM.\nSupports c, z.\nSee also: mfi_hemm , chemm , zhemm . public pure subroutine chemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for CHEMM\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zhemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for ZHEMM\nSee also: mfi_hemm , f77_hemm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_herk Generic old style interface for HERK.\nSupports c, z.\nSee also: mfi_herk , cherk , zherk . public pure subroutine cherk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for CHERK\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=wp), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=wp), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zherk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for ZHERK\nSee also: mfi_herk , f77_herk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=wp), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=wp), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_her2k Generic old style interface for HER2K.\nSupports c, z.\nSee also: mfi_her2k , cher2k , zher2k . public pure subroutine cher2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for CHER2K\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=wp), intent(in) :: beta complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine zher2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for ZHER2K\nSee also: mfi_her2k , f77_her2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=wp), intent(in) :: beta complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_symm Generic old style interface for SYMM.\nSupports s, d.\nSee also: mfi_symm , ssymm , dsymm . public pure subroutine ssymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for SSYMM\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dsymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for DSYMM\nSee also: mfi_symm , f77_symm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_syrk Generic old style interface for SYRK.\nSupports s, d.\nSee also: mfi_syrk , ssyrk , dsyrk . public pure subroutine ssyrk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for SSYRK\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dsyrk(uplo, trans, n, k, alpha, a, lda, beta, c, ldc) Original interface for DSYRK\nSee also: mfi_syrk , f77_syrk . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_syr2k Generic old style interface for SYR2K.\nSupports s, d.\nSee also: mfi_syr2k , ssyr2k , dsyr2k . public pure subroutine ssyr2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for SSYR2K\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(in) :: beta real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public pure subroutine dsyr2k(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Original interface for DSYR2K\nSee also: mfi_syr2k , f77_syr2k . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(in) :: beta real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc public        interface f77_trmm Generic old style interface for TRMM.\nSupports s, d, c, z.\nSee also: mfi_trmm , strmm , dtrmm , ctrmm , ztrmm . public pure subroutine strmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for STRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine dtrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for DTRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ctrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for CTRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ztrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for ZTRMM\nSee also: mfi_trmm , f77_trmm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public        interface f77_trsm Generic old style interface for TRSM.\nSupports s, d, c, z.\nSee also: mfi_trsm , strsm , dtrsm , ctrsm , ztrsm . public pure subroutine strsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for STRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(in) :: alpha real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine dtrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for DTRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(in) :: alpha real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ctrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for CTRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(in) :: alpha complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb public pure subroutine ztrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb) Original interface for ZTRSM\nSee also: mfi_trsm , f77_trsm . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: uplo character(len=1), intent(in) :: transa character(len=1), intent(in) :: diag integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(in) :: alpha complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb interface ?lamch supports s, d. See mfi_lamch for the modern version. public pure function slamch(cmach) SLAMCH determines single precision machine parameters. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach Return Value real(kind=real32) interface ?lamch supports s, d. See mfi_lamch for the modern version. public pure function dlamch(cmach) DLAMCH determines double precision machine parameters. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: cmach Return Value real(kind=real64) interface public pure function sdsdot(n, sb, sx, incx, sy, incy) Compute the inner product of two vectors with extended\nprecision accumulation. Returns S.P. result with dot product accumulated in D.P.\nSDSDOT = SB + sum for I = 0 to N-1 of SX(LX+I INCX) SY(LY+I INCY),\nwhere LX = 1 if INCX .GE. 0, else LX = 1+(1-N) INCX, and LY is\ndefined in a similar way using INCY. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=wp), intent(in) :: sb real(kind=wp), intent(in) :: sx (*) integer, intent(in) :: incx real(kind=wp), intent(in) :: sy (*) integer, intent(in) :: incy Return Value real(kind=wp) interface public pure function dsdot(n, sx, incx, sy, incy) Compute the inner product of two vectors with extended\nprecision accumulation and result. Returns D.P. dot product accumulated in D.P., for S.P. SX and SY\nDSDOT = sum for I = 0 to N-1 of  SX(LX+I INCX) * SY(LY+I INCY),\nwhere LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\ndefined in a similar way using INCY. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=sp), intent(in) :: sx (*) integer, intent(in) :: incx real(kind=sp), intent(in) :: sy (*) integer, intent(in) :: incy Return Value real(kind=dp) public        interface f77_iamax public pure function isamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function idamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function icamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function izamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public        interface f77_iamin public pure function isamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function idamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function icamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function izamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer Functions public pure function isamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function idamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function icamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function izamax (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function isamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function idamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function icamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer public pure function izamin (n, x, incx) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(in) :: x (*) integer, intent(in) :: incx Return Value integer","tags":"","loc":"module/f77_blas.html"},{"title":"mfi_lapack – MFI - Modern Fortran Interfaces","text":"Modern fortran interfaces for LAPACK Uses iso_fortran_env f77_lapack Interfaces public        interface mfi_geqrf Generic modern interface for GEQRF.\nSupports s, d, c, z.\nSee also: sgeqrf , dgeqrf , cgeqrf , zgeqrf . public pure subroutine mfi_sgeqrf (a, tau, info) Modern interface for sgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_dgeqrf (a, tau, info) Modern interface for dgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_cgeqrf (a, tau, info) Modern interface for cgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_zgeqrf (a, tau, info) Modern interface for zgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public        interface mfi_gerqf Generic modern interface for GERQF.\nSupports s, d, c, z.\nSee also: sgerqf , dgerqf , cgerqf , zgerqf . public pure subroutine mfi_sgerqf (a, tau, info) Modern interface for sgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_dgerqf (a, tau, info) Modern interface for dgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_cgerqf (a, tau, info) Modern interface for cgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_zgerqf (a, tau, info) Modern interface for zgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public        interface mfi_getrf Generic modern interface for GETRF.\nSupports s, d, c, z.\nSee also: sgetrf , dgetrf , cgetrf , zgetrf . public pure subroutine mfi_sgetrf (a, ipiv, info) Modern interface for sgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_dgetrf (a, ipiv, info) Modern interface for dgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_cgetrf (a, ipiv, info) Modern interface for cgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zgetrf (a, ipiv, info) Modern interface for zgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public        interface mfi_getri Generic modern interface for GETRI.\nSupports s, d, c, z.\nSee also: sgetri , dgetri , cgetri , zgetri . public pure subroutine mfi_sgetri (a, ipiv, info) Modern interface for sgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_dgetri (a, ipiv, info) Modern interface for dgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_cgetri (a, ipiv, info) Modern interface for cgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zgetri (a, ipiv, info) Modern interface for zgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public        interface mfi_getrs Generic modern interface for GETRS.\nSupports s, d, c, z.\nSee also: sgetrs , dgetrs , cgetrs , zgetrs . public pure subroutine mfi_sgetrs (a, ipiv, b, trans, info) Modern interface for sgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_dgetrs (a, ipiv, b, trans, info) Modern interface for dgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_cgetrs (a, ipiv, b, trans, info) Modern interface for cgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_zgetrs (a, ipiv, b, trans, info) Modern interface for zgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public        interface mfi_hetrf Generic modern interface for HETRF.\nSupports c, z.\nSee also: chetrf , zhetrf . public pure subroutine mfi_chetrf (a, uplo, ipiv, info) Modern interface for chetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zhetrf (a, uplo, ipiv, info) Modern interface for zhetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public        interface mfi_hegv Generic modern interface for HEGV.\nSupports c, z.\nSee also: chegv , zhegv . public pure subroutine mfi_chegv (a, b, w, itype, jobz, uplo, info) Modern interface for chegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) real(kind=REAL32), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zhegv (a, b, w, itype, jobz, uplo, info) Modern interface for zhegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) real(kind=REAL64), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public        interface mfi_heevd Generic modern interface for HEEVD.\nSupports c, z.\nSee also: cheevd , zheevd . public pure subroutine mfi_cheevd (a, w, jobz, uplo, info) Modern interface for cheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zheevd (a, w, jobz, uplo, info) Modern interface for zheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public        interface mfi_gesvd Generic modern interface for GESVD.\nSupports s, d, c, z.\nSee also: sgesvd , dgesvd , cgesvd , zgesvd . public pure subroutine mfi_sgesvd (a, s, u, vt, ww, job, info) Modern interface for sgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) real(kind=REAL32), intent(out), optional, target :: u (:,:) real(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_dgesvd (a, s, u, vt, ww, job, info) Modern interface for dgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) real(kind=REAL64), intent(out), optional, target :: u (:,:) real(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_cgesvd (a, s, u, vt, ww, job, info) Modern interface for cgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) complex(kind=REAL32), intent(out), optional, target :: u (:,:) complex(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_zgesvd (a, s, u, vt, ww, job, info) Modern interface for zgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) complex(kind=REAL64), intent(out), optional, target :: u (:,:) complex(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public        interface mfi_potrf Generic modern interface for POTRF.\nSupports s, d, c, z.\nSee also: spotrf , dpotrf , cpotrf , zpotrf . public pure subroutine mfi_spotrf (a, info, uplo) Modern interface for spotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_dpotrf (a, info, uplo) Modern interface for dpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_cpotrf (a, info, uplo) Modern interface for cpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_zpotrf (a, info, uplo) Modern interface for zpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public        interface mfi_potri Generic modern interface for POTRI.\nSupports s, d, c, z.\nSee also: spotri , dpotri , cpotri , zpotri . public pure subroutine mfi_spotri (a, info, uplo) Modern interface for spotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_dpotri (a, info, uplo) Modern interface for dpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_cpotri (a, info, uplo) Modern interface for cpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_zpotri (a, info, uplo) Modern interface for zpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public        interface mfi_potrs Generic modern interface for POTRS.\nSupports s, d, c, z.\nSee also: spotrs , dpotrs , cpotrs , zpotrs . public pure subroutine mfi_spotrs (a, b, uplo, info) Modern interface for spotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_dpotrs (a, b, uplo, info) Modern interface for dpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cpotrs (a, b, uplo, info) Modern interface for cpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zpotrs (a, b, uplo, info) Modern interface for zpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public        interface mfi_pocon Generic modern interface for POCON.\nSupports s, d, c, z.\nSee also: spocon , dpocon , cpocon , zpocon . public pure subroutine mfi_spocon (a, anorm, rcond, uplo, info) Modern interface for spocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_dpocon (a, anorm, rcond, uplo, info) Modern interface for dpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cpocon (a, anorm, rcond, uplo, info) Modern interface for cpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zpocon (a, anorm, rcond, uplo, info) Modern interface for zpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info Subroutines public pure subroutine mfi_sgeqrf (a, tau, info) Modern interface for sgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_dgeqrf (a, tau, info) Modern interface for dgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_cgeqrf (a, tau, info) Modern interface for cgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_zgeqrf (a, tau, info) Modern interface for zgeqrf .\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_sgerqf (a, tau, info) Modern interface for sgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_dgerqf (a, tau, info) Modern interface for dgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_cgerqf (a, tau, info) Modern interface for cgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_zgerqf (a, tau, info) Modern interface for zgerqf .\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(out), optional, target :: tau (:) integer, intent(out), optional :: info public pure subroutine mfi_sgetrf (a, ipiv, info) Modern interface for sgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_dgetrf (a, ipiv, info) Modern interface for dgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_cgetrf (a, ipiv, info) Modern interface for cgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zgetrf (a, ipiv, info) Modern interface for zgetrf .\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_sgetri (a, ipiv, info) Modern interface for sgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_dgetri (a, ipiv, info) Modern interface for dgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_cgetri (a, ipiv, info) Modern interface for cgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zgetri (a, ipiv, info) Modern interface for zgetri .\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_sgetrs (a, ipiv, b, trans, info) Modern interface for sgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_dgetrs (a, ipiv, b, trans, info) Modern interface for dgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_cgetrs (a, ipiv, b, trans, info) Modern interface for cgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_zgetrs (a, ipiv, b, trans, info) Modern interface for zgetrs .\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(in) :: ipiv (:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: trans integer, intent(out), optional :: info public pure subroutine mfi_chetrf (a, uplo, ipiv, info) Modern interface for chetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_zhetrf (a, uplo, ipiv, info) Modern interface for zhetrf .\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional, target :: ipiv (:) integer, intent(out), optional :: info public pure subroutine mfi_chegv (a, b, w, itype, jobz, uplo, info) Modern interface for chegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) real(kind=REAL32), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zhegv (a, b, w, itype, jobz, uplo, info) Modern interface for zhegv .\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) real(kind=REAL64), intent(out) :: w (:) integer, intent(in), optional :: itype character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cheevd (a, w, jobz, uplo, info) Modern interface for cheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zheevd (a, w, jobz, uplo, info) Modern interface for zheevd .\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: w (:) character(len=1), intent(in), optional :: jobz character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_sgesvd (a, s, u, vt, ww, job, info) Modern interface for sgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) real(kind=REAL32), intent(out), optional, target :: u (:,:) real(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_dgesvd (a, s, u, vt, ww, job, info) Modern interface for dgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) real(kind=REAL64), intent(out), optional, target :: u (:,:) real(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_cgesvd (a, s, u, vt, ww, job, info) Modern interface for cgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(out) :: s (:) complex(kind=REAL32), intent(out), optional, target :: u (:,:) complex(kind=REAL32), intent(out), optional, target :: vt (:,:) real(kind=REAL32), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_zgesvd (a, s, u, vt, ww, job, info) Modern interface for zgesvd .\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(out) :: s (:) complex(kind=REAL64), intent(out), optional, target :: u (:,:) complex(kind=REAL64), intent(out), optional, target :: vt (:,:) real(kind=REAL64), intent(out), optional, target :: ww (:) character(len=1), intent(in), optional :: job integer, intent(out), optional :: info public pure subroutine mfi_spotrf (a, info, uplo) Modern interface for spotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_dpotrf (a, info, uplo) Modern interface for dpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_cpotrf (a, info, uplo) Modern interface for cpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_zpotrf (a, info, uplo) Modern interface for zpotrf .\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_spotri (a, info, uplo) Modern interface for spotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_dpotri (a, info, uplo) Modern interface for dpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_cpotri (a, info, uplo) Modern interface for cpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_zpotri (a, info, uplo) Modern interface for zpotri .\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) integer, intent(out), optional :: info character(len=1), intent(in), optional :: uplo public pure subroutine mfi_spotrs (a, b, uplo, info) Modern interface for spotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(in) :: a (:,:) real(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_dpotrs (a, b, uplo, info) Modern interface for dpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(in) :: a (:,:) real(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cpotrs (a, b, uplo, info) Modern interface for cpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(in) :: a (:,:) complex(kind=REAL32), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zpotrs (a, b, uplo, info) Modern interface for zpotrs .\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(in) :: a (:,:) complex(kind=REAL64), intent(inout) :: b (:,:) character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_spocon (a, anorm, rcond, uplo, info) Modern interface for spocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_dpocon (a, anorm, rcond, uplo, info) Modern interface for dpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_cpocon (a, anorm, rcond, uplo, info) Modern interface for cpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: a (:,:) real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_zpocon (a, anorm, rcond, uplo, info) Modern interface for zpocon .\nSee also: mfi_pocon , f77_pocon .\nEstimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: a (:,:) real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond character(len=1), intent(in), optional :: uplo integer, intent(out), optional :: info public pure subroutine mfi_error (name, info) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name integer, intent(in) :: info","tags":"","loc":"module/mfi_lapack.html"},{"title":"f77_lapack – MFI - Modern Fortran Interfaces","text":"Improved and original F77 interfaces for LAPACK Uses iso_fortran_env Interfaces public        interface f77_geqrf Generic old style interface for GEQRF.\nSupports s, d, c, z.\nSee also: mfi_geqrf , sgeqrf , dgeqrf , cgeqrf , zgeqrf . public pure subroutine sgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for SGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: tau (*) real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for DGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: tau (*) real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for CGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(out) :: tau (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgeqrf(m, n, a, lda, tau, work, lwork, info) Original interface for ZGEQRF\nSee also: mfi_geqrf , f77_geqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(out) :: tau (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_gerqf Generic old style interface for GERQF.\nSupports s, d, c, z.\nSee also: mfi_gerqf , sgerqf , dgerqf , cgerqf , zgerqf . public pure subroutine sgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for SGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: tau (*) real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for DGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: tau (*) real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for CGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(out) :: tau (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgerqf(m, n, a, lda, tau, work, lwork, info) Original interface for ZGERQF\nSee also: mfi_gerqf , f77_gerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(out) :: tau (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_getrf Generic old style interface for GETRF.\nSupports s, d, c, z.\nSee also: mfi_getrf , sgetrf , dgetrf , cgetrf , zgetrf . public pure subroutine sgetrf(m, n, a, lda, ipiv, info) Original interface for SGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public pure subroutine dgetrf(m, n, a, lda, ipiv, info) Original interface for DGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public pure subroutine cgetrf(m, n, a, lda, ipiv, info) Original interface for CGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public pure subroutine zgetrf(m, n, a, lda, ipiv, info) Original interface for ZGETRF\nSee also: mfi_getrf , f77_getrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: ipiv (*) integer, intent(out) :: info public        interface f77_getri Generic old style interface for GETRI.\nSupports s, d, c, z.\nSee also: mfi_getri , sgetri , dgetri , cgetri , zgetri . public pure subroutine sgetri(n, a, lda, ipiv, work, lwork, info) Original interface for SGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgetri(n, a, lda, ipiv, work, lwork, info) Original interface for DGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgetri(n, a, lda, ipiv, work, lwork, info) Original interface for CGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgetri(n, a, lda, ipiv, work, lwork, info) Original interface for ZGETRI\nSee also: mfi_getri , f77_getri . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_getrs Generic old style interface for GETRS.\nSupports s, d, c, z.\nSee also: mfi_getrs , sgetrs , dgetrs , cgetrs , zgetrs . public pure subroutine sgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for SGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine dgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for DGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine cgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for CGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine zgetrs(trans, n, nrhs, a, lda, ipiv, b, ldb, info) Original interface for ZGETRS\nSee also: mfi_getrs , f77_getrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public        interface f77_hetrf Generic old style interface for HETRF.\nSupports c, z.\nSee also: mfi_hetrf , chetrf , zhetrf . public pure subroutine chetrf(uplo, n, a, lda, ipiv, work, lwork, info) Original interface for CHETRF\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zhetrf(uplo, n, a, lda, ipiv, work, lwork, info) Original interface for ZHETRF\nSee also: mfi_hetrf , f77_hetrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda integer, intent(in) :: ipiv (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_hegv Generic old style interface for HEGV.\nSupports c, z.\nSee also: mfi_hegv , chegv , zhegv . public pure subroutine chegv(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info) Original interface for CHEGV\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name integer, intent(in) :: itype character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(in) :: rwork (*) integer, intent(out) :: info public pure subroutine zhegv(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info) Original interface for ZHEGV\nSee also: mfi_hegv , f77_hegv . Arguments Type Intent Optional Attributes Name integer, intent(in) :: itype character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(in) :: rwork (*) integer, intent(out) :: info public        interface f77_heevd Generic old style interface for HEEVD.\nSupports c, z.\nSee also: mfi_heevd , cheevd , zheevd . public pure subroutine cheevd(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for CHEEVD\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info public pure subroutine zheevd(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for ZHEEVD\nSee also: mfi_heevd , f77_heevd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info public        interface f77_gesvd Generic old style interface for GESVD.\nSupports s, d, c, z.\nSee also: mfi_gesvd , sgesvd , dgesvd , cgesvd , zgesvd . public pure subroutine sgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info) Original interface for SGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: s (*) real(kind=REAL32), intent(out) :: u (ldu,*) integer, intent(in) :: ldu real(kind=REAL32), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt real(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info) Original interface for DGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: s (*) real(kind=REAL64), intent(out) :: u (ldu,*) integer, intent(in) :: ldu real(kind=REAL64), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt real(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info) Original interface for CGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(out) :: s (*) complex(kind=REAL32), intent(out) :: u (ldu,*) integer, intent(in) :: ldu complex(kind=REAL32), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(in) :: rwork (*) integer, intent(out) :: info public pure subroutine zgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info) Original interface for ZGESVD\nSee also: mfi_gesvd , f77_gesvd . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobu character(len=1), intent(in) :: jobvt integer, intent(in) :: m integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(out) :: s (*) complex(kind=REAL64), intent(out) :: u (ldu,*) integer, intent(in) :: ldu complex(kind=REAL64), intent(out) :: vt (ldvt,*) integer, intent(in) :: ldvt complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(in) :: rwork (*) integer, intent(out) :: info public        interface f77_potrf Generic old style interface for POTRF.\nSupports s, d, c, z.\nSee also: mfi_potrf , spotrf , dpotrf , cpotrf , zpotrf . public pure subroutine spotrf(uplo, n, a, lda, info) Original interface for SPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine dpotrf(uplo, n, a, lda, info) Original interface for DPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine cpotrf(uplo, n, a, lda, info) Original interface for CPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine zpotrf(uplo, n, a, lda, info) Original interface for ZPOTRF\nSee also: mfi_potrf , f77_potrf . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public        interface f77_potri Generic old style interface for POTRI.\nSupports s, d, c, z.\nSee also: mfi_potri , spotri , dpotri , cpotri , zpotri . public pure subroutine spotri(uplo, n, a, lda, info) Original interface for SPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine dpotri(uplo, n, a, lda, info) Original interface for DPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine cpotri(uplo, n, a, lda, info) Original interface for CPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public pure subroutine zpotri(uplo, n, a, lda, info) Original interface for ZPOTRI\nSee also: mfi_potri , f77_potri . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda integer, intent(out) :: info public        interface f77_potrs Generic old style interface for POTRS.\nSupports s, d, c, z.\nSee also: mfi_potrs , spotrs , dpotrs , cpotrs , zpotrs . public pure subroutine spotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for SPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine dpotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for DPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine cpotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for CPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public pure subroutine zpotrs(uplo, n, nrhs, a, lda, b, ldb, info) Original interface for ZPOTRS\nSee also: mfi_potrs , f77_potrs . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(in) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(out) :: info public        interface f77_pocon Generic old style interface for POCON.\nSupports s, d, c, z.\nSee also: mfi_pocon , spocon , dpocon , cpocon , zpocon . public pure subroutine spocon(uplo, n, a, lda, anorm, rcond, work, iwork, info) Original interface for SPOCON\nSee also: mfi_pocon , f77_pocon .\nspocon estimates the reciprocal of the condition number (in the\n1-norm) of a real(REAL32) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by sPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond real(kind=REAL32), intent(inout) :: work (*) integer, intent(inout) :: iwork (*) integer, intent(out) :: info public pure subroutine dpocon(uplo, n, a, lda, anorm, rcond, work, iwork, info) Original interface for DPOCON\nSee also: mfi_pocon , f77_pocon .\ndpocon estimates the reciprocal of the condition number (in the\n1-norm) of a real(REAL64) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by dPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond real(kind=REAL64), intent(inout) :: work (*) integer, intent(inout) :: iwork (*) integer, intent(out) :: info public pure subroutine cpocon(uplo, n, a, lda, anorm, rcond, work, rwork, info) Original interface for CPOCON\nSee also: mfi_pocon , f77_pocon .\ncpocon estimates the reciprocal of the condition number (in the\n1-norm) of a complex(REAL32) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by cPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: anorm real(kind=REAL32), intent(out) :: rcond complex(kind=REAL32), intent(inout) :: work (*) real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(out) :: info public pure subroutine zpocon(uplo, n, a, lda, anorm, rcond, work, rwork, info) Original interface for ZPOCON\nSee also: mfi_pocon , f77_pocon .\nzpocon estimates the reciprocal of the condition number (in the\n1-norm) of a complex(REAL64) Hermitian positive definite matrix using the\nCholesky factorization or ( A = LL&#94;\\dagger |) computed by zPOTRF.\nAn estimate is obtained for norm(inv(A)), and the reciprocal of the\ncondition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: anorm real(kind=REAL64), intent(out) :: rcond complex(kind=REAL64), intent(inout) :: work (*) real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(out) :: info public        interface f77_heevx Generic old style interface for HEEVX.\nSupports c, z.\nSee also: mfi_heevx , cheevx , zheevx . public pure subroutine cheevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, ifail, info) Original interface for CHEEVX\nSee also: mfi_heevx , f77_heevx . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: vl real(kind=REAL32), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL32), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(in) :: ifail integer, intent(out) :: info public pure subroutine zheevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, ifail, info) Original interface for ZHEEVX\nSee also: mfi_heevx , f77_heevx . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: vl real(kind=REAL64), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL64), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(in) :: ifail integer, intent(out) :: info public        interface f77_heevr Generic old style interface for HEEVR.\nSupports c, z.\nSee also: mfi_heevr , cheevr , zheevr . public pure subroutine cheevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for CHEEVR\nSee also: mfi_heevr , f77_heevr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: vl real(kind=REAL32), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL32), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL32), intent(out) :: w (*) complex(kind=REAL32), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz integer, intent(in) :: isuppz (*) complex(kind=REAL32), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL32), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info public pure subroutine zheevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info) Original interface for ZHEEVR\nSee also: mfi_heevr , f77_heevr . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: jobz character(len=1), intent(in) :: range character(len=1), intent(in) :: uplo integer, intent(in) :: n complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: vl real(kind=REAL64), intent(in) :: vu integer, intent(in) :: il integer, intent(in) :: iu real(kind=REAL64), intent(in) :: abstol integer, intent(in) :: m real(kind=REAL64), intent(out) :: w (*) complex(kind=REAL64), intent(inout) :: z (ldz,*) integer, intent(in) :: ldz integer, intent(in) :: isuppz (*) complex(kind=REAL64), intent(inout) :: work (*) integer, intent(in) :: lwork real(kind=REAL64), intent(inout) :: rwork (*) integer, intent(in) :: lrwork integer, intent(inout) :: iwork (*) integer, intent(in) :: liwork integer, intent(out) :: info public        interface f77_gels Generic old style interface for GELS.\nSupports s, d, c, z.\nSee also: mfi_gels , sgels , dgels , cgels , zgels . public pure subroutine sgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for SGELS\nSee also: mfi_gels , f77_gels .\nSGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for DGELS\nSee also: mfi_gels , f77_gels .\nDGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for CGELS\nSee also: mfi_gels , f77_gels .\nCGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgels(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for ZGELS\nSee also: mfi_gels , f77_gels .\nZGELS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_gelst Generic old style interface for GELST.\nSupports s, d, c, z.\nSee also: mfi_gelst , sgelst , dgelst , cgelst , zgelst . public pure subroutine sgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for SGELST\nSee also: mfi_gelst , f77_gelst .\nSGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for DGELST\nSee also: mfi_gelst , f77_gelst .\nDGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for CGELST\nSee also: mfi_gelst , f77_gelst .\nCGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgelst(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for ZGELST\nSee also: mfi_gelst , f77_gelst .\nZGELST solves overdetermined or underdetermined systems for GE matrices\nusing QR or LQ factorization with compact WY representation of Q. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_getsls Generic old style interface for GETSLS.\nSupports s, d, c, z.\nSee also: mfi_getsls , sgetsls , dgetsls , cgetsls , zgetsls . public pure subroutine sgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for SGETSLS\nSee also: mfi_getsls , f77_getsls .\nSGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for DGETSLS\nSee also: mfi_getsls , f77_getsls .\nDGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for CGETSLS\nSee also: mfi_getsls , f77_getsls .\nCGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgetsls(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info) Original interface for ZGETSLS\nSee also: mfi_getsls , f77_getsls .\nZGETSLS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_gelsd Generic old style interface for GELSD.\nSupports s, d, c, z.\nSee also: mfi_gelsd , sgelsd , dgelsd , cgelsd , zgelsd . public pure subroutine sgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for SGELSD\nSee also: mfi_gelsd , f77_gelsd .\nSGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: s (*) real(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public pure subroutine dgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for DGELSD\nSee also: mfi_gelsd , f77_gelsd .\nDGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: s (*) real(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public pure subroutine cgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for CGELSD\nSee also: mfi_gelsd , f77_gelsd .\nCGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: s (*) complex(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public pure subroutine zgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info) Original interface for ZGELSD\nSee also: mfi_gelsd , f77_gelsd .\nZGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: s (*) complex(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: iwork (*) integer, intent(out) :: info public        interface f77_gelss Generic old style interface for GELSS.\nSupports s, d, c, z.\nSee also: mfi_gelss , sgelss , dgelss , cgelss , zgelss . public pure subroutine sgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for SGELSS\nSee also: mfi_gelss , f77_gelss .\nSGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(out) :: s (*) real(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for DGELSS\nSee also: mfi_gelss , f77_gelss .\nDGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(out) :: s (*) real(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for CGELSS\nSee also: mfi_gelss , f77_gelss .\nCGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(out) :: s (*) complex(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info) Original interface for ZGELSS\nSee also: mfi_gelss , f77_gelss .\nZGELSS solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(out) :: s (*) complex(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_gelsy Generic old style interface for GELSY.\nSupports s, d, c, z.\nSee also: mfi_gelsy , sgelsy , dgelsy , cgelsy , zgelsy . public pure subroutine sgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for SGELSY\nSee also: mfi_gelsy , f77_gelsy .\nSGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) real(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for DGELSY\nSee also: mfi_gelsy , f77_gelsy .\nDGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) real(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for CGELSY\nSee also: mfi_gelsy , f77_gelsy .\nCGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) complex(kind=REAL32), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info) Original interface for ZGELSY\nSee also: mfi_gelsy , f77_gelsy .\nZGELSY solves overdetermined or underdetermined systems for GE matrices Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: nrhs complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb integer, intent(inout) :: jpvt (*) complex(kind=REAL64), intent(in) :: rcond integer, intent(out) :: rank complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_gglse Generic old style interface for GGLSE.\nSupports s, d, c, z.\nSee also: mfi_gglse , sgglse , dgglse , cgglse , zgglse . public pure subroutine sgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for SGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(inout) :: c (*) real(kind=REAL32), intent(inout) :: d (*) real(kind=REAL32), intent(out) :: x (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for DGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(inout) :: c (*) real(kind=REAL64), intent(inout) :: d (*) real(kind=REAL64), intent(out) :: x (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for CGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(inout) :: c (*) complex(kind=REAL32), intent(inout) :: d (*) complex(kind=REAL32), intent(out) :: x (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgglse(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info) Original interface for ZGGLSE\nSee also: mfi_gglse , f77_gglse . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: p complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(inout) :: c (*) complex(kind=REAL64), intent(inout) :: d (*) complex(kind=REAL64), intent(out) :: x (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_gglsm Generic old style interface for GGLSM.\nSupports s, d, c, z.\nSee also: mfi_gglsm , sgglsm , dgglsm , cgglsm , zgglsm . public pure subroutine sgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for SGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL32), intent(inout) :: d (*) real(kind=REAL32), intent(out) :: x (*) real(kind=REAL32), intent(out) :: y (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for DGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb real(kind=REAL64), intent(inout) :: d (*) real(kind=REAL64), intent(out) :: x (*) real(kind=REAL64), intent(out) :: y (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine cgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for CGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL32), intent(inout) :: d (*) complex(kind=REAL32), intent(out) :: x (*) complex(kind=REAL32), intent(out) :: y (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zgglsm(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info) Original interface for ZGGLSM\nSee also: mfi_gglsm , f77_gglsm . Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in) :: m integer, intent(in) :: p complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(inout) :: b (ldb,*) integer, intent(in) :: ldb complex(kind=REAL64), intent(inout) :: d (*) complex(kind=REAL64), intent(out) :: x (*) complex(kind=REAL64), intent(out) :: y (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_org2r Generic old style interface for ORG2R.\nSupports s, d.\nSee also: mfi_org2r , sorg2r , dorg2r . public pure subroutine sorg2r(m, n, k, a, lda, tau, work, info) Original interface for SORG2R\nSee also: mfi_org2r , f77_org2r .\nThis routine generates an real(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by sgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dorg2r(m, n, k, a, lda, tau, work, info) Original interface for DORG2R\nSee also: mfi_org2r , f77_org2r .\nThis routine generates an real(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by dgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_orgr2 Generic old style interface for ORGR2.\nSupports s, d.\nSee also: mfi_orgr2 , sorgr2 , dorgr2 . public pure subroutine sorgr2(m, n, k, a, lda, tau, work, info) Original interface for SORGR2\nSee also: mfi_orgr2 , f77_orgr2 .\nThis routine generates an real(REAL32)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by sgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dorgr2(m, n, k, a, lda, tau, work, info) Original interface for DORGR2\nSee also: mfi_orgr2 , f77_orgr2 .\nThis routine generates an real(REAL64)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by dgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_orm2r Generic old style interface for ORM2R.\nSupports s, d.\nSee also: mfi_orm2r , sorm2r , dorm2r . public pure subroutine sorm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for SORM2R\n See also: mfi_orm2r , f77_orm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dorm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for DORM2R\n See also: mfi_orm2r , f77_orm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_ormr2 Generic old style interface for ORMR2.\nSupports s, d.\nSee also: mfi_ormr2 , sormr2 , dormr2 . public pure subroutine sormr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for SORMR2\n See also: mfi_ormr2 , f77_ormr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine dormr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for DORMR2\n See also: mfi_ormr2 , f77_ormr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_ormqr Generic old style interface for ORMQR.\nSupports s, d.\nSee also: mfi_ormqr , sormqr , dormqr . public pure subroutine sormqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for SORMQR\n See also: mfi_ormqr , f77_ormqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dormqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for DORMQR\n See also: mfi_ormqr , f77_ormqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_ormrq Generic old style interface for ORMRQ.\nSupports s, d.\nSee also: mfi_ormrq , sormrq , dormrq . public pure subroutine sormrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for SORMRQ\n See also: mfi_ormrq , f77_ormrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by sgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dormrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for DORMRQ\n See also: mfi_ormrq , f77_ormrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by dgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_orgqr Generic old style interface for ORGQR.\nSupports s, d.\nSee also: mfi_orgqr , sorgqr , dorgqr . public pure subroutine sorgqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for SORGQR\nSee also: mfi_orgqr , f77_orgqr .\nThis routine generates an real(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by sgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dorgqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for DORGQR\nSee also: mfi_orgqr , f77_orgqr .\nThis routine generates an real(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by dgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_orgrq Generic old style interface for ORGRQ.\nSupports s, d.\nSee also: mfi_orgrq , sorgrq , dorgrq . public pure subroutine sorgrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for SORGRQ\nSee also: mfi_orgrq , f77_orgrq .\nThis routine generates an real(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by sgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL32), intent(in) :: tau (*) real(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine dorgrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for DORGRQ\nSee also: mfi_orgrq , f77_orgrq .\nThis routine generates an real(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by dgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k real(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda real(kind=REAL64), intent(in) :: tau (*) real(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_ung2r Generic old style interface for UNG2R.\nSupports c, z.\nSee also: mfi_ung2r , cung2r , zung2r . public pure subroutine cung2r(m, n, k, a, lda, tau, work, info) Original interface for CUNG2R\nSee also: mfi_ung2r , f77_ung2r .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by cgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zung2r(m, n, k, a, lda, tau, work, info) Original interface for ZUNG2R\nSee also: mfi_ung2r , f77_ung2r .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by zgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_ungr2 Generic old style interface for UNGR2.\nSupports c, z.\nSee also: mfi_ungr2 , cungr2 , zungr2 . public pure subroutine cungr2(m, n, k, a, lda, tau, work, info) Original interface for CUNGR2\nSee also: mfi_ungr2 , f77_ungr2 .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by cgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zungr2(m, n, k, a, lda, tau, work, info) Original interface for ZUNGR2\nSee also: mfi_ungr2 , f77_ungr2 .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal rows,\nwhich is defined as the last rows of a product of elementary\nreflectors of order . as returned by zgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_unm2r Generic old style interface for UNM2R.\nSupports c, z.\nSee also: mfi_unm2r , cunm2r , zunm2r . public pure subroutine cunm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for CUNM2R\n See also: mfi_unm2r , f77_unm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zunm2r(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for ZUNM2R\n See also: mfi_unm2r , f77_unm2r .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_unmr2 Generic old style interface for UNMR2.\nSupports c, z.\nSee also: mfi_unmr2 , cunmr2 , zunmr2 . public pure subroutine cunmr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for CUNMR2\n See also: mfi_unmr2 , f77_unmr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(out) :: info public pure subroutine zunmr2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info) Original interface for ZUNMR2\n See also: mfi_unmr2 , f77_unmr2 .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(out) :: info public        interface f77_unmqr Generic old style interface for UNMQR.\nSupports c, z.\nSee also: mfi_unmqr , cunmqr , zunmqr . public pure subroutine cunmqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for CUNMQR\n See also: mfi_unmqr , f77_unmqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zunmqr(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for ZUNMQR\n See also: mfi_unmqr , f77_unmqr .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgeqrf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_unmrq Generic old style interface for UNMRQ.\nSupports c, z.\nSee also: mfi_unmrq , cunmrq , zunmrq . public pure subroutine cunmrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for CUNMRQ\n See also: mfi_unmrq , f77_unmrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by cgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zunmrq(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info) Original interface for ZUNMRQ\n See also: mfi_unmrq , f77_unmrq .\n This routine overwrites the general complex matrix with SIDE = 'L' SIDE = 'R' TRANS = 'N' : Q * C C * Q TRANS = 'C' : Q ** H * C C * Q ** H where Q is a complex unitary matrix defined as the product of k\n elementary reflectors as returned by zgerqf . is of order if SIDE = 'L' and of order if SIDE = 'R' . Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: side character(len=1), intent(in) :: trans integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(inout) :: c (ldc,*) integer, intent(in) :: ldc complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_ungqr Generic old style interface for UNGQR.\nSupports c, z.\nSee also: mfi_ungqr , cungqr , zungqr . public pure subroutine cungqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for CUNGQR\nSee also: mfi_ungqr , f77_ungqr .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by cgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zungqr(m, n, k, a, lda, tau, work, lwork, info) Original interface for ZUNGQR\nSee also: mfi_ungqr , f77_ungqr .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by zgeqrf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_ungrq Generic old style interface for UNGRQ.\nSupports c, z.\nSee also: mfi_ungrq , cungrq , zungrq . public pure subroutine cungrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for CUNGRQ\nSee also: mfi_ungrq , f77_ungrq .\nThis routine generates an complex(REAL32)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by cgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL32), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL32), intent(in) :: tau (*) complex(kind=REAL32), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public pure subroutine zungrq(m, n, k, a, lda, tau, work, lwork, info) Original interface for ZUNGRQ\nSee also: mfi_ungrq , f77_ungrq .\nThis routine generates an complex(REAL64)\nmatrix with orthonormal columns,\nwhich is defined as the first columns of a product of elementary\nreflectors of order . as returned by zgerqf . Arguments Type Intent Optional Attributes Name integer, intent(in) :: m integer, intent(in) :: n integer, intent(in) :: k complex(kind=REAL64), intent(inout) :: a (lda,*) integer, intent(in) :: lda complex(kind=REAL64), intent(in) :: tau (*) complex(kind=REAL64), intent(out) :: work (*) integer, intent(in) :: lwork integer, intent(out) :: info public        interface f77_lartg Generic old style interface for LARTG.\nSupports s, d, c, z.\nSee also: mfi_lartg , slartg , dlartg , clartg , zlartg . public pure subroutine slartg(f, g, c, s, r) Original interface for SLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name real(kind=REAL32), intent(inout) :: f real(kind=REAL32), intent(inout) :: g real(kind=wp), intent(inout) :: c real(kind=REAL32), intent(inout) :: s real(kind=REAL32), intent(inout) :: r public pure subroutine dlartg(f, g, c, s, r) Original interface for DLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name real(kind=REAL64), intent(inout) :: f real(kind=REAL64), intent(inout) :: g real(kind=wp), intent(inout) :: c real(kind=REAL64), intent(inout) :: s real(kind=REAL64), intent(inout) :: r public pure subroutine clartg(f, g, c, s, r) Original interface for CLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name complex(kind=REAL32), intent(inout) :: f complex(kind=REAL32), intent(inout) :: g real(kind=wp), intent(inout) :: c complex(kind=REAL32), intent(inout) :: s complex(kind=REAL32), intent(inout) :: r public pure subroutine zlartg(f, g, c, s, r) Original interface for ZLARTG\nSee also: mfi_lartg , f77_lartg . Arguments Type Intent Optional Attributes Name complex(kind=REAL64), intent(inout) :: f complex(kind=REAL64), intent(inout) :: g real(kind=wp), intent(inout) :: c complex(kind=REAL64), intent(inout) :: s complex(kind=REAL64), intent(inout) :: r public        interface f77_xerbla public pure subroutine xerbla(name, info) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name integer, intent(in) :: info","tags":"","loc":"module/f77_lapack.html"},{"title":"blas.f90 – MFI - Modern Fortran Interfaces","text":"Source Code !> Modern fortran interfaces for BLAS module mfi_blas use iso_fortran_env use f77_blas use f77_blas , only : mfi_rotg => f77_rotg use f77_blas , only : mfi_rotmg => f77_rotmg implicit none !> Generic modern interface for COPY. !> Supports s, d, c, z. !> See also: !> [[f77_copy:scopy]],[[f77_copy:dcopy]],[[f77_copy:ccopy]],[[f77_copy:zcopy]]. interface mfi_copy module procedure :: mfi_scopy module procedure :: mfi_dcopy module procedure :: mfi_ccopy module procedure :: mfi_zcopy end interface !> Generic modern interface for SWAP. !> Supports s, d, c, z. !> See also: !> [[f77_swap:sswap]],[[f77_swap:dswap]],[[f77_swap:cswap]],[[f77_swap:zswap]]. interface mfi_swap module procedure :: mfi_sswap module procedure :: mfi_dswap module procedure :: mfi_cswap module procedure :: mfi_zswap end interface !> Generic modern interface for AXPY. !> Supports s, d, c, z. !> See also: !> [[f77_axpy:saxpy]],[[f77_axpy:daxpy]],[[f77_axpy:caxpy]],[[f77_axpy:zaxpy]]. interface mfi_axpy module procedure :: mfi_saxpy module procedure :: mfi_daxpy module procedure :: mfi_caxpy module procedure :: mfi_zaxpy end interface !> Generic modern interface for DOT. !> Supports s, d. !> See also: !> [[f77_dot:sdot]],[[f77_dot:ddot]]. interface mfi_dot module procedure :: mfi_sdot module procedure :: mfi_ddot end interface !> Generic modern interface for DOTC. !> Supports c, z. !> See also: !> [[f77_dotc:cdotc]],[[f77_dotc:zdotc]]. interface mfi_dotc module procedure :: mfi_cdotc module procedure :: mfi_zdotc end interface !> Generic modern interface for DOTU. !> Supports c, z. !> See also: !> [[f77_dotu:cdotu]],[[f77_dotu:zdotu]]. interface mfi_dotu module procedure :: mfi_cdotu module procedure :: mfi_zdotu end interface !> Generic modern interface for ASUM. !> Supports s, d, sc, dz. !> See also: !> [[f77_asum:sasum]],[[f77_asum:dasum]],[[f77_asum:scasum]],[[f77_asum:dzasum]]. interface mfi_asum module procedure :: mfi_sasum module procedure :: mfi_dasum module procedure :: mfi_scasum module procedure :: mfi_dzasum end interface !> Generic modern interface for NRM2. !> Supports s, d, sc, dz. !> See also: !> [[f77_nrm2:snrm2]],[[f77_nrm2:dnrm2]],[[f77_nrm2:scnrm2]],[[f77_nrm2:dznrm2]]. interface mfi_nrm2 module procedure :: mfi_snrm2 module procedure :: mfi_dnrm2 module procedure :: mfi_scnrm2 module procedure :: mfi_dznrm2 end interface !> Generic modern interface for ROT. !> Supports s, d, c, z, cs, zd. !> See also: !> [[f77_rot:srot]],[[f77_rot:drot]],[[f77_rot:crot]],[[f77_rot:zrot]],[[f77_rot:csrot]],[[f77_rot:zdrot]]. interface mfi_rot module procedure :: mfi_srot module procedure :: mfi_drot module procedure :: mfi_crot module procedure :: mfi_zrot module procedure :: mfi_csrot module procedure :: mfi_zdrot end interface !> Generic modern interface for ROTM. !> Supports s, d. !> See also: !> [[f77_rotm:srotm]],[[f77_rotm:drotm]]. interface mfi_rotm module procedure :: mfi_srotm module procedure :: mfi_drotm end interface !> Generic modern interface for SCAL. !> Supports s, d, c, z, cs, zd. !> See also: !> [[f77_scal:sscal]],[[f77_scal:dscal]],[[f77_scal:cscal]],[[f77_scal:zscal]],[[f77_scal:csscal]],[[f77_scal:zdscal]]. interface mfi_scal module procedure :: mfi_sscal module procedure :: mfi_dscal module procedure :: mfi_cscal module procedure :: mfi_zscal module procedure :: mfi_csscal module procedure :: mfi_zdscal end interface !> Generic modern interface for GBMV. !> Supports s, d, c, z. !> See also: !> [[f77_gbmv:sgbmv]],[[f77_gbmv:dgbmv]],[[f77_gbmv:cgbmv]],[[f77_gbmv:zgbmv]]. interface mfi_gbmv module procedure :: mfi_sgbmv module procedure :: mfi_dgbmv module procedure :: mfi_cgbmv module procedure :: mfi_zgbmv end interface !> Generic modern interface for GEMV. !> Supports s, d, c, z. !> See also: !> [[f77_gemv:sgemv]],[[f77_gemv:dgemv]],[[f77_gemv:cgemv]],[[f77_gemv:zgemv]]. interface mfi_gemv module procedure :: mfi_sgemv module procedure :: mfi_dgemv module procedure :: mfi_cgemv module procedure :: mfi_zgemv end interface !> Generic modern interface for GER. !> Supports s, d. !> See also: !> [[f77_ger:sger]],[[f77_ger:dger]]. interface mfi_ger module procedure :: mfi_sger module procedure :: mfi_dger end interface !> Generic modern interface for GERC. !> Supports c, z. !> See also: !> [[f77_gerc:cgerc]],[[f77_gerc:zgerc]]. interface mfi_gerc module procedure :: mfi_cgerc module procedure :: mfi_zgerc end interface !> Generic modern interface for GERU. !> Supports c, z. !> See also: !> [[f77_geru:cgeru]],[[f77_geru:zgeru]]. interface mfi_geru module procedure :: mfi_cgeru module procedure :: mfi_zgeru end interface !> Generic modern interface for HBMV. !> Supports c, z. !> See also: !> [[f77_hbmv:chbmv]],[[f77_hbmv:zhbmv]]. interface mfi_hbmv module procedure :: mfi_chbmv module procedure :: mfi_zhbmv end interface !> Generic modern interface for HEMV. !> Supports c, z. !> See also: !> [[f77_hemv:chemv]],[[f77_hemv:zhemv]]. interface mfi_hemv module procedure :: mfi_chemv module procedure :: mfi_zhemv end interface !> Generic modern interface for HER. !> Supports c, z. !> See also: !> [[f77_her:cher]],[[f77_her:zher]]. interface mfi_her module procedure :: mfi_cher module procedure :: mfi_zher end interface !> Generic modern interface for HER2. !> Supports c, z. !> See also: !> [[f77_her2:cher2]],[[f77_her2:zher2]]. interface mfi_her2 module procedure :: mfi_cher2 module procedure :: mfi_zher2 end interface !> Generic modern interface for HPMV. !> Supports c, z. !> See also: !> [[f77_hpmv:chpmv]],[[f77_hpmv:zhpmv]]. interface mfi_hpmv module procedure :: mfi_chpmv module procedure :: mfi_zhpmv end interface !> Generic modern interface for HPR. !> Supports c, z. !> See also: !> [[f77_hpr:chpr]],[[f77_hpr:zhpr]]. interface mfi_hpr module procedure :: mfi_chpr module procedure :: mfi_zhpr end interface !> Generic modern interface for HPR2. !> Supports c, z. !> See also: !> [[f77_hpr2:chpr2]],[[f77_hpr2:zhpr2]]. interface mfi_hpr2 module procedure :: mfi_chpr2 module procedure :: mfi_zhpr2 end interface !> Generic modern interface for SBMV. !> Supports s, d. !> See also: !> [[f77_sbmv:ssbmv]],[[f77_sbmv:dsbmv]]. interface mfi_sbmv module procedure :: mfi_ssbmv module procedure :: mfi_dsbmv end interface !> Generic modern interface for SPMV. !> Supports s, d. !> See also: !> [[f77_spmv:sspmv]],[[f77_spmv:dspmv]]. interface mfi_spmv module procedure :: mfi_sspmv module procedure :: mfi_dspmv end interface !> Generic modern interface for SPR. !> Supports s, d. !> See also: !> [[f77_spr:sspr]],[[f77_spr:dspr]]. interface mfi_spr module procedure :: mfi_sspr module procedure :: mfi_dspr end interface !> Generic modern interface for SPR2. !> Supports s, d. !> See also: !> [[f77_spr2:sspr2]],[[f77_spr2:dspr2]]. interface mfi_spr2 module procedure :: mfi_sspr2 module procedure :: mfi_dspr2 end interface !> Generic modern interface for SYMV. !> Supports s, d. !> See also: !> [[f77_symv:ssymv]],[[f77_symv:dsymv]]. interface mfi_symv module procedure :: mfi_ssymv module procedure :: mfi_dsymv end interface !> Generic modern interface for SYR. !> Supports s, d. !> See also: !> [[f77_syr:ssyr]],[[f77_syr:dsyr]]. interface mfi_syr module procedure :: mfi_ssyr module procedure :: mfi_dsyr end interface !> Generic modern interface for SYR2. !> Supports s, d. !> See also: !> [[f77_syr2:ssyr2]],[[f77_syr2:dsyr2]]. interface mfi_syr2 module procedure :: mfi_ssyr2 module procedure :: mfi_dsyr2 end interface !> Generic modern interface for TBMV. !> Supports s, d, c, z. !> See also: !> [[f77_tbmv:stbmv]],[[f77_tbmv:dtbmv]],[[f77_tbmv:ctbmv]],[[f77_tbmv:ztbmv]]. interface mfi_tbmv module procedure :: mfi_stbmv module procedure :: mfi_dtbmv module procedure :: mfi_ctbmv module procedure :: mfi_ztbmv end interface !> Generic modern interface for TBSV. !> Supports s, d, c, z. !> See also: !> [[f77_tbsv:stbsv]],[[f77_tbsv:dtbsv]],[[f77_tbsv:ctbsv]],[[f77_tbsv:ztbsv]]. interface mfi_tbsv module procedure :: mfi_stbsv module procedure :: mfi_dtbsv module procedure :: mfi_ctbsv module procedure :: mfi_ztbsv end interface !> Generic modern interface for TPMV. !> Supports s, d, c, z. !> See also: !> [[f77_tpmv:stpmv]],[[f77_tpmv:dtpmv]],[[f77_tpmv:ctpmv]],[[f77_tpmv:ztpmv]]. interface mfi_tpmv module procedure :: mfi_stpmv module procedure :: mfi_dtpmv module procedure :: mfi_ctpmv module procedure :: mfi_ztpmv end interface !> Generic modern interface for TPSV. !> Supports s, d, c, z. !> See also: !> [[f77_tpsv:stpsv]],[[f77_tpsv:dtpsv]],[[f77_tpsv:ctpsv]],[[f77_tpsv:ztpsv]]. interface mfi_tpsv module procedure :: mfi_stpsv module procedure :: mfi_dtpsv module procedure :: mfi_ctpsv module procedure :: mfi_ztpsv end interface !> Generic modern interface for TRMV. !> Supports s, d, c, z. !> See also: !> [[f77_trmv:strmv]],[[f77_trmv:dtrmv]],[[f77_trmv:ctrmv]],[[f77_trmv:ztrmv]]. interface mfi_trmv module procedure :: mfi_strmv module procedure :: mfi_dtrmv module procedure :: mfi_ctrmv module procedure :: mfi_ztrmv end interface !> Generic modern interface for TRSV. !> Supports s, d, c, z. !> See also: !> [[f77_trsv:strsv]],[[f77_trsv:dtrsv]],[[f77_trsv:ctrsv]],[[f77_trsv:ztrsv]]. interface mfi_trsv module procedure :: mfi_strsv module procedure :: mfi_dtrsv module procedure :: mfi_ctrsv module procedure :: mfi_ztrsv end interface !> Generic modern interface for GEMM. !> Supports s, d, c, z. !> See also: !> [[f77_gemm:sgemm]],[[f77_gemm:dgemm]],[[f77_gemm:cgemm]],[[f77_gemm:zgemm]]. interface mfi_gemm module procedure :: mfi_sgemm module procedure :: mfi_dgemm module procedure :: mfi_cgemm module procedure :: mfi_zgemm end interface !> Generic modern interface for HEMM. !> Supports c, z. !> See also: !> [[f77_hemm:chemm]],[[f77_hemm:zhemm]]. interface mfi_hemm module procedure :: mfi_chemm module procedure :: mfi_zhemm end interface !> Generic modern interface for HERK. !> Supports c, z. !> See also: !> [[f77_herk:cherk]],[[f77_herk:zherk]]. interface mfi_herk module procedure :: mfi_cherk module procedure :: mfi_zherk end interface !> Generic modern interface for HER2K. !> Supports c, z. !> See also: !> [[f77_her2k:cher2k]],[[f77_her2k:zher2k]]. interface mfi_her2k module procedure :: mfi_cher2k module procedure :: mfi_zher2k end interface !> Generic modern interface for SYMM. !> Supports s, d. !> See also: !> [[f77_symm:ssymm]],[[f77_symm:dsymm]]. interface mfi_symm module procedure :: mfi_ssymm module procedure :: mfi_dsymm end interface !> Generic modern interface for SYRK. !> Supports s, d. !> See also: !> [[f77_syrk:ssyrk]],[[f77_syrk:dsyrk]]. interface mfi_syrk module procedure :: mfi_ssyrk module procedure :: mfi_dsyrk end interface !> Generic modern interface for SYR2K. !> Supports s, d. !> See also: !> [[f77_syr2k:ssyr2k]],[[f77_syr2k:dsyr2k]]. interface mfi_syr2k module procedure :: mfi_ssyr2k module procedure :: mfi_dsyr2k end interface !> Generic modern interface for TRMM. !> Supports s, d, c, z. !> See also: !> [[f77_trmm:strmm]],[[f77_trmm:dtrmm]],[[f77_trmm:ctrmm]],[[f77_trmm:ztrmm]]. interface mfi_trmm module procedure :: mfi_strmm module procedure :: mfi_dtrmm module procedure :: mfi_ctrmm module procedure :: mfi_ztrmm end interface !> Generic modern interface for TRSM. !> Supports s, d, c, z. !> See also: !> [[f77_trsm:strsm]],[[f77_trsm:dtrsm]],[[f77_trsm:ctrsm]],[[f77_trsm:ztrsm]]. interface mfi_trsm module procedure :: mfi_strsm module procedure :: mfi_dtrsm module procedure :: mfi_ctrsm module procedure :: mfi_ztrsm end interface !> Generic modern interface for LAMCH. !> Supports s, d. !> See also: !> [[f77_lamch:slamch]],[[f77_lamch:dlamch]]. interface mfi_lamch module procedure :: mfi_slamch module procedure :: mfi_dlamch end interface ! Extensions ! BLAS level 1 - Utils / Extensions !> Generic modern interface for IAMAX. !> Supports s, d, c, z. !> See also: !> [[f77_iamax:isamax]],[[f77_iamax:idamax]],[[f77_iamax:icamax]],[[f77_iamax:izamax]]. interface mfi_iamax module procedure :: mfi_isamax module procedure :: mfi_idamax module procedure :: mfi_icamax module procedure :: mfi_izamax end interface !> Generic modern interface for IAMIN. !> Supports s, d, c, z. !> See also: !> [[f77_iamin:isamin]],[[f77_iamin:idamin]],[[f77_iamin:icamin]],[[f77_iamin:izamin]]. interface mfi_iamin module procedure :: mfi_isamin module procedure :: mfi_idamin module procedure :: mfi_icamin module procedure :: mfi_izamin end interface contains !> Modern interface for [[f77_copy:scopy]]. !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine mfi_scopy ( x , y , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call scopy ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_copy:dcopy]]. !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine mfi_dcopy ( x , y , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call dcopy ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_copy:ccopy]]. !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine mfi_ccopy ( x , y , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call ccopy ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_copy:zcopy]]. !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine mfi_zcopy ( x , y , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call zcopy ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_swap:sswap]]. !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine mfi_sswap ( x , y , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call sswap ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_swap:dswap]]. !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine mfi_dswap ( x , y , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call dswap ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_swap:cswap]]. !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine mfi_cswap ( x , y , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call cswap ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_swap:zswap]]. !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine mfi_zswap ( x , y , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call zswap ( n , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_axpy:saxpy]]. !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine mfi_saxpy ( x , y , a , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) real ( REAL32 ), intent ( in ), optional :: a real ( REAL32 ) :: local_a integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( a )) then local_a = a else local_a = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call saxpy ( n , local_a , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_axpy:daxpy]]. !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine mfi_daxpy ( x , y , a , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) real ( REAL64 ), intent ( in ), optional :: a real ( REAL64 ) :: local_a integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( a )) then local_a = a else local_a = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call daxpy ( n , local_a , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_axpy:caxpy]]. !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine mfi_caxpy ( x , y , a , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) complex ( REAL32 ), intent ( in ), optional :: a complex ( REAL32 ) :: local_a integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( a )) then local_a = a else local_a = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call caxpy ( n , local_a , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_axpy:zaxpy]]. !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine mfi_zaxpy ( x , y , a , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) complex ( REAL64 ), intent ( in ), optional :: a complex ( REAL64 ) :: local_a integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( a )) then local_a = a else local_a = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call zaxpy ( n , local_a , x , local_incx , y , local_incy ) end subroutine !> Modern interface for [[f77_dot:sdot]]. !> See also: [[mfi_dot]], [[f77_dot]]. pure function mfi_sdot ( x , y , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ) :: mfi_sdot real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: y (:) integer :: n integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) mfi_sdot = sdot ( n , x , local_incx , y , local_incy ) end function !> Modern interface for [[f77_dot:ddot]]. !> See also: [[mfi_dot]], [[f77_dot]]. pure function mfi_ddot ( x , y , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ) :: mfi_ddot real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: y (:) integer :: n integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) mfi_ddot = ddot ( n , x , local_incx , y , local_incy ) end function !> Modern interface for [[f77_dotc:cdotc]]. !> See also: [[mfi_dotc]], [[f77_dotc]]. pure function mfi_cdotc ( x , y , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ) :: mfi_cdotc complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: y (:) integer :: n integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) mfi_cdotc = cdotc ( n , x , local_incx , y , local_incy ) end function !> Modern interface for [[f77_dotc:zdotc]]. !> See also: [[mfi_dotc]], [[f77_dotc]]. pure function mfi_zdotc ( x , y , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ) :: mfi_zdotc complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: y (:) integer :: n integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) mfi_zdotc = zdotc ( n , x , local_incx , y , local_incy ) end function !> Modern interface for [[f77_dotu:cdotu]]. !> See also: [[mfi_dotu]], [[f77_dotu]]. pure function mfi_cdotu ( x , y , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ) :: mfi_cdotu complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: y (:) integer :: n integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) mfi_cdotu = cdotu ( n , x , local_incx , y , local_incy ) end function !> Modern interface for [[f77_dotu:zdotu]]. !> See also: [[mfi_dotu]], [[f77_dotu]]. pure function mfi_zdotu ( x , y , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ) :: mfi_zdotu complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: y (:) integer :: n integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) mfi_zdotu = zdotu ( n , x , local_incx , y , local_incy ) end function !> Modern interface for [[f77_asum:sasum]]. !> See also: [[mfi_asum]], [[f77_asum]]. pure function mfi_sasum ( x , incx ) real ( REAL32 ) :: mfi_sasum real ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_sasum = sasum ( n , x , local_incx ) end function !> Modern interface for [[f77_asum:dasum]]. !> See also: [[mfi_asum]], [[f77_asum]]. pure function mfi_dasum ( x , incx ) real ( REAL64 ) :: mfi_dasum real ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_dasum = dasum ( n , x , local_incx ) end function !> Modern interface for [[f77_asum:scasum]]. !> See also: [[mfi_asum]], [[f77_asum]]. pure function mfi_scasum ( x , incx ) real ( REAL32 ) :: mfi_scasum complex ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_scasum = scasum ( n , x , local_incx ) end function !> Modern interface for [[f77_asum:dzasum]]. !> See also: [[mfi_asum]], [[f77_asum]]. pure function mfi_dzasum ( x , incx ) real ( REAL64 ) :: mfi_dzasum complex ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_dzasum = dzasum ( n , x , local_incx ) end function !> Modern interface for [[f77_nrm2:snrm2]]. !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function mfi_snrm2 ( x , incx ) real ( REAL32 ) :: mfi_snrm2 real ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_snrm2 = snrm2 ( n , x , local_incx ) end function !> Modern interface for [[f77_nrm2:dnrm2]]. !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function mfi_dnrm2 ( x , incx ) real ( REAL64 ) :: mfi_dnrm2 real ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_dnrm2 = dnrm2 ( n , x , local_incx ) end function !> Modern interface for [[f77_nrm2:scnrm2]]. !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function mfi_scnrm2 ( x , incx ) real ( REAL32 ) :: mfi_scnrm2 complex ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_scnrm2 = scnrm2 ( n , x , local_incx ) end function !> Modern interface for [[f77_nrm2:dznrm2]]. !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function mfi_dznrm2 ( x , incx ) real ( REAL64 ) :: mfi_dznrm2 complex ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_dznrm2 = dznrm2 ( n , x , local_incx ) end function !> Modern interface for [[f77_rot:srot]]. !> See also: [[mfi_rot]], [[f77_rot]]. !> Given two vectors x and y, !> each vector element of these vectors is replaced as follows: !>```fortran !> xi = c*xi + s*yi !> yi = c*yi - s*xi !>``` pure subroutine mfi_srot ( x , y , c , s , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) real ( REAL32 ), intent ( in ) :: c real ( REAL32 ), intent ( in ) :: s integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call srot ( n , x , local_incx , y , local_incy , c , s ) end subroutine !> Modern interface for [[f77_rot:drot]]. !> See also: [[mfi_rot]], [[f77_rot]]. !> Given two vectors x and y, !> each vector element of these vectors is replaced as follows: !>```fortran !> xi = c*xi + s*yi !> yi = c*yi - s*xi !>``` pure subroutine mfi_drot ( x , y , c , s , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) real ( REAL64 ), intent ( in ) :: c real ( REAL64 ), intent ( in ) :: s integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call drot ( n , x , local_incx , y , local_incy , c , s ) end subroutine !> Modern interface for [[f77_rot:crot]]. !> See also: [[mfi_rot]], [[f77_rot]]. !> Given two vectors x and y, !> each vector element of these vectors is replaced as follows: !>```fortran !> xi = c*xi + s*yi !> yi = c*yi - conj(s)*xi !>``` pure subroutine mfi_crot ( x , y , c , s , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) real ( REAL32 ), intent ( in ) :: c complex ( REAL32 ), intent ( in ) :: s integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call crot ( n , x , local_incx , y , local_incy , c , s ) end subroutine !> Modern interface for [[f77_rot:zrot]]. !> See also: [[mfi_rot]], [[f77_rot]]. !> Given two vectors x and y, !> each vector element of these vectors is replaced as follows: !>```fortran !> xi = c*xi + s*yi !> yi = c*yi - conj(s)*xi !>``` pure subroutine mfi_zrot ( x , y , c , s , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) real ( REAL64 ), intent ( in ) :: c complex ( REAL64 ), intent ( in ) :: s integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call zrot ( n , x , local_incx , y , local_incy , c , s ) end subroutine !> Modern interface for [[f77_rot:csrot]]. !> See also: [[mfi_rot]], [[f77_rot]]. !> Given two vectors x and y, !> each vector element of these vectors is replaced as follows: !>```fortran !> xi = c*xi + s*yi !> yi = c*yi - conj(s)*xi !>``` pure subroutine mfi_csrot ( x , y , c , s , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) real ( REAL32 ), intent ( in ) :: c real ( REAL32 ), intent ( in ) :: s integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call csrot ( n , x , local_incx , y , local_incy , c , s ) end subroutine !> Modern interface for [[f77_rot:zdrot]]. !> See also: [[mfi_rot]], [[f77_rot]]. !> Given two vectors x and y, !> each vector element of these vectors is replaced as follows: !>```fortran !> xi = c*xi + s*yi !> yi = c*yi - conj(s)*xi !>``` pure subroutine mfi_zdrot ( x , y , c , s , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) real ( REAL64 ), intent ( in ) :: c real ( REAL64 ), intent ( in ) :: s integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call zdrot ( n , x , local_incx , y , local_incy , c , s ) end subroutine !> Modern interface for [[f77_rotm:srotm]]. !> See also: [[mfi_rotm]], [[f77_rotm]]. pure subroutine mfi_srotm ( x , y , param , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) real ( REAL32 ), intent ( in ) :: param ( 5 ) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call srotm ( n , x , local_incx , y , local_incy , param ) end subroutine !> Modern interface for [[f77_rotm:drotm]]. !> See also: [[mfi_rotm]], [[f77_rotm]]. pure subroutine mfi_drotm ( x , y , param , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) real ( REAL64 ), intent ( in ) :: param ( 5 ) integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if N = size ( X ) call drotm ( n , x , local_incx , y , local_incy , param ) end subroutine !> Modern interface for [[f77_scal:sscal]]. !> See also: [[mfi_scal]], [[f77_scal]]. !> MFI_SSCAL scales a vector by a constant. pure subroutine mfi_sscal ( a , x , incx ) real ( REAL32 ), intent ( inout ) :: x (:) real ( REAL32 ), intent ( in ) :: a integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call sscal ( n , a , x , local_incx ) end subroutine !> Modern interface for [[f77_scal:dscal]]. !> See also: [[mfi_scal]], [[f77_scal]]. !> MFI_DSCAL scales a vector by a constant. pure subroutine mfi_dscal ( a , x , incx ) real ( REAL64 ), intent ( inout ) :: x (:) real ( REAL64 ), intent ( in ) :: a integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call dscal ( n , a , x , local_incx ) end subroutine !> Modern interface for [[f77_scal:cscal]]. !> See also: [[mfi_scal]], [[f77_scal]]. !> MFI_CSCAL scales a vector by a constant. pure subroutine mfi_cscal ( a , x , incx ) complex ( REAL32 ), intent ( inout ) :: x (:) complex ( REAL32 ), intent ( in ) :: a integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call cscal ( n , a , x , local_incx ) end subroutine !> Modern interface for [[f77_scal:zscal]]. !> See also: [[mfi_scal]], [[f77_scal]]. !> MFI_ZSCAL scales a vector by a constant. pure subroutine mfi_zscal ( a , x , incx ) complex ( REAL64 ), intent ( inout ) :: x (:) complex ( REAL64 ), intent ( in ) :: a integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call zscal ( n , a , x , local_incx ) end subroutine !> Modern interface for [[f77_scal:csscal]]. !> See also: [[mfi_scal]], [[f77_scal]]. !> MFI_CSSCAL scales a vector by a constant. pure subroutine mfi_csscal ( a , x , incx ) complex ( REAL32 ), intent ( inout ) :: x (:) real ( REAL32 ), intent ( in ) :: a integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call csscal ( n , a , x , local_incx ) end subroutine !> Modern interface for [[f77_scal:zdscal]]. !> See also: [[mfi_scal]], [[f77_scal]]. !> MFI_ZDSCAL scales a vector by a constant. pure subroutine mfi_zdscal ( a , x , incx ) complex ( REAL64 ), intent ( inout ) :: x (:) real ( REAL64 ), intent ( in ) :: a integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call zdscal ( n , a , x , local_incx ) end subroutine !> Modern interface for [[f77_gbmv:sgbmv]]. !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine mfi_sgbmv ( a , x , y , kl , m , alpha , beta , trans , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer , intent ( in ), optional :: kl integer :: local_kl integer , intent ( in ), optional :: m integer :: local_m integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , ku , lda n = size ( a , 2 ) lda = max ( 1 , size ( a , 1 )) if ( present ( kl )) then local_kl = kl else local_kl = ( lda - 1 ) / 2 end if if ( present ( m )) then local_m = m else local_m = n end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if ku = lda - local_kl - 1 call sgbmv ( local_trans , local_m , n , local_kl , ku , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gbmv:dgbmv]]. !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine mfi_dgbmv ( a , x , y , kl , m , alpha , beta , trans , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer , intent ( in ), optional :: kl integer :: local_kl integer , intent ( in ), optional :: m integer :: local_m integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , ku , lda n = size ( a , 2 ) lda = max ( 1 , size ( a , 1 )) if ( present ( kl )) then local_kl = kl else local_kl = ( lda - 1 ) / 2 end if if ( present ( m )) then local_m = m else local_m = n end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if ku = lda - local_kl - 1 call dgbmv ( local_trans , local_m , n , local_kl , ku , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gbmv:cgbmv]]. !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine mfi_cgbmv ( a , x , y , kl , m , alpha , beta , trans , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer , intent ( in ), optional :: kl integer :: local_kl integer , intent ( in ), optional :: m integer :: local_m integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , ku , lda n = size ( a , 2 ) lda = max ( 1 , size ( a , 1 )) if ( present ( kl )) then local_kl = kl else local_kl = ( lda - 1 ) / 2 end if if ( present ( m )) then local_m = m else local_m = n end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if ku = lda - local_kl - 1 call cgbmv ( local_trans , local_m , n , local_kl , ku , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gbmv:zgbmv]]. !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine mfi_zgbmv ( a , x , y , kl , m , alpha , beta , trans , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer , intent ( in ), optional :: kl integer :: local_kl integer , intent ( in ), optional :: m integer :: local_m integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , ku , lda n = size ( a , 2 ) lda = max ( 1 , size ( a , 1 )) if ( present ( kl )) then local_kl = kl else local_kl = ( lda - 1 ) / 2 end if if ( present ( m )) then local_m = m else local_m = n end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if ku = lda - local_kl - 1 call zgbmv ( local_trans , local_m , n , local_kl , ku , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gemv:sgemv]]. !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine mfi_sgemv ( a , x , y , trans , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call sgemv ( local_trans , m , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gemv:dgemv]]. !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine mfi_dgemv ( a , x , y , trans , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call dgemv ( local_trans , m , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gemv:cgemv]]. !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine mfi_cgemv ( a , x , y , trans , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call cgemv ( local_trans , m , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_gemv:zgemv]]. !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine mfi_zgemv ( a , x , y , trans , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: trans character :: local_trans complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call zgemv ( local_trans , m , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_ger:sger]]. !> See also: [[mfi_ger]], [[f77_ger]]. pure subroutine mfi_sger ( a , x , y , alpha , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: y (:) real ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call sger ( m , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_ger:dger]]. !> See also: [[mfi_ger]], [[f77_ger]]. pure subroutine mfi_dger ( a , x , y , alpha , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: y (:) real ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call dger ( m , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_gerc:cgerc]]. !> See also: [[mfi_gerc]], [[f77_gerc]]. pure subroutine mfi_cgerc ( a , x , y , alpha , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: y (:) complex ( REAL32 ), intent ( inout ) :: a (:,:) complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call cgerc ( m , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_gerc:zgerc]]. !> See also: [[mfi_gerc]], [[f77_gerc]]. pure subroutine mfi_zgerc ( a , x , y , alpha , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: y (:) complex ( REAL64 ), intent ( inout ) :: a (:,:) complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call zgerc ( m , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_geru:cgeru]]. !> See also: [[mfi_geru]], [[f77_geru]]. pure subroutine mfi_cgeru ( a , x , y , alpha , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: y (:) complex ( REAL32 ), intent ( inout ) :: a (:,:) complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call cgeru ( m , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_geru:zgeru]]. !> See also: [[mfi_geru]], [[f77_geru]]. pure subroutine mfi_zgeru ( a , x , y , alpha , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: y (:) complex ( REAL64 ), intent ( inout ) :: a (:,:) complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: m , n , lda if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if m = size ( a , 1 ) n = size ( a , 2 ) lda = max ( 1 , m ) call zgeru ( m , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_hbmv:chbmv]]. !> See also: [[mfi_hbmv]], [[f77_hbmv]]. pure subroutine mfi_chbmv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call chbmv ( local_uplo , n , k , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_hbmv:zhbmv]]. !> See also: [[mfi_hbmv]], [[f77_hbmv]]. pure subroutine mfi_zhbmv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call zhbmv ( local_uplo , n , k , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_hemv:chemv]]. !> See also: [[mfi_hemv]], [[f77_hemv]]. pure subroutine mfi_chemv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call chemv ( local_uplo , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_hemv:zhemv]]. !> See also: [[mfi_hemv]], [[f77_hemv]]. pure subroutine mfi_zhemv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call zhemv ( local_uplo , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_her:cher]]. !> See also: [[mfi_her]], [[f77_her]]. pure subroutine mfi_cher ( a , x , uplo , alpha , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo real ( wp ), intent ( in ), optional :: alpha real ( wp ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call cher ( local_uplo , n , local_alpha , x , local_incx , a , lda ) end subroutine !> Modern interface for [[f77_her:zher]]. !> See also: [[mfi_her]], [[f77_her]]. pure subroutine mfi_zher ( a , x , uplo , alpha , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo real ( wp ), intent ( in ), optional :: alpha real ( wp ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call zher ( local_uplo , n , local_alpha , x , local_incx , a , lda ) end subroutine !> Modern interface for [[f77_her2:cher2]]. !> See also: [[mfi_her2]], [[f77_her2]]. pure subroutine mfi_cher2 ( a , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: y (:) complex ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call cher2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_her2:zher2]]. !> See also: [[mfi_her2]], [[f77_her2]]. pure subroutine mfi_zher2 ( a , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: y (:) complex ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call zher2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_hpmv:chpmv]]. !> See also: [[mfi_hpmv]], [[f77_hpmv]]. pure subroutine mfi_chpmv ( ap , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: ap (:) complex ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call chpmv ( local_uplo , n , local_alpha , ap , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_hpmv:zhpmv]]. !> See also: [[mfi_hpmv]], [[f77_hpmv]]. pure subroutine mfi_zhpmv ( ap , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: ap (:) complex ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call zhpmv ( local_uplo , n , local_alpha , ap , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_hpr:chpr]]. !> See also: [[mfi_hpr]], [[f77_hpr]]. pure subroutine mfi_chpr ( ap , x , uplo , alpha , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( wp ), intent ( in ), optional :: alpha real ( wp ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call chpr ( local_uplo , n , local_alpha , x , local_incx , ap ) end subroutine !> Modern interface for [[f77_hpr:zhpr]]. !> See also: [[mfi_hpr]], [[f77_hpr]]. pure subroutine mfi_zhpr ( ap , x , uplo , alpha , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( wp ), intent ( in ), optional :: alpha real ( wp ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call zhpr ( local_uplo , n , local_alpha , x , local_incx , ap ) end subroutine !> Modern interface for [[f77_hpr2:chpr2]]. !> See also: [[mfi_hpr2]], [[f77_hpr2]]. pure subroutine mfi_chpr2 ( ap , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x (:) complex ( REAL32 ), intent ( in ) :: y (:) complex ( REAL32 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call chpr2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , ap ) end subroutine !> Modern interface for [[f77_hpr2:zhpr2]]. !> See also: [[mfi_hpr2]], [[f77_hpr2]]. pure subroutine mfi_zhpr2 ( ap , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x (:) complex ( REAL64 ), intent ( in ) :: y (:) complex ( REAL64 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call zhpr2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , ap ) end subroutine !> Modern interface for [[f77_sbmv:ssbmv]]. !> See also: [[mfi_sbmv]], [[f77_sbmv]]. pure subroutine mfi_ssbmv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ssbmv ( local_uplo , n , k , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_sbmv:dsbmv]]. !> See also: [[mfi_sbmv]], [[f77_sbmv]]. pure subroutine mfi_dsbmv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dsbmv ( local_uplo , n , k , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_spmv:sspmv]]. !> See also: [[mfi_spmv]], [[f77_spmv]]. pure subroutine mfi_sspmv ( ap , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: ap (:) real ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call sspmv ( local_uplo , n , local_alpha , ap , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_spmv:dspmv]]. !> See also: [[mfi_spmv]], [[f77_spmv]]. pure subroutine mfi_dspmv ( ap , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: ap (:) real ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call dspmv ( local_uplo , n , local_alpha , ap , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_spr:sspr]]. !> See also: [[mfi_spr]], [[f77_spr]]. pure subroutine mfi_sspr ( ap , x , uplo , alpha , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call sspr ( local_uplo , n , local_alpha , x , local_incx , ap ) end subroutine !> Modern interface for [[f77_spr:dspr]]. !> See also: [[mfi_spr]], [[f77_spr]]. pure subroutine mfi_dspr ( ap , x , uplo , alpha , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call dspr ( local_uplo , n , local_alpha , x , local_incx , ap ) end subroutine !> Modern interface for [[f77_spr2:sspr2]]. !> See also: [[mfi_spr2]], [[f77_spr2]]. pure subroutine mfi_sspr2 ( ap , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: y (:) real ( REAL32 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call sspr2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , ap ) end subroutine !> Modern interface for [[f77_spr2:dspr2]]. !> See also: [[mfi_spr2]], [[f77_spr2]]. pure subroutine mfi_dspr2 ( ap , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: y (:) real ( REAL64 ), intent ( inout ) :: ap (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if n = size ( x ) call dspr2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , ap ) end subroutine !> Modern interface for [[f77_symv:ssymv]]. !> See also: [[mfi_symv]], [[f77_symv]]. pure subroutine mfi_ssymv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ssymv ( local_uplo , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_symv:dsymv]]. !> See also: [[mfi_symv]], [[f77_symv]]. pure subroutine mfi_dsymv ( a , x , y , uplo , alpha , beta , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: y (:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dsymv ( local_uplo , n , local_alpha , a , lda , x , local_incx , local_beta , y , local_incy ) end subroutine !> Modern interface for [[f77_syr:ssyr]]. !> See also: [[mfi_syr]], [[f77_syr]]. pure subroutine mfi_ssyr ( a , x , uplo , alpha , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ssyr ( local_uplo , n , local_alpha , x , local_incx , a , lda ) end subroutine !> Modern interface for [[f77_syr:dsyr]]. !> See also: [[mfi_syr]], [[f77_syr]]. pure subroutine mfi_dsyr ( a , x , uplo , alpha , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dsyr ( local_uplo , n , local_alpha , x , local_incx , a , lda ) end subroutine !> Modern interface for [[f77_syr2:ssyr2]]. !> See also: [[mfi_syr2]], [[f77_syr2]]. pure subroutine mfi_ssyr2 ( a , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x (:) real ( REAL32 ), intent ( in ) :: y (:) real ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ssyr2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_syr2:dsyr2]]. !> See also: [[mfi_syr2]], [[f77_syr2]]. pure subroutine mfi_dsyr2 ( a , x , y , uplo , alpha , incx , incy ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x (:) real ( REAL64 ), intent ( in ) :: y (:) real ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer , intent ( in ), optional :: incx integer :: local_incx integer , intent ( in ), optional :: incy integer :: local_incy integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if if ( present ( incy )) then local_incy = incy else local_incy = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dsyr2 ( local_uplo , n , local_alpha , x , local_incx , y , local_incy , a , lda ) end subroutine !> Modern interface for [[f77_tbmv:stbmv]]. !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine mfi_stbmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call stbmv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbmv:dtbmv]]. !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine mfi_dtbmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dtbmv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbmv:ctbmv]]. !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine mfi_ctbmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ctbmv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbmv:ztbmv]]. !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine mfi_ztbmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ztbmv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbsv:stbsv]]. !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine mfi_stbsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call stbsv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbsv:dtbsv]]. !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine mfi_dtbsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dtbsv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbsv:ctbsv]]. !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine mfi_ctbsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ctbsv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tbsv:ztbsv]]. !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine mfi_ztbsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , k , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if k = size ( a , 1 ) - 1 lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ztbsv ( local_uplo , local_trans , local_diag , n , k , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_tpmv:stpmv]]. !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine mfi_stpmv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: ap (:) real ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call stpmv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpmv:dtpmv]]. !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine mfi_dtpmv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: ap (:) real ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call dtpmv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpmv:ctpmv]]. !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine mfi_ctpmv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: ap (:) complex ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call ctpmv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpmv:ztpmv]]. !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine mfi_ztpmv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: ap (:) complex ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call ztpmv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpsv:stpsv]]. !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine mfi_stpsv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: ap (:) real ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call stpsv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpsv:dtpsv]]. !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine mfi_dtpsv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: ap (:) real ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call dtpsv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpsv:ctpsv]]. !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine mfi_ctpsv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: ap (:) complex ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call ctpsv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_tpsv:ztpsv]]. !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine mfi_ztpsv ( ap , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: ap (:) complex ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) call ztpsv ( local_uplo , local_trans , local_diag , n , ap , x , local_incx ) end subroutine !> Modern interface for [[f77_trmv:strmv]]. !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine mfi_strmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call strmv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trmv:dtrmv]]. !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine mfi_dtrmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dtrmv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trmv:ctrmv]]. !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine mfi_ctrmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ctrmv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trmv:ztrmv]]. !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine mfi_ztrmv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ztrmv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trsv:strsv]]. !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine mfi_strsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call strsv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trsv:dtrsv]]. !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine mfi_dtrsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dtrsv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trsv:ctrsv]]. !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine mfi_ctrsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ctrsv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_trsv:ztrsv]]. !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine mfi_ztrsv ( a , x , uplo , trans , diag , incx ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: x (:) character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: diag character :: local_diag integer , intent ( in ), optional :: incx integer :: local_incx integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( incx )) then local_incx = incx else local_incx = 1 end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call ztrsv ( local_uplo , local_trans , local_diag , n , a , lda , x , local_incx ) end subroutine !> Modern interface for [[f77_gemm:sgemm]]. !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine mfi_sgemm ( a , b , c , transa , transb , alpha , beta ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( in ) :: b (:,:) real ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: transb character :: local_transb real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer :: m , n , k , lda , ldb , ldc if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( transb )) then local_transb = transb else local_transb = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) if ( local_transa == 'N' . or . local_transa == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if call sgemm ( local_transa , local_transb , m , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_gemm:dgemm]]. !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine mfi_dgemm ( a , b , c , transa , transb , alpha , beta ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( in ) :: b (:,:) real ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: transb character :: local_transb real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer :: m , n , k , lda , ldb , ldc if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( transb )) then local_transb = transb else local_transb = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) if ( local_transa == 'N' . or . local_transa == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if call dgemm ( local_transa , local_transb , m , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_gemm:cgemm]]. !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine mfi_cgemm ( a , b , c , transa , transb , alpha , beta ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( in ) :: b (:,:) complex ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: transb character :: local_transb complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer :: m , n , k , lda , ldb , ldc if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( transb )) then local_transb = transb else local_transb = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) if ( local_transa == 'N' . or . local_transa == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if call cgemm ( local_transa , local_transb , m , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_gemm:zgemm]]. !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine mfi_zgemm ( a , b , c , transa , transb , alpha , beta ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( in ) :: b (:,:) complex ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: transb character :: local_transb complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer :: m , n , k , lda , ldb , ldc if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( transb )) then local_transb = transb else local_transb = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) if ( local_transa == 'N' . or . local_transa == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if call zgemm ( local_transa , local_transb , m , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_hemm:chemm]]. !> See also: [[mfi_hemm]], [[f77_hemm]]. pure subroutine mfi_chemm ( a , b , c , side , uplo , alpha , beta ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( in ) :: b (:,:) complex ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha complex ( REAL32 ), intent ( in ), optional :: beta complex ( REAL32 ) :: local_beta integer :: m , n , lda , ldb , ldc if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) call chemm ( local_side , local_uplo , m , n , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_hemm:zhemm]]. !> See also: [[mfi_hemm]], [[f77_hemm]]. pure subroutine mfi_zhemm ( a , b , c , side , uplo , alpha , beta ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( in ) :: b (:,:) complex ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha complex ( REAL64 ), intent ( in ), optional :: beta complex ( REAL64 ) :: local_beta integer :: m , n , lda , ldb , ldc if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) call zhemm ( local_side , local_uplo , m , n , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_herk:cherk]]. !> See also: [[mfi_herk]], [[f77_herk]]. pure subroutine mfi_cherk ( a , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo real ( wp ), intent ( in ), optional :: alpha real ( wp ) :: local_alpha real ( wp ), intent ( in ), optional :: beta real ( wp ) :: local_beta integer :: n , k , lda , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldc = max ( 1 , size ( c , 1 )) call cherk ( local_uplo , local_trans , n , k , local_alpha , a , lda , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_herk:zherk]]. !> See also: [[mfi_herk]], [[f77_herk]]. pure subroutine mfi_zherk ( a , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo real ( wp ), intent ( in ), optional :: alpha real ( wp ) :: local_alpha real ( wp ), intent ( in ), optional :: beta real ( wp ) :: local_beta integer :: n , k , lda , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldc = max ( 1 , size ( c , 1 )) call zherk ( local_uplo , local_trans , n , k , local_alpha , a , lda , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_her2k:cher2k]]. !> See also: [[mfi_her2k]], [[f77_her2k]]. pure subroutine mfi_cher2k ( a , b , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( in ) :: b (:,:) complex ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha real ( wp ), intent ( in ), optional :: beta real ( wp ) :: local_beta integer :: n , k , lda , ldb , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) call cher2k ( local_uplo , local_trans , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_her2k:zher2k]]. !> See also: [[mfi_her2k]], [[f77_her2k]]. pure subroutine mfi_zher2k ( a , b , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( in ) :: b (:,:) complex ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha real ( wp ), intent ( in ), optional :: beta real ( wp ) :: local_beta integer :: n , k , lda , ldb , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) call zher2k ( local_uplo , local_trans , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_symm:ssymm]]. !> See also: [[mfi_symm]], [[f77_symm]]. pure subroutine mfi_ssymm ( a , b , c , side , uplo , alpha , beta ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( in ) :: b (:,:) real ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer :: m , n , lda , ldb , ldc if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) call ssymm ( local_side , local_uplo , m , n , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_symm:dsymm]]. !> See also: [[mfi_symm]], [[f77_symm]]. pure subroutine mfi_dsymm ( a , b , c , side , uplo , alpha , beta ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( in ) :: b (:,:) real ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer :: m , n , lda , ldb , ldc if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) m = size ( c , 1 ) n = size ( c , 2 ) call dsymm ( local_side , local_uplo , m , n , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_syrk:ssyrk]]. !> See also: [[mfi_syrk]], [[f77_syrk]]. pure subroutine mfi_ssyrk ( a , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer :: n , k , lda , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldc = max ( 1 , size ( c , 1 )) call ssyrk ( local_uplo , local_trans , n , k , local_alpha , a , lda , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_syrk:dsyrk]]. !> See also: [[mfi_syrk]], [[f77_syrk]]. pure subroutine mfi_dsyrk ( a , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer :: n , k , lda , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldc = max ( 1 , size ( c , 1 )) call dsyrk ( local_uplo , local_trans , n , k , local_alpha , a , lda , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_syr2k:ssyr2k]]. !> See also: [[mfi_syr2k]], [[f77_syr2k]]. pure subroutine mfi_ssyr2k ( a , b , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( in ) :: b (:,:) real ( REAL32 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha real ( REAL32 ), intent ( in ), optional :: beta real ( REAL32 ) :: local_beta integer :: n , k , lda , ldb , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) call ssyr2k ( local_uplo , local_trans , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_syr2k:dsyr2k]]. !> See also: [[mfi_syr2k]], [[f77_syr2k]]. pure subroutine mfi_dsyr2k ( a , b , c , uplo , trans , alpha , beta ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( in ) :: b (:,:) real ( REAL64 ), intent ( inout ) :: c (:,:) character , intent ( in ), optional :: trans character :: local_trans character , intent ( in ), optional :: uplo character :: local_uplo real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha real ( REAL64 ), intent ( in ), optional :: beta real ( REAL64 ) :: local_beta integer :: n , k , lda , ldb , ldc if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if if ( present ( beta )) then local_beta = beta else local_beta = 0.0_wp end if n = size ( c , 2 ) if ( local_trans == 'N' . or . local_trans == 'n' ) then k = size ( a , 2 ) else k = size ( a , 1 ) end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) ldc = max ( 1 , size ( c , 1 )) call dsyr2k ( local_uplo , local_trans , n , k , local_alpha , a , lda , b , ldb , local_beta , c , ldc ) end subroutine !> Modern interface for [[f77_trmm:strmm]]. !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine mfi_strmm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call strmm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trmm:dtrmm]]. !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine mfi_dtrmm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call dtrmm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trmm:ctrmm]]. !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine mfi_ctrmm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call ctrmm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trmm:ztrmm]]. !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine mfi_ztrmm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call ztrmm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trsm:strsm]]. !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine mfi_strsm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag real ( REAL32 ), intent ( in ), optional :: alpha real ( REAL32 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call strsm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trsm:dtrsm]]. !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine mfi_dtrsm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag real ( REAL64 ), intent ( in ), optional :: alpha real ( REAL64 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call dtrsm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trsm:ctrsm]]. !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine mfi_ctrsm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag complex ( REAL32 ), intent ( in ), optional :: alpha complex ( REAL32 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call ctrsm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_trsm:ztrsm]]. !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine mfi_ztrsm ( a , b , side , uplo , transa , diag , alpha ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: side character :: local_side character , intent ( in ), optional :: uplo character :: local_uplo character , intent ( in ), optional :: transa character :: local_transa character , intent ( in ), optional :: diag character :: local_diag complex ( REAL64 ), intent ( in ), optional :: alpha complex ( REAL64 ) :: local_alpha integer :: m , n , lda , ldb if ( present ( side )) then local_side = side else local_side = 'L' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if if ( present ( transa )) then local_transa = transa else local_transa = 'N' end if if ( present ( diag )) then local_diag = diag else local_diag = 'N' end if if ( present ( alpha )) then local_alpha = alpha else local_alpha = 1.0_wp end if m = size ( b , 1 ) n = size ( b , 2 ) lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) call ztrsm ( local_side , local_uplo , local_transa , local_diag , m , n , local_alpha , a , lda , b , ldb ) end subroutine !> Modern interface for [[f77_lamch:slamch]]. !> See also: [[mfi_lamch]], [[f77_lamch]]. pure function mfi_slamch ( cmach , kind ) result ( res ) integer , parameter :: wp = REAL32 character , intent ( in ) :: cmach real ( REAL32 ), intent ( in ) :: kind !! Just a kind placeholder real ( REAL32 ) :: res res = slamch ( cmach ) end function !> Modern interface for [[f77_lamch:dlamch]]. !> See also: [[mfi_lamch]], [[f77_lamch]]. pure function mfi_dlamch ( cmach , kind ) result ( res ) integer , parameter :: wp = REAL64 character , intent ( in ) :: cmach real ( REAL64 ), intent ( in ) :: kind !! Just a kind placeholder real ( REAL64 ) :: res res = dlamch ( cmach ) end function ! Extensions ! BLAS level 1 - Utils / Extensions !> Modern interface for [[f77_iamax:isamax]]. !> See also: [[mfi_iamax]], [[f77_iamax]]. pure function mfi_isamax ( x , incx ) integer , parameter :: wp = REAL32 integer :: mfi_isamax real ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_isamax = isamax ( n , x , local_incx ) end function !> Modern interface for [[f77_iamax:idamax]]. !> See also: [[mfi_iamax]], [[f77_iamax]]. pure function mfi_idamax ( x , incx ) integer , parameter :: wp = REAL64 integer :: mfi_idamax real ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_idamax = idamax ( n , x , local_incx ) end function !> Modern interface for [[f77_iamax:icamax]]. !> See also: [[mfi_iamax]], [[f77_iamax]]. pure function mfi_icamax ( x , incx ) integer , parameter :: wp = REAL32 integer :: mfi_icamax complex ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_icamax = icamax ( n , x , local_incx ) end function !> Modern interface for [[f77_iamax:izamax]]. !> See also: [[mfi_iamax]], [[f77_iamax]]. pure function mfi_izamax ( x , incx ) integer , parameter :: wp = REAL64 integer :: mfi_izamax complex ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_izamax = izamax ( n , x , local_incx ) end function !> Modern interface for [[f77_iamin:isamin]]. !> See also: [[mfi_iamin]], [[f77_iamin]]. pure function mfi_isamin ( x , incx ) integer , parameter :: wp = REAL32 integer :: mfi_isamin real ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_isamin = isamin ( n , x , local_incx ) end function !> Modern interface for [[f77_iamin:idamin]]. !> See also: [[mfi_iamin]], [[f77_iamin]]. pure function mfi_idamin ( x , incx ) integer , parameter :: wp = REAL64 integer :: mfi_idamin real ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_idamin = idamin ( n , x , local_incx ) end function !> Modern interface for [[f77_iamin:icamin]]. !> See also: [[mfi_iamin]], [[f77_iamin]]. pure function mfi_icamin ( x , incx ) integer , parameter :: wp = REAL32 integer :: mfi_icamin complex ( REAL32 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_icamin = icamin ( n , x , local_incx ) end function !> Modern interface for [[f77_iamin:izamin]]. !> See also: [[mfi_iamin]], [[f77_iamin]]. pure function mfi_izamin ( x , incx ) integer , parameter :: wp = REAL64 integer :: mfi_izamin complex ( REAL64 ), intent ( in ) :: x (:) integer , intent ( in ), optional :: incx integer :: local_incx integer :: n if ( present ( incx )) then local_incx = incx else local_incx = 1 end if n = size ( x ) mfi_izamin = izamin ( n , x , local_incx ) end function end module","tags":"","loc":"sourcefile/blas.f90.html"},{"title":"blas.f90 – MFI - Modern Fortran Interfaces","text":"Source Code !> Improved and original F77 interfaces for BLAS module f77_blas use iso_fortran_env implicit none !> Generic old style interface for COPY. !> Supports s, d, c, z. !> See also: [[mfi_copy]], [[scopy]],[[dcopy]],[[ccopy]],[[zcopy]]. interface f77_copy !> Original interface for SCOPY !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine scopy ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DCOPY !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine dcopy ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for CCOPY !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine ccopy ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZCOPY !> See also: [[mfi_copy]], [[f77_copy]]. pure subroutine zcopy ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for SWAP. !> Supports s, d, c, z. !> See also: [[mfi_swap]], [[sswap]],[[dswap]],[[cswap]],[[zswap]]. interface f77_swap !> Original interface for SSWAP !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine sswap ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DSWAP !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine dswap ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for CSWAP !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine cswap ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZSWAP !> See also: [[mfi_swap]], [[f77_swap]]. pure subroutine zswap ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for AXPY. !> Supports s, d, c, z. !> See also: [[mfi_axpy]], [[saxpy]],[[daxpy]],[[caxpy]],[[zaxpy]]. interface f77_axpy !> Original interface for SAXPY !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine saxpy ( n , a , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( in ) :: a real ( REAL32 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DAXPY !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine daxpy ( n , a , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( in ) :: a real ( REAL64 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for CAXPY !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine caxpy ( n , a , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: a complex ( REAL32 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZAXPY !> See also: [[mfi_axpy]], [[f77_axpy]]. pure subroutine zaxpy ( n , a , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: a complex ( REAL64 ), intent ( inout ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for DOT. !> Supports s, d. !> See also: [[mfi_dot]], [[sdot]],[[ddot]]. interface f77_dot !> Original interface for SDOT !> See also: [[mfi_dot]], [[f77_dot]]. pure function sdot ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ) :: sdot real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function !> Original interface for DDOT !> See also: [[mfi_dot]], [[f77_dot]]. pure function ddot ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ) :: ddot real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function end interface !> Generic old style interface for DOTC. !> Supports c, z. !> See also: [[mfi_dotc]], [[cdotc]],[[zdotc]]. interface f77_dotc !> Original interface for CDOTC !> See also: [[mfi_dotc]], [[f77_dotc]]. pure function cdotc ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ) :: cdotc complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function !> Original interface for ZDOTC !> See also: [[mfi_dotc]], [[f77_dotc]]. pure function zdotc ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ) :: zdotc complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function end interface !> Generic old style interface for DOTU. !> Supports c, z. !> See also: [[mfi_dotu]], [[cdotu]],[[zdotu]]. interface f77_dotu !> Original interface for CDOTU !> See also: [[mfi_dotu]], [[f77_dotu]]. pure function cdotu ( n , x , incx , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ) :: cdotu complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function !> Original interface for ZDOTU !> See also: [[mfi_dotu]], [[f77_dotu]]. pure function zdotu ( n , x , incx , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ) :: zdotu complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function end interface !> Generic old style interface for ASUM. !> Supports s, d, sc, dz. !> See also: [[mfi_asum]], [[sasum]],[[dasum]],[[scasum]],[[dzasum]]. interface f77_asum !> Original interface for SASUM !> See also: [[mfi_asum]], [[f77_asum]]. pure function sasum ( n , x , incx ) import :: REAL32 real ( REAL32 ) :: sasum real ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function !> Original interface for DASUM !> See also: [[mfi_asum]], [[f77_asum]]. pure function dasum ( n , x , incx ) import :: REAL64 real ( REAL64 ) :: dasum real ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function !> Original interface for SCASUM !> See also: [[mfi_asum]], [[f77_asum]]. pure function scasum ( n , x , incx ) import :: REAL32 real ( REAL32 ) :: scasum complex ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function !> Original interface for DZASUM !> See also: [[mfi_asum]], [[f77_asum]]. pure function dzasum ( n , x , incx ) import :: REAL64 real ( REAL64 ) :: dzasum complex ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function end interface !> Generic old style interface for NRM2. !> Supports s, d, sc, dz. !> See also: [[mfi_nrm2]], [[snrm2]],[[dnrm2]],[[scnrm2]],[[dznrm2]]. interface f77_nrm2 !> Original interface for SNRM2 !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function snrm2 ( n , x , incx ) import :: REAL32 real ( REAL32 ) :: snrm2 real ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function !> Original interface for DNRM2 !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function dnrm2 ( n , x , incx ) import :: REAL64 real ( REAL64 ) :: dnrm2 real ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function !> Original interface for SCNRM2 !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function scnrm2 ( n , x , incx ) import :: REAL32 real ( REAL32 ) :: scnrm2 complex ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function !> Original interface for DZNRM2 !> See also: [[mfi_nrm2]], [[f77_nrm2]]. pure function dznrm2 ( n , x , incx ) import :: REAL64 real ( REAL64 ) :: dznrm2 complex ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx end function end interface !> Generic old style interface for ROT. !> Supports s, d, c, z, cs, zd. !> See also: [[mfi_rot]], [[srot]],[[drot]],[[crot]],[[zrot]],[[csrot]],[[zdrot]]. interface f77_rot !> Original interface for SROT !> See also: [[mfi_rot]], [[f77_rot]]. !> SROT applies a plane rotation. pure subroutine srot ( n , x , incx , y , incy , c , s ) import :: REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy real ( REAL32 ), intent ( in ) :: c real ( REAL32 ), intent ( in ) :: s end subroutine !> Original interface for DROT !> See also: [[mfi_rot]], [[f77_rot]]. !> DROT applies a plane rotation. pure subroutine drot ( n , x , incx , y , incy , c , s ) import :: REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy real ( REAL64 ), intent ( in ) :: c real ( REAL64 ), intent ( in ) :: s end subroutine !> Original interface for CROT !> See also: [[mfi_rot]], [[f77_rot]]. !> CROT applies a plane rotation. pure subroutine crot ( n , x , incx , y , incy , c , s ) import :: REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy real ( REAL32 ), intent ( in ) :: c complex ( REAL32 ), intent ( in ) :: s end subroutine !> Original interface for ZROT !> See also: [[mfi_rot]], [[f77_rot]]. !> ZROT applies a plane rotation. pure subroutine zrot ( n , x , incx , y , incy , c , s ) import :: REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy real ( REAL64 ), intent ( in ) :: c complex ( REAL64 ), intent ( in ) :: s end subroutine !> Original interface for CSROT !> See also: [[mfi_rot]], [[f77_rot]]. !> CSROT applies a plane rotation. pure subroutine csrot ( n , x , incx , y , incy , c , s ) import :: REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy real ( REAL32 ), intent ( in ) :: c real ( REAL32 ), intent ( in ) :: s end subroutine !> Original interface for ZDROT !> See also: [[mfi_rot]], [[f77_rot]]. !> ZDROT applies a plane rotation. pure subroutine zdrot ( n , x , incx , y , incy , c , s ) import :: REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy real ( REAL64 ), intent ( in ) :: c real ( REAL64 ), intent ( in ) :: s end subroutine end interface !> Generic old style interface for ROTG. !> Supports s, d, c, z. !> See also: [[mfi_rotg]], [[srotg]],[[drotg]],[[crotg]],[[zrotg]]. interface f77_rotg !> Original interface for SROTG !> See also: [[mfi_rotg]], [[f77_rotg]]. !>srotg generates a Givens rotation with real cosine and complex sine: !>``` !> [  c  s ] [ a ] = [ r ] !> [ -s  c ] [ b ]   [ 0 ] !>``` !> satisfying `c**2 + s**2 = 1`. pure subroutine srotg ( a , b , c , s ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a real ( REAL32 ), intent ( inout ) :: b real ( REAL32 ), intent ( out ) :: c real ( REAL32 ), intent ( out ) :: s end subroutine !> Original interface for DROTG !> See also: [[mfi_rotg]], [[f77_rotg]]. !>drotg generates a Givens rotation with real cosine and complex sine: !>``` !> [  c  s ] [ a ] = [ r ] !> [ -s  c ] [ b ]   [ 0 ] !>``` !> satisfying `c**2 + s**2 = 1`. pure subroutine drotg ( a , b , c , s ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a real ( REAL64 ), intent ( inout ) :: b real ( REAL64 ), intent ( out ) :: c real ( REAL64 ), intent ( out ) :: s end subroutine !> Original interface for CROTG !> See also: [[mfi_rotg]], [[f77_rotg]]. !>crotg generates a Givens rotation with real cosine and complex sine: !>``` !>  [  c         s ] [ a ] = [ r ] !>  [ -conjg(s)  c ] [ b ]   [ 0 ] !>``` !> where c is real, s is complex, and `c**2 + conjg(s)*s = 1`. pure subroutine crotg ( a , b , c , s ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a complex ( REAL32 ), intent ( inout ) :: b real ( REAL32 ), intent ( out ) :: c complex ( REAL32 ), intent ( out ) :: s end subroutine !> Original interface for ZROTG !> See also: [[mfi_rotg]], [[f77_rotg]]. !>zrotg generates a Givens rotation with real cosine and complex sine: !>``` !>  [  c         s ] [ a ] = [ r ] !>  [ -conjg(s)  c ] [ b ]   [ 0 ] !>``` !> where c is real, s is complex, and `c**2 + conjg(s)*s = 1`. pure subroutine zrotg ( a , b , c , s ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a complex ( REAL64 ), intent ( inout ) :: b real ( REAL64 ), intent ( out ) :: c complex ( REAL64 ), intent ( out ) :: s end subroutine end interface !> Generic old style interface for ROTM. !> Supports s, d. !> See also: [[mfi_rotm]], [[srotm]],[[drotm]]. interface f77_rotm !> Original interface for SROTM !> See also: [[mfi_rotm]], [[f77_rotm]]. pure subroutine srotm ( n , x , incx , y , incy , param ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) real ( REAL32 ), intent ( in ) :: param ( 5 ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DROTM !> See also: [[mfi_rotm]], [[f77_rotm]]. pure subroutine drotm ( n , x , incx , y , incy , param ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) real ( REAL64 ), intent ( in ) :: param ( 5 ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for ROTMG. !> Supports s, d. !> See also: [[mfi_rotmg]], [[srotmg]],[[drotmg]]. interface f77_rotmg !> Original interface for SROTMG !> See also: [[mfi_rotmg]], [[f77_rotmg]]. pure subroutine srotmg ( d1 , d2 , x1 , y1 , param ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: y1 real ( REAL32 ), intent ( out ) :: param ( 5 ) real ( REAL32 ), intent ( inout ) :: d1 real ( REAL32 ), intent ( inout ) :: d2 real ( REAL32 ), intent ( inout ) :: x1 end subroutine !> Original interface for DROTMG !> See also: [[mfi_rotmg]], [[f77_rotmg]]. pure subroutine drotmg ( d1 , d2 , x1 , y1 , param ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: y1 real ( REAL64 ), intent ( out ) :: param ( 5 ) real ( REAL64 ), intent ( inout ) :: d1 real ( REAL64 ), intent ( inout ) :: d2 real ( REAL64 ), intent ( inout ) :: x1 end subroutine end interface !> Generic old style interface for SCAL. !> Supports s, d, c, z, cs, zd. !> See also: [[mfi_scal]], [[sscal]],[[dscal]],[[cscal]],[[zscal]],[[csscal]],[[zdscal]]. interface f77_scal !> Original interface for SSCAL !> See also: [[mfi_scal]], [[f77_scal]]. !> SSCAL scales a vector by a constant. pure subroutine sscal ( n , a , x , incx ) import :: REAL32 real ( REAL32 ), intent ( inout ) :: x ( * ) real ( REAL32 ), intent ( in ) :: a integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for DSCAL !> See also: [[mfi_scal]], [[f77_scal]]. !> DSCAL scales a vector by a constant. pure subroutine dscal ( n , a , x , incx ) import :: REAL64 real ( REAL64 ), intent ( inout ) :: x ( * ) real ( REAL64 ), intent ( in ) :: a integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for CSCAL !> See also: [[mfi_scal]], [[f77_scal]]. !> CSCAL scales a vector by a constant. pure subroutine cscal ( n , a , x , incx ) import :: REAL32 complex ( REAL32 ), intent ( inout ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: a integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for ZSCAL !> See also: [[mfi_scal]], [[f77_scal]]. !> ZSCAL scales a vector by a constant. pure subroutine zscal ( n , a , x , incx ) import :: REAL64 complex ( REAL64 ), intent ( inout ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: a integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for CSSCAL !> See also: [[mfi_scal]], [[f77_scal]]. !> CSSCAL scales a vector by a constant. pure subroutine csscal ( n , a , x , incx ) import :: REAL32 complex ( REAL32 ), intent ( inout ) :: x ( * ) real ( REAL32 ), intent ( in ) :: a integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for ZDSCAL !> See also: [[mfi_scal]], [[f77_scal]]. !> ZDSCAL scales a vector by a constant. pure subroutine zdscal ( n , a , x , incx ) import :: REAL64 complex ( REAL64 ), intent ( inout ) :: x ( * ) real ( REAL64 ), intent ( in ) :: a integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for GBMV. !> Supports s, d, c, z. !> See also: [[mfi_gbmv]], [[sgbmv]],[[dgbmv]],[[cgbmv]],[[zgbmv]]. interface f77_gbmv !> Original interface for SGBMV !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine sgbmv ( trans , m , n , kl , ku , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: kl integer , intent ( in ) :: ku integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DGBMV !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine dgbmv ( trans , m , n , kl , ku , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: kl integer , intent ( in ) :: ku integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for CGBMV !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine cgbmv ( trans , m , n , kl , ku , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: kl integer , intent ( in ) :: ku integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZGBMV !> See also: [[mfi_gbmv]], [[f77_gbmv]]. pure subroutine zgbmv ( trans , m , n , kl , ku , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: kl integer , intent ( in ) :: ku integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for GEMV. !> Supports s, d, c, z. !> See also: [[mfi_gemv]], [[sgemv]],[[dgemv]],[[cgemv]],[[zgemv]]. interface f77_gemv !> Original interface for SGEMV !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine sgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DGEMV !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine dgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for CGEMV !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine cgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZGEMV !> See also: [[mfi_gemv]], [[f77_gemv]]. pure subroutine zgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: trans complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for GER. !> Supports s, d. !> See also: [[mfi_ger]], [[sger]],[[dger]]. interface f77_ger !> Original interface for SGER !> See also: [[mfi_ger]], [[f77_ger]]. pure subroutine sger ( m , n , alpha , x , incx , y , incy , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( in ) :: y ( * ) real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DGER !> See also: [[mfi_ger]], [[f77_ger]]. pure subroutine dger ( m , n , alpha , x , incx , y , incy , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( in ) :: y ( * ) real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for GERC. !> Supports c, z. !> See also: [[mfi_gerc]], [[cgerc]],[[zgerc]]. interface f77_gerc !> Original interface for CGERC !> See also: [[mfi_gerc]], [[f77_gerc]]. pure subroutine cgerc ( m , n , alpha , x , incx , y , incy , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZGERC !> See also: [[mfi_gerc]], [[f77_gerc]]. pure subroutine zgerc ( m , n , alpha , x , incx , y , incy , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for GERU. !> Supports c, z. !> See also: [[mfi_geru]], [[cgeru]],[[zgeru]]. interface f77_geru !> Original interface for CGERU !> See also: [[mfi_geru]], [[f77_geru]]. pure subroutine cgeru ( m , n , alpha , x , incx , y , incy , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZGERU !> See also: [[mfi_geru]], [[f77_geru]]. pure subroutine zgeru ( m , n , alpha , x , incx , y , incy , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for HBMV. !> Supports c, z. !> See also: [[mfi_hbmv]], [[chbmv]],[[zhbmv]]. interface f77_hbmv !> Original interface for CHBMV !> See also: [[mfi_hbmv]], [[f77_hbmv]]. pure subroutine chbmv ( uplo , n , k , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZHBMV !> See also: [[mfi_hbmv]], [[f77_hbmv]]. pure subroutine zhbmv ( uplo , n , k , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for HEMV. !> Supports c, z. !> See also: [[mfi_hemv]], [[chemv]],[[zhemv]]. interface f77_hemv !> Original interface for CHEMV !> See also: [[mfi_hemv]], [[f77_hemv]]. pure subroutine chemv ( uplo , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZHEMV !> See also: [[mfi_hemv]], [[f77_hemv]]. pure subroutine zhemv ( uplo , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for HER. !> Supports c, z. !> See also: [[mfi_her]], [[cher]],[[zher]]. interface f77_her !> Original interface for CHER !> See also: [[mfi_her]], [[f77_her]]. pure subroutine cher ( uplo , n , alpha , x , incx , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo real ( wp ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for ZHER !> See also: [[mfi_her]], [[f77_her]]. pure subroutine zher ( uplo , n , alpha , x , incx , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo real ( wp ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for HER2. !> Supports c, z. !> See also: [[mfi_her2]], [[cher2]],[[zher2]]. interface f77_her2 !> Original interface for CHER2 !> See also: [[mfi_her2]], [[f77_her2]]. pure subroutine cher2 ( uplo , n , alpha , x , incx , y , incy , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZHER2 !> See also: [[mfi_her2]], [[f77_her2]]. pure subroutine zher2 ( uplo , n , alpha , x , incx , y , incy , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for HPMV. !> Supports c, z. !> See also: [[mfi_hpmv]], [[chpmv]],[[zhpmv]]. interface f77_hpmv !> Original interface for CHPMV !> See also: [[mfi_hpmv]], [[f77_hpmv]]. pure subroutine chpmv ( uplo , n , alpha , ap , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: ap ( * ) complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZHPMV !> See also: [[mfi_hpmv]], [[f77_hpmv]]. pure subroutine zhpmv ( uplo , n , alpha , ap , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: ap ( * ) complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for HPR. !> Supports c, z. !> See also: [[mfi_hpr]], [[chpr]],[[zhpr]]. interface f77_hpr !> Original interface for CHPR !> See also: [[mfi_hpr]], [[f77_hpr]]. pure subroutine chpr ( uplo , n , alpha , x , incx , ap ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo real ( wp ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for ZHPR !> See also: [[mfi_hpr]], [[f77_hpr]]. pure subroutine zhpr ( uplo , n , alpha , x , incx , ap ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo real ( wp ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for HPR2. !> Supports c, z. !> See also: [[mfi_hpr2]], [[chpr2]],[[zhpr2]]. interface f77_hpr2 !> Original interface for CHPR2 !> See also: [[mfi_hpr2]], [[f77_hpr2]]. pure subroutine chpr2 ( uplo , n , alpha , x , incx , y , incy , ap ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: x ( * ) complex ( REAL32 ), intent ( in ) :: y ( * ) complex ( REAL32 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for ZHPR2 !> See also: [[mfi_hpr2]], [[f77_hpr2]]. pure subroutine zhpr2 ( uplo , n , alpha , x , incx , y , incy , ap ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: x ( * ) complex ( REAL64 ), intent ( in ) :: y ( * ) complex ( REAL64 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for SBMV. !> Supports s, d. !> See also: [[mfi_sbmv]], [[ssbmv]],[[dsbmv]]. interface f77_sbmv !> Original interface for SSBMV !> See also: [[mfi_sbmv]], [[f77_sbmv]]. pure subroutine ssbmv ( uplo , n , k , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DSBMV !> See also: [[mfi_sbmv]], [[f77_sbmv]]. pure subroutine dsbmv ( uplo , n , k , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for SPMV. !> Supports s, d. !> See also: [[mfi_spmv]], [[sspmv]],[[dspmv]]. interface f77_spmv !> Original interface for SSPMV !> See also: [[mfi_spmv]], [[f77_spmv]]. pure subroutine sspmv ( uplo , n , alpha , ap , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: ap ( * ) real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DSPMV !> See also: [[mfi_spmv]], [[f77_spmv]]. pure subroutine dspmv ( uplo , n , alpha , ap , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: ap ( * ) real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for SPR. !> Supports s, d. !> See also: [[mfi_spr]], [[sspr]],[[dspr]]. interface f77_spr !> Original interface for SSPR !> See also: [[mfi_spr]], [[f77_spr]]. pure subroutine sspr ( uplo , n , alpha , x , incx , ap ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for DSPR !> See also: [[mfi_spr]], [[f77_spr]]. pure subroutine dspr ( uplo , n , alpha , x , incx , ap ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for SPR2. !> Supports s, d. !> See also: [[mfi_spr2]], [[sspr2]],[[dspr2]]. interface f77_spr2 !> Original interface for SSPR2 !> See also: [[mfi_spr2]], [[f77_spr2]]. pure subroutine sspr2 ( uplo , n , alpha , x , incx , y , incy , ap ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( in ) :: y ( * ) real ( REAL32 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DSPR2 !> See also: [[mfi_spr2]], [[f77_spr2]]. pure subroutine dspr2 ( uplo , n , alpha , x , incx , y , incy , ap ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( in ) :: y ( * ) real ( REAL64 ), intent ( inout ) :: ap ( * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for SYMV. !> Supports s, d. !> See also: [[mfi_symv]], [[ssymv]],[[dsymv]]. interface f77_symv !> Original interface for SSYMV !> See also: [[mfi_symv]], [[f77_symv]]. pure subroutine ssymv ( uplo , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DSYMV !> See also: [[mfi_symv]], [[f77_symv]]. pure subroutine dsymv ( uplo , n , alpha , a , lda , x , incx , beta , y , incy ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: y ( * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for SYR. !> Supports s, d. !> See also: [[mfi_syr]], [[ssyr]],[[dsyr]]. interface f77_syr !> Original interface for SSYR !> See also: [[mfi_syr]], [[f77_syr]]. pure subroutine ssyr ( uplo , n , alpha , x , incx , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for DSYR !> See also: [[mfi_syr]], [[f77_syr]]. pure subroutine dsyr ( uplo , n , alpha , x , incx , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for SYR2. !> Supports s, d. !> See also: [[mfi_syr2]], [[ssyr2]],[[dsyr2]]. interface f77_syr2 !> Original interface for SSYR2 !> See also: [[mfi_syr2]], [[f77_syr2]]. pure subroutine ssyr2 ( uplo , n , alpha , x , incx , y , incy , a , lda ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: x ( * ) real ( REAL32 ), intent ( in ) :: y ( * ) real ( REAL32 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine !> Original interface for DSYR2 !> See also: [[mfi_syr2]], [[f77_syr2]]. pure subroutine dsyr2 ( uplo , n , alpha , x , incx , y , incy , a , lda ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: x ( * ) real ( REAL64 ), intent ( in ) :: y ( * ) real ( REAL64 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx integer , intent ( in ) :: incy end subroutine end interface !> Generic old style interface for TBMV. !> Supports s, d, c, z. !> See also: [[mfi_tbmv]], [[stbmv]],[[dtbmv]],[[ctbmv]],[[ztbmv]]. interface f77_tbmv !> Original interface for STBMV !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine stbmv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for DTBMV !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine dtbmv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for CTBMV !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine ctbmv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for ZTBMV !> See also: [[mfi_tbmv]], [[f77_tbmv]]. pure subroutine ztbmv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for TBSV. !> Supports s, d, c, z. !> See also: [[mfi_tbsv]], [[stbsv]],[[dtbsv]],[[ctbsv]],[[ztbsv]]. interface f77_tbsv !> Original interface for STBSV !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine stbsv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for DTBSV !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine dtbsv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for CTBSV !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine ctbsv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for ZTBSV !> See also: [[mfi_tbsv]], [[f77_tbsv]]. pure subroutine ztbsv ( uplo , trans , diag , n , k , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for TPMV. !> Supports s, d, c, z. !> See also: [[mfi_tpmv]], [[stpmv]],[[dtpmv]],[[ctpmv]],[[ztpmv]]. interface f77_tpmv !> Original interface for STPMV !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine stpmv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: ap ( * ) real ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for DTPMV !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine dtpmv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: ap ( * ) real ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for CTPMV !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine ctpmv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: ap ( * ) complex ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for ZTPMV !> See also: [[mfi_tpmv]], [[f77_tpmv]]. pure subroutine ztpmv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: ap ( * ) complex ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for TPSV. !> Supports s, d, c, z. !> See also: [[mfi_tpsv]], [[stpsv]],[[dtpsv]],[[ctpsv]],[[ztpsv]]. interface f77_tpsv !> Original interface for STPSV !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine stpsv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: ap ( * ) real ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for DTPSV !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine dtpsv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: ap ( * ) real ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for CTPSV !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine ctpsv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: ap ( * ) complex ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine !> Original interface for ZTPSV !> See also: [[mfi_tpsv]], [[f77_tpsv]]. pure subroutine ztpsv ( uplo , trans , diag , n , ap , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: ap ( * ) complex ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for TRMV. !> Supports s, d, c, z. !> See also: [[mfi_trmv]], [[strmv]],[[dtrmv]],[[ctrmv]],[[ztrmv]]. interface f77_trmv !> Original interface for STRMV !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine strmv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for DTRMV !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine dtrmv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for CTRMV !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine ctrmv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for ZTRMV !> See also: [[mfi_trmv]], [[f77_trmv]]. pure subroutine ztrmv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for TRSV. !> Supports s, d, c, z. !> See also: [[mfi_trsv]], [[strsv]],[[dtrsv]],[[ctrsv]],[[ztrsv]]. interface f77_trsv !> Original interface for STRSV !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine strsv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for DTRSV !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine dtrsv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for CTRSV !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine ctrsv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine !> Original interface for ZTRSV !> See also: [[mfi_trsv]], [[f77_trsv]]. pure subroutine ztrsv ( uplo , trans , diag , n , a , lda , x , incx ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: x ( * ) character , intent ( in ) :: uplo character , intent ( in ) :: trans character , intent ( in ) :: diag integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: incx end subroutine end interface !> Generic old style interface for GEMM. !> Supports s, d, c, z. !> See also: [[mfi_gemm]], [[sgemm]],[[dgemm]],[[cgemm]],[[zgemm]]. interface f77_gemm !> Original interface for SGEMM !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine sgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: b ( ldb , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: transa character , intent ( in ) :: transb real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for DGEMM !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine dgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: b ( ldb , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: transa character , intent ( in ) :: transb real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for CGEMM !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine cgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: b ( ldb , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: transa character , intent ( in ) :: transb complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for ZGEMM !> See also: [[mfi_gemm]], [[f77_gemm]]. pure subroutine zgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: b ( ldb , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: transa character , intent ( in ) :: transb complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for HEMM. !> Supports c, z. !> See also: [[mfi_hemm]], [[chemm]],[[zhemm]]. interface f77_hemm !> Original interface for CHEMM !> See also: [[mfi_hemm]], [[f77_hemm]]. pure subroutine chemm ( side , uplo , m , n , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: b ( ldb , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha complex ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for ZHEMM !> See also: [[mfi_hemm]], [[f77_hemm]]. pure subroutine zhemm ( side , uplo , m , n , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: b ( ldb , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha complex ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for HERK. !> Supports c, z. !> See also: [[mfi_herk]], [[cherk]],[[zherk]]. interface f77_herk !> Original interface for CHERK !> See also: [[mfi_herk]], [[f77_herk]]. pure subroutine cherk ( uplo , trans , n , k , alpha , a , lda , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo real ( wp ), intent ( in ) :: alpha real ( wp ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc end subroutine !> Original interface for ZHERK !> See also: [[mfi_herk]], [[f77_herk]]. pure subroutine zherk ( uplo , trans , n , k , alpha , a , lda , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo real ( wp ), intent ( in ) :: alpha real ( wp ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for HER2K. !> Supports c, z. !> See also: [[mfi_her2k]], [[cher2k]],[[zher2k]]. interface f77_her2k !> Original interface for CHER2K !> See also: [[mfi_her2k]], [[f77_her2k]]. pure subroutine cher2k ( uplo , trans , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: b ( ldb , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo complex ( REAL32 ), intent ( in ) :: alpha real ( wp ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for ZHER2K !> See also: [[mfi_her2k]], [[f77_her2k]]. pure subroutine zher2k ( uplo , trans , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: b ( ldb , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo complex ( REAL64 ), intent ( in ) :: alpha real ( wp ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for SYMM. !> Supports s, d. !> See also: [[mfi_symm]], [[ssymm]],[[dsymm]]. interface f77_symm !> Original interface for SSYMM !> See also: [[mfi_symm]], [[f77_symm]]. pure subroutine ssymm ( side , uplo , m , n , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: b ( ldb , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for DSYMM !> See also: [[mfi_symm]], [[f77_symm]]. pure subroutine dsymm ( side , uplo , m , n , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: b ( ldb , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for SYRK. !> Supports s, d. !> See also: [[mfi_syrk]], [[ssyrk]],[[dsyrk]]. interface f77_syrk !> Original interface for SSYRK !> See also: [[mfi_syrk]], [[f77_syrk]]. pure subroutine ssyrk ( uplo , trans , n , k , alpha , a , lda , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc end subroutine !> Original interface for DSYRK !> See also: [[mfi_syrk]], [[f77_syrk]]. pure subroutine dsyrk ( uplo , trans , n , k , alpha , a , lda , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for SYR2K. !> Supports s, d. !> See also: [[mfi_syr2k]], [[ssyr2k]],[[dsyr2k]]. interface f77_syr2k !> Original interface for SSYR2K !> See also: [[mfi_syr2k]], [[f77_syr2k]]. pure subroutine ssyr2k ( uplo , trans , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: b ( ldb , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo real ( REAL32 ), intent ( in ) :: alpha real ( REAL32 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine !> Original interface for DSYR2K !> See also: [[mfi_syr2k]], [[f77_syr2k]]. pure subroutine dsyr2k ( uplo , trans , n , k , alpha , a , lda , b , ldb , beta , c , ldc ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: b ( ldb , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) character , intent ( in ) :: trans character , intent ( in ) :: uplo real ( REAL64 ), intent ( in ) :: alpha real ( REAL64 ), intent ( in ) :: beta integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: ldc end subroutine end interface !> Generic old style interface for TRMM. !> Supports s, d, c, z. !> See also: [[mfi_trmm]], [[strmm]],[[dtrmm]],[[ctrmm]],[[ztrmm]]. interface f77_trmm !> Original interface for STRMM !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine strmm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for DTRMM !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine dtrmm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for CTRMM !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine ctrmm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag complex ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for ZTRMM !> See also: [[mfi_trmm]], [[f77_trmm]]. pure subroutine ztrmm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag complex ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine end interface !> Generic old style interface for TRSM. !> Supports s, d, c, z. !> See also: [[mfi_trsm]], [[strsm]],[[dtrsm]],[[ctrsm]],[[ztrsm]]. interface f77_trsm !> Original interface for STRSM !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine strsm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag real ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for DTRSM !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine dtrsm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag real ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for CTRSM !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine ctrsm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag complex ( REAL32 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for ZTRSM !> See also: [[mfi_trsm]], [[f77_trsm]]. pure subroutine ztrsm ( side , uplo , transa , diag , m , n , alpha , a , lda , b , ldb ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: side character , intent ( in ) :: uplo character , intent ( in ) :: transa character , intent ( in ) :: diag complex ( REAL64 ), intent ( in ) :: alpha integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine end interface !> ?lamch supports s, d. See [[mfi_lamch]] for the modern version. interface !> SLAMCH determines single precision machine parameters. pure real ( REAL32 ) function slamch ( cmach ) import :: REAL32 character , intent ( in ) :: cmach end function !> DLAMCH determines double precision machine parameters. pure real ( REAL64 ) function dlamch ( cmach ) import :: REAL64 character , intent ( in ) :: cmach end function end interface interface !> Compute the inner product of two vectors with extended !> precision accumulation. !> !> Returns S.P. result with dot product accumulated in D.P. !> SDSDOT = SB + sum for I = 0 to N-1 of SX(LX+I*INCX)*SY(LY+I*INCY), !> where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is !> defined in a similar way using INCY. pure function sdsdot ( n , sb , sx , incx , sy , incy ) import :: REAL32 integer , parameter :: wp = REAL32 real ( wp ) :: sdsdot real ( wp ), intent ( in ) :: sx ( * ) real ( wp ), intent ( in ) :: sy ( * ) real ( wp ), intent ( in ) :: sb integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function !> Compute the inner product of two vectors with extended !> precision accumulation and result. !> !> Returns D.P. dot product accumulated in D.P., for S.P. SX and SY !> DSDOT = sum for I = 0 to N-1 of  SX(LX+I*INCX) * SY(LY+I*INCY), !> where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is !> defined in a similar way using INCY. pure function dsdot ( n , sx , incx , sy , incy ) import :: REAL32 , REAL64 integer , parameter :: sp = REAL32 integer , parameter :: dp = REAL64 real ( dp ) :: dsdot real ( sp ), intent ( in ) :: sx ( * ) real ( sp ), intent ( in ) :: sy ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx integer , intent ( in ) :: incy end function end interface ! Extensions ! BLAS Level 1 - Utils / Extensions ! Implement the blas extensions in interface f77_iamax procedure :: isamax procedure :: idamax procedure :: icamax procedure :: izamax end interface interface f77_iamin procedure :: isamin procedure :: idamin procedure :: icamin procedure :: izamin end interface contains pure function isamax ( n , x , incx ) integer , parameter :: wp = REAL32 integer :: isamax real ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then isamax = 0 return end if isamax = minloc ( x ( 1 : n : incx ), dim = 1 ) end function pure function idamax ( n , x , incx ) integer , parameter :: wp = REAL64 integer :: idamax real ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then idamax = 0 return end if idamax = minloc ( x ( 1 : n : incx ), dim = 1 ) end function pure function icamax ( n , x , incx ) integer , parameter :: wp = REAL32 integer :: icamax complex ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then icamax = 0 return end if icamax = minloc ( abs ( real ( x ( 1 : n : incx ))) + abs ( aimag ( x ( 1 : n : incx ))), dim = 1 ) end function pure function izamax ( n , x , incx ) integer , parameter :: wp = REAL64 integer :: izamax complex ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then izamax = 0 return end if izamax = minloc ( abs ( real ( x ( 1 : n : incx ))) + abs ( aimag ( x ( 1 : n : incx ))), dim = 1 ) end function pure function isamin ( n , x , incx ) integer , parameter :: wp = REAL32 integer :: isamin real ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then isamin = 0 return end if isamin = minloc ( x ( 1 : n : incx ), dim = 1 ) end function pure function idamin ( n , x , incx ) integer , parameter :: wp = REAL64 integer :: idamin real ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then idamin = 0 return end if idamin = minloc ( x ( 1 : n : incx ), dim = 1 ) end function pure function icamin ( n , x , incx ) integer , parameter :: wp = REAL32 integer :: icamin complex ( REAL32 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then icamin = 0 return end if icamin = minloc ( abs ( real ( x ( 1 : n : incx ))) + abs ( aimag ( x ( 1 : n : incx ))), dim = 1 ) end function pure function izamin ( n , x , incx ) integer , parameter :: wp = REAL64 integer :: izamin complex ( REAL64 ), intent ( in ) :: x ( * ) integer , intent ( in ) :: n integer , intent ( in ) :: incx !If either n or incx are not positive, the routine returns 0. if ( n <= 0 . or . incx <= 0 ) then izamin = 0 return end if izamin = minloc ( abs ( real ( x ( 1 : n : incx ))) + abs ( aimag ( x ( 1 : n : incx ))), dim = 1 ) end function end module","tags":"","loc":"sourcefile/blas.f90~2.html"},{"title":"lapack.f90 – MFI - Modern Fortran Interfaces","text":"Source Code !> Modern fortran interfaces for LAPACK module mfi_lapack use iso_fortran_env use f77_lapack use f77_lapack , only : mfi_lartg => f77_lartg implicit none !> Generic modern interface for GEQRF. !> Supports s, d, c, z. !> See also: !> [[f77_geqrf:sgeqrf]],[[f77_geqrf:dgeqrf]],[[f77_geqrf:cgeqrf]],[[f77_geqrf:zgeqrf]]. interface mfi_geqrf module procedure :: mfi_sgeqrf module procedure :: mfi_dgeqrf module procedure :: mfi_cgeqrf module procedure :: mfi_zgeqrf end interface !> Generic modern interface for GERQF. !> Supports s, d, c, z. !> See also: !> [[f77_gerqf:sgerqf]],[[f77_gerqf:dgerqf]],[[f77_gerqf:cgerqf]],[[f77_gerqf:zgerqf]]. interface mfi_gerqf module procedure :: mfi_sgerqf module procedure :: mfi_dgerqf module procedure :: mfi_cgerqf module procedure :: mfi_zgerqf end interface !> Generic modern interface for GETRF. !> Supports s, d, c, z. !> See also: !> [[f77_getrf:sgetrf]],[[f77_getrf:dgetrf]],[[f77_getrf:cgetrf]],[[f77_getrf:zgetrf]]. interface mfi_getrf module procedure :: mfi_sgetrf module procedure :: mfi_dgetrf module procedure :: mfi_cgetrf module procedure :: mfi_zgetrf end interface !> Generic modern interface for GETRI. !> Supports s, d, c, z. !> See also: !> [[f77_getri:sgetri]],[[f77_getri:dgetri]],[[f77_getri:cgetri]],[[f77_getri:zgetri]]. interface mfi_getri module procedure :: mfi_sgetri module procedure :: mfi_dgetri module procedure :: mfi_cgetri module procedure :: mfi_zgetri end interface !> Generic modern interface for GETRS. !> Supports s, d, c, z. !> See also: !> [[f77_getrs:sgetrs]],[[f77_getrs:dgetrs]],[[f77_getrs:cgetrs]],[[f77_getrs:zgetrs]]. interface mfi_getrs module procedure :: mfi_sgetrs module procedure :: mfi_dgetrs module procedure :: mfi_cgetrs module procedure :: mfi_zgetrs end interface !> Generic modern interface for HETRF. !> Supports c, z. !> See also: !> [[f77_hetrf:chetrf]],[[f77_hetrf:zhetrf]]. interface mfi_hetrf module procedure :: mfi_chetrf module procedure :: mfi_zhetrf end interface !> Generic modern interface for HEGV. !> Supports c, z. !> See also: !> [[f77_hegv:chegv]],[[f77_hegv:zhegv]]. interface mfi_hegv module procedure :: mfi_chegv module procedure :: mfi_zhegv end interface !> Generic modern interface for HEEVD. !> Supports c, z. !> See also: !> [[f77_heevd:cheevd]],[[f77_heevd:zheevd]]. interface mfi_heevd module procedure :: mfi_cheevd module procedure :: mfi_zheevd end interface !> Generic modern interface for GESVD. !> Supports s, d, c, z. !> See also: !> [[f77_gesvd:sgesvd]],[[f77_gesvd:dgesvd]],[[f77_gesvd:cgesvd]],[[f77_gesvd:zgesvd]]. interface mfi_gesvd module procedure :: mfi_sgesvd module procedure :: mfi_dgesvd module procedure :: mfi_cgesvd module procedure :: mfi_zgesvd end interface !> Generic modern interface for POTRF. !> Supports s, d, c, z. !> See also: !> [[f77_potrf:spotrf]],[[f77_potrf:dpotrf]],[[f77_potrf:cpotrf]],[[f77_potrf:zpotrf]]. interface mfi_potrf module procedure :: mfi_spotrf module procedure :: mfi_dpotrf module procedure :: mfi_cpotrf module procedure :: mfi_zpotrf end interface !> Generic modern interface for POTRI. !> Supports s, d, c, z. !> See also: !> [[f77_potri:spotri]],[[f77_potri:dpotri]],[[f77_potri:cpotri]],[[f77_potri:zpotri]]. interface mfi_potri module procedure :: mfi_spotri module procedure :: mfi_dpotri module procedure :: mfi_cpotri module procedure :: mfi_zpotri end interface !> Generic modern interface for POTRS. !> Supports s, d, c, z. !> See also: !> [[f77_potrs:spotrs]],[[f77_potrs:dpotrs]],[[f77_potrs:cpotrs]],[[f77_potrs:zpotrs]]. interface mfi_potrs module procedure :: mfi_spotrs module procedure :: mfi_dpotrs module procedure :: mfi_cpotrs module procedure :: mfi_zpotrs end interface !> Generic modern interface for POCON. !> Supports s, d, c, z. !> See also: !> [[f77_pocon:spocon]],[[f77_pocon:dpocon]],[[f77_pocon:cpocon]],[[f77_pocon:zpocon]]. interface mfi_pocon module procedure :: mfi_spocon module procedure :: mfi_dpocon module procedure :: mfi_cpocon module procedure :: mfi_zpocon end interface contains !> Modern interface for [[f77_geqrf:sgeqrf]]. !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine mfi_sgeqrf ( a , tau , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status real ( REAL32 ), pointer :: local_tau (:), work (:) real ( REAL32 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call sgeqrf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call sgeqrf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'sgeqrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_geqrf:dgeqrf]]. !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine mfi_dgeqrf ( a , tau , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status real ( REAL64 ), pointer :: local_tau (:), work (:) real ( REAL64 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call dgeqrf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call dgeqrf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dgeqrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_geqrf:cgeqrf]]. !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine mfi_cgeqrf ( a , tau , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) complex ( REAL32 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status complex ( REAL32 ), pointer :: local_tau (:), work (:) complex ( REAL32 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call cgeqrf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call cgeqrf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cgeqrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_geqrf:zgeqrf]]. !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine mfi_zgeqrf ( a , tau , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) complex ( REAL64 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status complex ( REAL64 ), pointer :: local_tau (:), work (:) complex ( REAL64 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call zgeqrf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call zgeqrf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zgeqrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_gerqf:sgerqf]]. !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine mfi_sgerqf ( a , tau , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status real ( REAL32 ), pointer :: local_tau (:), work (:) real ( REAL32 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call sgerqf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call sgerqf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'sgerqf' , - local_info ) end if end subroutine !> Modern interface for [[f77_gerqf:dgerqf]]. !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine mfi_dgerqf ( a , tau , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status real ( REAL64 ), pointer :: local_tau (:), work (:) real ( REAL64 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call dgerqf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call dgerqf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dgerqf' , - local_info ) end if end subroutine !> Modern interface for [[f77_gerqf:cgerqf]]. !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine mfi_cgerqf ( a , tau , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) complex ( REAL32 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status complex ( REAL32 ), pointer :: local_tau (:), work (:) complex ( REAL32 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call cgerqf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call cgerqf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cgerqf' , - local_info ) end if end subroutine !> Modern interface for [[f77_gerqf:zgerqf]]. !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine mfi_zgerqf ( a , tau , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) complex ( REAL64 ), intent ( out ), optional , target :: tau (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , lwork , allocation_status , deallocation_status complex ( REAL64 ), pointer :: local_tau (:), work (:) complex ( REAL64 ), target :: s_work ( 1 ) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( tau )) then local_tau => tau else allocate ( local_tau ( min ( m , n )), stat = allocation_status ) end if ! Retrieve work array size lwork = - 1 call zgerqf ( m , n , a , lda , local_tau , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call zgerqf ( m , n , a , lda , local_tau , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) ! Error handling 404 continue if (. not . present ( tau )) then deallocate ( local_tau , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zgerqf' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrf:sgetrf]]. !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine mfi_sgetrf ( a , ipiv , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) integer , intent ( out ), optional , target :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , allocation_status , deallocation_status integer , pointer :: local_ipiv (:) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( ipiv )) then local_ipiv => ipiv else allocate ( local_ipiv ( min ( m , n )), stat = allocation_status ) end if if ( allocation_status == 0 ) then call sgetrf ( m , n , a , lda , local_ipiv , local_info ) else local_info = - 1000 end if if (. not . present ( ipiv )) then deallocate ( local_ipiv , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'sgetrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrf:dgetrf]]. !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine mfi_dgetrf ( a , ipiv , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) integer , intent ( out ), optional , target :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , allocation_status , deallocation_status integer , pointer :: local_ipiv (:) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( ipiv )) then local_ipiv => ipiv else allocate ( local_ipiv ( min ( m , n )), stat = allocation_status ) end if if ( allocation_status == 0 ) then call dgetrf ( m , n , a , lda , local_ipiv , local_info ) else local_info = - 1000 end if if (. not . present ( ipiv )) then deallocate ( local_ipiv , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dgetrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrf:cgetrf]]. !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine mfi_cgetrf ( a , ipiv , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) integer , intent ( out ), optional , target :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , allocation_status , deallocation_status integer , pointer :: local_ipiv (:) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( ipiv )) then local_ipiv => ipiv else allocate ( local_ipiv ( min ( m , n )), stat = allocation_status ) end if if ( allocation_status == 0 ) then call cgetrf ( m , n , a , lda , local_ipiv , local_info ) else local_info = - 1000 end if if (. not . present ( ipiv )) then deallocate ( local_ipiv , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cgetrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrf:zgetrf]]. !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine mfi_zgetrf ( a , ipiv , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) integer , intent ( out ), optional , target :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info integer :: m , n , lda , allocation_status , deallocation_status integer , pointer :: local_ipiv (:) lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) allocation_status = 0 if ( present ( ipiv )) then local_ipiv => ipiv else allocate ( local_ipiv ( min ( m , n )), stat = allocation_status ) end if if ( allocation_status == 0 ) then call zgetrf ( m , n , a , lda , local_ipiv , local_info ) else local_info = - 1000 end if if (. not . present ( ipiv )) then deallocate ( local_ipiv , stat = deallocation_status ) end if if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zgetrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_getri:sgetri]]. !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine mfi_sgetri ( a , ipiv , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) integer , intent ( in ) :: ipiv (:) real ( REAL32 ), pointer :: work (:) real ( REAL32 ) :: s_work ( 1 ) integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , lwork , allocation_status , deallocation_status lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) lwork = - 1 call sgetri ( n , a , lda , ipiv , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call sgetri ( n , a , lda , ipiv , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'sgetri' , - local_info ) end if end subroutine !> Modern interface for [[f77_getri:dgetri]]. !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine mfi_dgetri ( a , ipiv , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) integer , intent ( in ) :: ipiv (:) real ( REAL64 ), pointer :: work (:) real ( REAL64 ) :: s_work ( 1 ) integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , lwork , allocation_status , deallocation_status lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) lwork = - 1 call dgetri ( n , a , lda , ipiv , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call dgetri ( n , a , lda , ipiv , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dgetri' , - local_info ) end if end subroutine !> Modern interface for [[f77_getri:cgetri]]. !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine mfi_cgetri ( a , ipiv , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) integer , intent ( in ) :: ipiv (:) complex ( REAL32 ), pointer :: work (:) complex ( REAL32 ) :: s_work ( 1 ) integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , lwork , allocation_status , deallocation_status lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) lwork = - 1 call cgetri ( n , a , lda , ipiv , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call cgetri ( n , a , lda , ipiv , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cgetri' , - local_info ) end if end subroutine !> Modern interface for [[f77_getri:zgetri]]. !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine mfi_zgetri ( a , ipiv , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) integer , intent ( in ) :: ipiv (:) complex ( REAL64 ), pointer :: work (:) complex ( REAL64 ) :: s_work ( 1 ) integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , lwork , allocation_status , deallocation_status lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) lwork = - 1 call zgetri ( n , a , lda , ipiv , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call zgetri ( n , a , lda , ipiv , work , lwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zgetri' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrs:sgetrs]]. !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine mfi_sgetrs ( a , ipiv , b , trans , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: b (:,:) integer , intent ( in ) :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info character , intent ( in ), optional :: trans character :: local_trans integer :: n , nrhs , lda , ldb if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call sgetrs ( local_trans , n , nrhs , a , lda , ipiv , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'sgetrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrs:dgetrs]]. !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine mfi_dgetrs ( a , ipiv , b , trans , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: b (:,:) integer , intent ( in ) :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info character , intent ( in ), optional :: trans character :: local_trans integer :: n , nrhs , lda , ldb if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call dgetrs ( local_trans , n , nrhs , a , lda , ipiv , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dgetrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrs:cgetrs]]. !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine mfi_cgetrs ( a , ipiv , b , trans , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: b (:,:) integer , intent ( in ) :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info character , intent ( in ), optional :: trans character :: local_trans integer :: n , nrhs , lda , ldb if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call cgetrs ( local_trans , n , nrhs , a , lda , ipiv , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cgetrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_getrs:zgetrs]]. !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine mfi_zgetrs ( a , ipiv , b , trans , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: b (:,:) integer , intent ( in ) :: ipiv (:) integer , intent ( out ), optional :: info integer :: local_info character , intent ( in ), optional :: trans character :: local_trans integer :: n , nrhs , lda , ldb if ( present ( trans )) then local_trans = trans else local_trans = 'N' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call zgetrs ( local_trans , n , nrhs , a , lda , ipiv , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zgetrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_hetrf:chetrf]]. !> See also: [[mfi_hetrf]], [[f77_hetrf]]. pure subroutine mfi_chetrf ( a , uplo , ipiv , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) integer , intent ( out ), optional , target :: ipiv (:) integer , pointer :: local_ipiv (:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , lwork , allocation_status , deallocation_status complex ( REAL32 ), target :: s_work ( 1 ) complex ( REAL32 ), pointer :: work (:) if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 if ( present ( ipiv )) then local_ipiv => ipiv else allocate ( local_ipiv ( n ), stat = allocation_status ) end if lwork = - 1 call chetrf ( local_uplo , n , a , lda , local_ipiv , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue if (. not . present ( ipiv )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'chetrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_hetrf:zhetrf]]. !> See also: [[mfi_hetrf]], [[f77_hetrf]]. pure subroutine mfi_zhetrf ( a , uplo , ipiv , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) integer , intent ( out ), optional , target :: ipiv (:) integer , pointer :: local_ipiv (:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , lwork , allocation_status , deallocation_status complex ( REAL64 ), target :: s_work ( 1 ) complex ( REAL64 ), pointer :: work (:) if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 if ( present ( ipiv )) then local_ipiv => ipiv else allocate ( local_ipiv ( n ), stat = allocation_status ) end if lwork = - 1 call zhetrf ( local_uplo , n , a , lda , local_ipiv , s_work , lwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue if (. not . present ( ipiv )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zhetrf' , - local_info ) end if end subroutine !> Modern interface for [[f77_hegv:chegv]]. !> See also: [[mfi_hegv]], [[f77_hegv]]. pure subroutine mfi_chegv ( a , b , w , itype , jobz , uplo , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: b (:,:) real ( REAL32 ), intent ( out ) :: w (:) integer , intent ( in ), optional :: itype integer :: local_itype character , intent ( in ), optional :: jobz character :: local_jobz character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info complex ( REAL32 ), pointer :: work (:) real ( REAL32 ), pointer :: rwork (:) complex ( REAL32 ) :: s_work ( 1 ) integer :: n , lda , ldb , lwork , allocation_status , deallocation_status if ( present ( itype )) then local_itype = itype else local_itype = 1 end if if ( present ( jobz )) then local_jobz = jobz else local_jobz = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) allocation_status = 0 allocate ( rwork ( max ( 1 , 3 * N - 2 )), stat = allocation_status ) lwork = - 1 call chegv ( local_itype , local_jobz , local_uplo , n , a , lda , b , ldb , w , s_work , lwork , rwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call chegv ( local_itype , local_jobz , local_uplo , n , a , lda , b , ldb , w , work , lwork , rwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue deallocate ( rwork , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'chegv' , - local_info ) end if end subroutine !> Modern interface for [[f77_hegv:zhegv]]. !> See also: [[mfi_hegv]], [[f77_hegv]]. pure subroutine mfi_zhegv ( a , b , w , itype , jobz , uplo , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: b (:,:) real ( REAL64 ), intent ( out ) :: w (:) integer , intent ( in ), optional :: itype integer :: local_itype character , intent ( in ), optional :: jobz character :: local_jobz character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info complex ( REAL64 ), pointer :: work (:) real ( REAL64 ), pointer :: rwork (:) complex ( REAL64 ) :: s_work ( 1 ) integer :: n , lda , ldb , lwork , allocation_status , deallocation_status if ( present ( itype )) then local_itype = itype else local_itype = 1 end if if ( present ( jobz )) then local_jobz = jobz else local_jobz = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) allocation_status = 0 allocate ( rwork ( max ( 1 , 3 * N - 2 )), stat = allocation_status ) lwork = - 1 call zhegv ( local_itype , local_jobz , local_uplo , n , a , lda , b , ldb , w , s_work , lwork , rwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) if ( allocation_status == 0 ) then allocate ( work ( lwork ), stat = allocation_status ) end if if ( allocation_status == 0 ) then call zhegv ( local_itype , local_jobz , local_uplo , n , a , lda , b , ldb , w , work , lwork , rwork , local_info ) else local_info = - 1000 end if deallocate ( work , stat = deallocation_status ) 404 continue deallocate ( rwork , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zhegv' , - local_info ) end if end subroutine !> Modern interface for [[f77_heevd:cheevd]]. !> See also: [[mfi_heevd]], [[f77_heevd]]. pure subroutine mfi_cheevd ( a , w , jobz , uplo , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( out ) :: w (:) integer , intent ( out ), optional :: info integer :: local_info character , intent ( in ), optional :: jobz character :: local_jobz character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL32 ), pointer :: work (:) real ( REAL32 ), pointer :: rwork (:) integer , pointer :: iwork (:) complex ( REAL32 ) :: s_work ( 1 ) real ( REAL32 ) :: s_rwork ( 1 ) integer :: s_iwork ( 1 ) integer :: n , lda , lwork , lrwork , liwork , allocation_status , deallocation_status if ( present ( jobz )) then local_jobz = jobz else local_jobz = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 lwork = - 1 lrwork = - 1 liwork = - 1 call cheevd ( local_jobz , local_uplo , n , a , lda , w , & s_work , lwork , s_rwork , lrwork , s_iwork , liwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) lrwork = int ( s_rwork ( 1 )) liwork = int ( s_iwork ( 1 )) allocate ( iwork ( liwork ), stat = allocation_status ) if ( allocation_status == 0 ) then allocate ( rwork ( lrwork ), stat = allocation_status ) allocate ( work ( lwork ), stat = allocation_status ) call cheevd ( local_jobz , local_uplo , n , a , lda , w , & work , lwork , rwork , lrwork , iwork , liwork , local_info ) else local_info = - 1000 end if deallocate ( iwork , stat = deallocation_status ) deallocate ( rwork , stat = deallocation_status ) deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cheevd' , - local_info ) end if end subroutine !> Modern interface for [[f77_heevd:zheevd]]. !> See also: [[mfi_heevd]], [[f77_heevd]]. pure subroutine mfi_zheevd ( a , w , jobz , uplo , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( out ) :: w (:) integer , intent ( out ), optional :: info integer :: local_info character , intent ( in ), optional :: jobz character :: local_jobz character , intent ( in ), optional :: uplo character :: local_uplo complex ( REAL64 ), pointer :: work (:) real ( REAL64 ), pointer :: rwork (:) integer , pointer :: iwork (:) complex ( REAL64 ) :: s_work ( 1 ) real ( REAL64 ) :: s_rwork ( 1 ) integer :: s_iwork ( 1 ) integer :: n , lda , lwork , lrwork , liwork , allocation_status , deallocation_status if ( present ( jobz )) then local_jobz = jobz else local_jobz = 'N' end if if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 lwork = - 1 lrwork = - 1 liwork = - 1 call zheevd ( local_jobz , local_uplo , n , a , lda , w , & s_work , lwork , s_rwork , lrwork , s_iwork , liwork , local_info ) if ( local_info /= 0 ) goto 404 lwork = int ( s_work ( 1 )) lrwork = int ( s_rwork ( 1 )) liwork = int ( s_iwork ( 1 )) allocate ( iwork ( liwork ), stat = allocation_status ) if ( allocation_status == 0 ) then allocate ( rwork ( lrwork ), stat = allocation_status ) allocate ( work ( lwork ), stat = allocation_status ) call zheevd ( local_jobz , local_uplo , n , a , lda , w , & work , lwork , rwork , lrwork , iwork , liwork , local_info ) else local_info = - 1000 end if deallocate ( iwork , stat = deallocation_status ) deallocate ( rwork , stat = deallocation_status ) deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zheevd' , - local_info ) end if end subroutine !> Modern interface for [[f77_gesvd:sgesvd]]. !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine mfi_sgesvd ( a , s , u , vt , ww , job , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( out ) :: s (:) real ( REAL32 ), intent ( out ), optional , target :: u (:,:), vt (:,:) real ( REAL32 ), intent ( out ), optional , target :: ww (:) character , intent ( in ), optional :: job character :: local_job integer , intent ( out ), optional :: info integer :: local_info character :: jobu , jobvt integer :: m , n , lda , ldu , ldvt , lwork , allocation_status , deallocation_status real ( REAL32 ), target :: s_work ( 1 ), l_a2 ( 1 , 1 ) real ( REAL32 ), pointer :: local_u (:,:), local_vt (:,:), work (:) if ( present ( job )) then local_job = job else local_job = 'N' end if lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) if ( present ( u )) then ldu = max ( 1 , size ( u , 1 )) else ldu = 1 end if if ( present ( vt )) then ldvt = max ( 1 , size ( vt , 1 )) else ldvt = 1 end if if ( present ( u )) then if ( size ( u , 2 ) == m ) then jobu = 'A' else jobu = 'S' end if local_u => u else if ( local_job == 'u' . or . local_job == 'U' ) then jobu = 'O' else jobu = 'N' end if local_u => l_a2 end if if ( present ( vt )) then if ( size ( vt , 1 ) == n ) then jobvt = 'A' else jobvt = 'S' end if local_vt => vt else if ( local_job == 'v' . or . local_job == 'V' ) then jobvt = 'O' else jobvt = 'N' end if local_vt => l_a2 end if allocation_status = 0 lwork = - 1 call sgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , s_work , lwork , local_info ) if ( local_info /= 0 ) then goto 404 end if lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call sgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , work , lwork , local_info ) else local_info = - 1000 end if if ( present ( ww )) then ww = real ( work ( 2 : min ( m , n ) - 1 )) end if deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'sgesvd' , - local_info ) end if end subroutine !> Modern interface for [[f77_gesvd:dgesvd]]. !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine mfi_dgesvd ( a , s , u , vt , ww , job , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( out ) :: s (:) real ( REAL64 ), intent ( out ), optional , target :: u (:,:), vt (:,:) real ( REAL64 ), intent ( out ), optional , target :: ww (:) character , intent ( in ), optional :: job character :: local_job integer , intent ( out ), optional :: info integer :: local_info character :: jobu , jobvt integer :: m , n , lda , ldu , ldvt , lwork , allocation_status , deallocation_status real ( REAL64 ), target :: s_work ( 1 ), l_a2 ( 1 , 1 ) real ( REAL64 ), pointer :: local_u (:,:), local_vt (:,:), work (:) if ( present ( job )) then local_job = job else local_job = 'N' end if lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) if ( present ( u )) then ldu = max ( 1 , size ( u , 1 )) else ldu = 1 end if if ( present ( vt )) then ldvt = max ( 1 , size ( vt , 1 )) else ldvt = 1 end if if ( present ( u )) then if ( size ( u , 2 ) == m ) then jobu = 'A' else jobu = 'S' end if local_u => u else if ( local_job == 'u' . or . local_job == 'U' ) then jobu = 'O' else jobu = 'N' end if local_u => l_a2 end if if ( present ( vt )) then if ( size ( vt , 1 ) == n ) then jobvt = 'A' else jobvt = 'S' end if local_vt => vt else if ( local_job == 'v' . or . local_job == 'V' ) then jobvt = 'O' else jobvt = 'N' end if local_vt => l_a2 end if allocation_status = 0 lwork = - 1 call dgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , s_work , lwork , local_info ) if ( local_info /= 0 ) then goto 404 end if lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call dgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , work , lwork , local_info ) else local_info = - 1000 end if if ( present ( ww )) then ww = real ( work ( 2 : min ( m , n ) - 1 )) end if deallocate ( work , stat = deallocation_status ) 404 continue if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dgesvd' , - local_info ) end if end subroutine !> Modern interface for [[f77_gesvd:cgesvd]]. !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine mfi_cgesvd ( a , s , u , vt , ww , job , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( out ) :: s (:) complex ( REAL32 ), intent ( out ), optional , target :: u (:,:), vt (:,:) real ( REAL32 ), intent ( out ), optional , target :: ww (:) character , intent ( in ), optional :: job character :: local_job integer , intent ( out ), optional :: info integer :: local_info character :: jobu , jobvt integer :: m , n , lda , ldu , ldvt , lwork , allocation_status , deallocation_status complex ( REAL32 ), target :: s_work ( 1 ), l_a2 ( 1 , 1 ) complex ( REAL32 ), pointer :: local_u (:,:), local_vt (:,:), work (:) real ( REAL32 ), pointer :: rwork (:) if ( present ( job )) then local_job = job else local_job = 'N' end if lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) if ( present ( u )) then ldu = max ( 1 , size ( u , 1 )) else ldu = 1 end if if ( present ( vt )) then ldvt = max ( 1 , size ( vt , 1 )) else ldvt = 1 end if if ( present ( u )) then if ( size ( u , 2 ) == m ) then jobu = 'A' else jobu = 'S' end if local_u => u else if ( local_job == 'u' . or . local_job == 'U' ) then jobu = 'O' else jobu = 'N' end if local_u => l_a2 end if if ( present ( vt )) then if ( size ( vt , 1 ) == n ) then jobvt = 'A' else jobvt = 'S' end if local_vt => vt else if ( local_job == 'v' . or . local_job == 'V' ) then jobvt = 'O' else jobvt = 'N' end if local_vt => l_a2 end if allocation_status = 0 lwork = - 1 allocate ( rwork ( 5 * min ( m , n )), stat = allocation_status ) call cgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , s_work , lwork , rwork , local_info ) if ( local_info /= 0 ) then goto 404 end if lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call cgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , work , lwork , rwork , local_info ) else local_info = - 1000 end if if ( present ( ww )) then ww = real ( work ( 2 : min ( m , n ) - 1 )) end if deallocate ( work , stat = deallocation_status ) 404 continue deallocate ( rwork , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cgesvd' , - local_info ) end if end subroutine !> Modern interface for [[f77_gesvd:zgesvd]]. !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine mfi_zgesvd ( a , s , u , vt , ww , job , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( out ) :: s (:) complex ( REAL64 ), intent ( out ), optional , target :: u (:,:), vt (:,:) real ( REAL64 ), intent ( out ), optional , target :: ww (:) character , intent ( in ), optional :: job character :: local_job integer , intent ( out ), optional :: info integer :: local_info character :: jobu , jobvt integer :: m , n , lda , ldu , ldvt , lwork , allocation_status , deallocation_status complex ( REAL64 ), target :: s_work ( 1 ), l_a2 ( 1 , 1 ) complex ( REAL64 ), pointer :: local_u (:,:), local_vt (:,:), work (:) real ( REAL64 ), pointer :: rwork (:) if ( present ( job )) then local_job = job else local_job = 'N' end if lda = max ( 1 , size ( a , 1 )) m = size ( a , 1 ) n = size ( a , 2 ) if ( present ( u )) then ldu = max ( 1 , size ( u , 1 )) else ldu = 1 end if if ( present ( vt )) then ldvt = max ( 1 , size ( vt , 1 )) else ldvt = 1 end if if ( present ( u )) then if ( size ( u , 2 ) == m ) then jobu = 'A' else jobu = 'S' end if local_u => u else if ( local_job == 'u' . or . local_job == 'U' ) then jobu = 'O' else jobu = 'N' end if local_u => l_a2 end if if ( present ( vt )) then if ( size ( vt , 1 ) == n ) then jobvt = 'A' else jobvt = 'S' end if local_vt => vt else if ( local_job == 'v' . or . local_job == 'V' ) then jobvt = 'O' else jobvt = 'N' end if local_vt => l_a2 end if allocation_status = 0 lwork = - 1 allocate ( rwork ( 5 * min ( m , n )), stat = allocation_status ) call zgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , s_work , lwork , rwork , local_info ) if ( local_info /= 0 ) then goto 404 end if lwork = int ( s_work ( 1 )) allocate ( work ( lwork ), stat = allocation_status ) if ( allocation_status == 0 ) then call zgesvd ( jobu , jobvt , m , n , a , lda , s , local_u , ldu , local_vt , ldvt , work , lwork , rwork , local_info ) else local_info = - 1000 end if if ( present ( ww )) then ww = real ( work ( 2 : min ( m , n ) - 1 )) end if deallocate ( work , stat = deallocation_status ) 404 continue deallocate ( rwork , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zgesvd' , - local_info ) end if end subroutine !> Modern interface for [[f77_potrf:spotrf]]. !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine mfi_spotrf ( a , info , uplo ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call spotrf ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'spotrf' , local_info ) end if end subroutine !> Modern interface for [[f77_potrf:dpotrf]]. !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine mfi_dpotrf ( a , info , uplo ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dpotrf ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'dpotrf' , local_info ) end if end subroutine !> Modern interface for [[f77_potrf:cpotrf]]. !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine mfi_cpotrf ( a , info , uplo ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call cpotrf ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'cpotrf' , local_info ) end if end subroutine !> Modern interface for [[f77_potrf:zpotrf]]. !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine mfi_zpotrf ( a , info , uplo ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call zpotrf ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'zpotrf' , local_info ) end if end subroutine !> Modern interface for [[f77_potri:spotri]]. !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine mfi_spotri ( a , info , uplo ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call spotri ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'spotri' , local_info ) end if end subroutine !> Modern interface for [[f77_potri:dpotri]]. !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine mfi_dpotri ( a , info , uplo ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call dpotri ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'dpotri' , local_info ) end if end subroutine !> Modern interface for [[f77_potri:cpotri]]. !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine mfi_cpotri ( a , info , uplo ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call cpotri ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'cpotri' , local_info ) end if end subroutine !> Modern interface for [[f77_potri:zpotri]]. !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine mfi_zpotri ( a , info , uplo ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) call zpotri ( local_uplo , n , a , lda , local_info ) if ( present ( info )) then info = local_info else if ( local_info /= 0 ) then call mfi_error ( 'zpotri' , local_info ) end if end subroutine !> Modern interface for [[f77_potrs:spotrs]]. !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine mfi_spotrs ( a , b , uplo , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a (:,:) real ( REAL32 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , nrhs , lda , ldb if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call spotrs ( local_uplo , n , nrhs , a , lda , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'spotrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_potrs:dpotrs]]. !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine mfi_dpotrs ( a , b , uplo , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a (:,:) real ( REAL64 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , nrhs , lda , ldb if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call dpotrs ( local_uplo , n , nrhs , a , lda , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dpotrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_potrs:cpotrs]]. !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine mfi_cpotrs ( a , b , uplo , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a (:,:) complex ( REAL32 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , nrhs , lda , ldb if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call cpotrs ( local_uplo , n , nrhs , a , lda , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cpotrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_potrs:zpotrs]]. !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine mfi_zpotrs ( a , b , uplo , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a (:,:) complex ( REAL64 ), intent ( inout ) :: b (:,:) character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , nrhs , lda , ldb if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) ldb = max ( 1 , size ( b , 1 )) n = size ( a , 2 ) nrhs = size ( b , 2 ) call zpotrs ( local_uplo , n , nrhs , a , lda , b , ldb , local_info ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zpotrs' , - local_info ) end if end subroutine !> Modern interface for [[f77_pocon:spocon]]. !> See also: [[mfi_pocon]], [[f77_pocon]]. !> Estimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF pure subroutine mfi_spocon ( a , anorm , rcond , uplo , info ) integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( in ) :: anorm real ( REAL32 ), intent ( out ) :: rcond character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , allocation_status , deallocation_status real ( REAL32 ), pointer :: work (:) integer , pointer :: xwork (:) if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 allocate ( xwork ( n ), stat = allocation_status ) if ( allocation_status == 0 ) allocate ( work ( 3 * n ), stat = allocation_status ) if ( allocation_status == 0 ) then call spocon ( local_uplo , n , a , lda , anorm , rcond , work , xwork , local_info ) else local_info = - 1000 end if deallocate ( xwork , stat = deallocation_status ) deallocate ( work , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'spocon' , - local_info ) end if end subroutine !> Modern interface for [[f77_pocon:dpocon]]. !> See also: [[mfi_pocon]], [[f77_pocon]]. !> Estimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF pure subroutine mfi_dpocon ( a , anorm , rcond , uplo , info ) integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( in ) :: anorm real ( REAL64 ), intent ( out ) :: rcond character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , allocation_status , deallocation_status real ( REAL64 ), pointer :: work (:) integer , pointer :: xwork (:) if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 allocate ( xwork ( n ), stat = allocation_status ) if ( allocation_status == 0 ) allocate ( work ( 3 * n ), stat = allocation_status ) if ( allocation_status == 0 ) then call dpocon ( local_uplo , n , a , lda , anorm , rcond , work , xwork , local_info ) else local_info = - 1000 end if deallocate ( xwork , stat = deallocation_status ) deallocate ( work , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'dpocon' , - local_info ) end if end subroutine !> Modern interface for [[f77_pocon:cpocon]]. !> See also: [[mfi_pocon]], [[f77_pocon]]. !> Estimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF pure subroutine mfi_cpocon ( a , anorm , rcond , uplo , info ) integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a (:,:) real ( REAL32 ), intent ( in ) :: anorm real ( REAL32 ), intent ( out ) :: rcond character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , allocation_status , deallocation_status complex ( REAL32 ), pointer :: work (:) real ( REAL32 ), pointer :: xwork (:) if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 allocate ( xwork ( n ), stat = allocation_status ) if ( allocation_status == 0 ) allocate ( work ( 3 * n ), stat = allocation_status ) if ( allocation_status == 0 ) then call cpocon ( local_uplo , n , a , lda , anorm , rcond , work , xwork , local_info ) else local_info = - 1000 end if deallocate ( xwork , stat = deallocation_status ) deallocate ( work , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'cpocon' , - local_info ) end if end subroutine !> Modern interface for [[f77_pocon:zpocon]]. !> See also: [[mfi_pocon]], [[f77_pocon]]. !> Estimates the reciprocal of the condition number of a real symmetric / complex Hermitian positive definite matrix using the Cholesky factorization computed by ?POTRF pure subroutine mfi_zpocon ( a , anorm , rcond , uplo , info ) integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a (:,:) real ( REAL64 ), intent ( in ) :: anorm real ( REAL64 ), intent ( out ) :: rcond character , intent ( in ), optional :: uplo character :: local_uplo integer , intent ( out ), optional :: info integer :: local_info integer :: n , lda , allocation_status , deallocation_status complex ( REAL64 ), pointer :: work (:) real ( REAL64 ), pointer :: xwork (:) if ( present ( uplo )) then local_uplo = uplo else local_uplo = 'U' end if lda = max ( 1 , size ( a , 1 )) n = size ( a , 2 ) allocation_status = 0 allocate ( xwork ( n ), stat = allocation_status ) if ( allocation_status == 0 ) allocate ( work ( 3 * n ), stat = allocation_status ) if ( allocation_status == 0 ) then call zpocon ( local_uplo , n , a , lda , anorm , rcond , work , xwork , local_info ) else local_info = - 1000 end if deallocate ( xwork , stat = deallocation_status ) deallocate ( work , stat = deallocation_status ) if ( present ( info )) then info = local_info else if ( local_info <= - 1000 ) then call mfi_error ( 'zpocon' , - local_info ) end if end subroutine pure subroutine mfi_error ( name , info ) character ( * ), intent ( in ) :: name integer , intent ( in ) :: info call f77_xerbla ( name , info ) end subroutine end module","tags":"","loc":"sourcefile/lapack.f90.html"},{"title":"lapack.f90 – MFI - Modern Fortran Interfaces","text":"Source Code !> Improved and original F77 interfaces for LAPACK module f77_lapack use iso_fortran_env implicit none !> Generic old style interface for GEQRF. !> Supports s, d, c, z. !> See also: [[mfi_geqrf]], [[sgeqrf]],[[dgeqrf]],[[cgeqrf]],[[zgeqrf]]. interface f77_geqrf !> Original interface for SGEQRF !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine sgeqrf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork real ( REAL32 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for DGEQRF !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine dgeqrf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork real ( REAL64 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for CGEQRF !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine cgeqrf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork complex ( REAL32 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for ZGEQRF !> See also: [[mfi_geqrf]], [[f77_geqrf]]. pure subroutine zgeqrf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork complex ( REAL64 ), intent ( inout ) :: work ( * ) end subroutine end interface !> Generic old style interface for GERQF. !> Supports s, d, c, z. !> See also: [[mfi_gerqf]], [[sgerqf]],[[dgerqf]],[[cgerqf]],[[zgerqf]]. interface f77_gerqf !> Original interface for SGERQF !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine sgerqf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork real ( REAL32 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for DGERQF !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine dgerqf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork real ( REAL64 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for CGERQF !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine cgerqf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork complex ( REAL32 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for ZGERQF !> See also: [[mfi_gerqf]], [[f77_gerqf]]. pure subroutine zgerqf ( m , n , a , lda , tau , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( out ) :: tau ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork complex ( REAL64 ), intent ( inout ) :: work ( * ) end subroutine end interface !> Generic old style interface for GETRF. !> Supports s, d, c, z. !> See also: [[mfi_getrf]], [[sgetrf]],[[dgetrf]],[[cgetrf]],[[zgetrf]]. interface f77_getrf !> Original interface for SGETRF !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine sgetrf ( m , n , a , lda , ipiv , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) integer , intent ( out ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda end subroutine !> Original interface for DGETRF !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine dgetrf ( m , n , a , lda , ipiv , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) integer , intent ( out ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda end subroutine !> Original interface for CGETRF !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine cgetrf ( m , n , a , lda , ipiv , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) integer , intent ( out ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda end subroutine !> Original interface for ZGETRF !> See also: [[mfi_getrf]], [[f77_getrf]]. pure subroutine zgetrf ( m , n , a , lda , ipiv , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) integer , intent ( out ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda end subroutine end interface !> Generic old style interface for GETRI. !> Supports s, d, c, z. !> See also: [[mfi_getri]], [[sgetri]],[[dgetri]],[[cgetri]],[[zgetri]]. interface f77_getri !> Original interface for SGETRI !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine sgetri ( n , a , lda , ipiv , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: work ( * ) integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork end subroutine !> Original interface for DGETRI !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine dgetri ( n , a , lda , ipiv , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: work ( * ) integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork end subroutine !> Original interface for CGETRI !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine cgetri ( n , a , lda , ipiv , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: work ( * ) integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGETRI !> See also: [[mfi_getri]], [[f77_getri]]. pure subroutine zgetri ( n , a , lda , ipiv , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: work ( * ) integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GETRS. !> Supports s, d, c, z. !> See also: [[mfi_getrs]], [[sgetrs]],[[dgetrs]],[[cgetrs]],[[zgetrs]]. interface f77_getrs !> Original interface for SGETRS !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine sgetrs ( trans , n , nrhs , a , lda , ipiv , b , ldb , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: trans integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for DGETRS !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine dgetrs ( trans , n , nrhs , a , lda , ipiv , b , ldb , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: trans integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for CGETRS !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine cgetrs ( trans , n , nrhs , a , lda , ipiv , b , ldb , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: trans integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine !> Original interface for ZGETRS !> See also: [[mfi_getrs]], [[f77_getrs]]. pure subroutine zgetrs ( trans , n , nrhs , a , lda , ipiv , b , ldb , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) character , intent ( in ) :: trans integer , intent ( in ) :: ipiv ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb end subroutine end interface !> Generic old style interface for HETRF. !> Supports c, z. !> See also: [[mfi_hetrf]], [[chetrf]],[[zhetrf]]. interface f77_hetrf !> Original interface for CHETRF !> See also: [[mfi_hetrf]], [[f77_hetrf]]. pure subroutine chetrf ( uplo , n , a , lda , ipiv , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: ipiv ( * ) complex ( REAL32 ), intent ( inout ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork end subroutine !> Original interface for ZHETRF !> See also: [[mfi_hetrf]], [[f77_hetrf]]. pure subroutine zhetrf ( uplo , n , a , lda , ipiv , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: ipiv ( * ) complex ( REAL64 ), intent ( inout ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for HEGV. !> Supports c, z. !> See also: [[mfi_hegv]], [[chegv]],[[zhegv]]. interface f77_hegv !> Original interface for CHEGV !> See also: [[mfi_hegv]], [[f77_hegv]]. pure subroutine chegv ( itype , jobz , uplo , n , a , lda , b , ldb , w , work , lwork , rwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: itype integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork complex ( REAL32 ), intent ( inout ) :: work ( * ) real ( REAL32 ), intent ( in ) :: rwork ( * ) end subroutine !> Original interface for ZHEGV !> See also: [[mfi_hegv]], [[f77_hegv]]. pure subroutine zhegv ( itype , jobz , uplo , n , a , lda , b , ldb , w , work , lwork , rwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: itype integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork complex ( REAL64 ), intent ( inout ) :: work ( * ) real ( REAL64 ), intent ( in ) :: rwork ( * ) end subroutine end interface !> Generic old style interface for HEEVD. !> Supports c, z. !> See also: [[mfi_heevd]], [[cheevd]],[[zheevd]]. interface f77_heevd !> Original interface for CHEEVD !> See also: [[mfi_heevd]], [[f77_heevd]]. pure subroutine cheevd ( jobz , uplo , n , a , lda , w , work , lwork , rwork , lrwork , iwork , liwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( in ) :: lrwork integer , intent ( in ) :: liwork complex ( REAL32 ), intent ( inout ) :: work ( * ) real ( REAL32 ), intent ( inout ) :: rwork ( * ) integer , intent ( inout ) :: iwork ( * ) end subroutine !> Original interface for ZHEEVD !> See also: [[mfi_heevd]], [[f77_heevd]]. pure subroutine zheevd ( jobz , uplo , n , a , lda , w , work , lwork , rwork , lrwork , iwork , liwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( in ) :: lrwork integer , intent ( in ) :: liwork complex ( REAL64 ), intent ( inout ) :: work ( * ) real ( REAL64 ), intent ( inout ) :: rwork ( * ) integer , intent ( inout ) :: iwork ( * ) end subroutine end interface !> Generic old style interface for GESVD. !> Supports s, d, c, z. !> See also: [[mfi_gesvd]], [[sgesvd]],[[dgesvd]],[[cgesvd]],[[zgesvd]]. interface f77_gesvd !> Original interface for SGESVD !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine sgesvd ( jobu , jobvt , m , n , a , lda , s , u , ldu , vt , ldvt , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: s ( * ) real ( REAL32 ), intent ( out ) :: u ( ldu , * ) real ( REAL32 ), intent ( out ) :: vt ( ldvt , * ) integer , intent ( out ) :: info character , intent ( in ) :: jobu character , intent ( in ) :: jobvt integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldu integer , intent ( in ) :: ldvt integer , intent ( in ) :: lwork real ( REAL32 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for DGESVD !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine dgesvd ( jobu , jobvt , m , n , a , lda , s , u , ldu , vt , ldvt , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: s ( * ) real ( REAL64 ), intent ( out ) :: u ( ldu , * ) real ( REAL64 ), intent ( out ) :: vt ( ldvt , * ) integer , intent ( out ) :: info character , intent ( in ) :: jobu character , intent ( in ) :: jobvt integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldu integer , intent ( in ) :: ldvt integer , intent ( in ) :: lwork real ( REAL64 ), intent ( inout ) :: work ( * ) end subroutine !> Original interface for CGESVD !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine cgesvd ( jobu , jobvt , m , n , a , lda , s , u , ldu , vt , ldvt , work , lwork , rwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: s ( * ) complex ( REAL32 ), intent ( out ) :: u ( ldu , * ) complex ( REAL32 ), intent ( out ) :: vt ( ldvt , * ) integer , intent ( out ) :: info character , intent ( in ) :: jobu character , intent ( in ) :: jobvt integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldu integer , intent ( in ) :: ldvt integer , intent ( in ) :: lwork complex ( REAL32 ), intent ( inout ) :: work ( * ) real ( REAL32 ), intent ( in ) :: rwork ( * ) end subroutine !> Original interface for ZGESVD !> See also: [[mfi_gesvd]], [[f77_gesvd]]. pure subroutine zgesvd ( jobu , jobvt , m , n , a , lda , s , u , ldu , vt , ldvt , work , lwork , rwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: s ( * ) complex ( REAL64 ), intent ( out ) :: u ( ldu , * ) complex ( REAL64 ), intent ( out ) :: vt ( ldvt , * ) integer , intent ( out ) :: info character , intent ( in ) :: jobu character , intent ( in ) :: jobvt integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldu integer , intent ( in ) :: ldvt integer , intent ( in ) :: lwork complex ( REAL64 ), intent ( inout ) :: work ( * ) real ( REAL64 ), intent ( in ) :: rwork ( * ) end subroutine end interface !> Generic old style interface for POTRF. !> Supports s, d, c, z. !> See also: [[mfi_potrf]], [[spotrf]],[[dpotrf]],[[cpotrf]],[[zpotrf]]. interface f77_potrf !> Original interface for SPOTRF !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine spotrf ( uplo , n , a , lda , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for DPOTRF !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine dpotrf ( uplo , n , a , lda , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for CPOTRF !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine cpotrf ( uplo , n , a , lda , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for ZPOTRF !> See also: [[mfi_potrf]], [[f77_potrf]]. pure subroutine zpotrf ( uplo , n , a , lda , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for POTRI. !> Supports s, d, c, z. !> See also: [[mfi_potri]], [[spotri]],[[dpotri]],[[cpotri]],[[zpotri]]. interface f77_potri !> Original interface for SPOTRI !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine spotri ( uplo , n , a , lda , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for DPOTRI !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine dpotri ( uplo , n , a , lda , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for CPOTRI !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine cpotri ( uplo , n , a , lda , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for ZPOTRI !> See also: [[mfi_potri]], [[f77_potri]]. pure subroutine zpotri ( uplo , n , a , lda , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for POTRS. !> Supports s, d, c, z. !> See also: [[mfi_potrs]], [[spotrs]],[[dpotrs]],[[cpotrs]],[[zpotrs]]. interface f77_potrs !> Original interface for SPOTRS !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine spotrs ( uplo , n , nrhs , a , lda , b , ldb , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: b ( ldb , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( out ) :: info end subroutine !> Original interface for DPOTRS !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine dpotrs ( uplo , n , nrhs , a , lda , b , ldb , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: b ( ldb , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( out ) :: info end subroutine !> Original interface for CPOTRS !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine cpotrs ( uplo , n , nrhs , a , lda , b , ldb , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: a ( lda , * ) complex ( REAL32 ), intent ( in ) :: b ( ldb , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( out ) :: info end subroutine !> Original interface for ZPOTRS !> See also: [[mfi_potrs]], [[f77_potrs]]. pure subroutine zpotrs ( uplo , n , nrhs , a , lda , b , ldb , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: a ( lda , * ) complex ( REAL64 ), intent ( in ) :: b ( ldb , * ) character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for POCON. !> Supports s, d, c, z. !> See also: [[mfi_pocon]], [[spocon]],[[dpocon]],[[cpocon]],[[zpocon]]. interface f77_pocon !> Original interface for SPOCON !> See also: [[mfi_pocon]], [[f77_pocon]]. !> spocon estimates the reciprocal of the condition number (in the !> 1-norm) of a real(REAL32) Hermitian positive definite matrix using the !> Cholesky factorization  A = U&#94;\\dagger U  or  A = LL&#94;\\dagger |) computed by sPOTRF. !> An estimate is obtained for norm(inv(A)), and the reciprocal of the !> condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). pure subroutine spocon ( uplo , n , a , lda , anorm , rcond , work , iwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: anorm real ( REAL32 ), intent ( out ) :: rcond real ( REAL32 ), intent ( inout ) :: work ( * ) integer , intent ( inout ) :: iwork ( * ) integer , intent ( out ) :: info end subroutine !> Original interface for DPOCON !> See also: [[mfi_pocon]], [[f77_pocon]]. !> dpocon estimates the reciprocal of the condition number (in the !> 1-norm) of a real(REAL64) Hermitian positive definite matrix using the !> Cholesky factorization  A = U&#94;\\dagger U  or  A = LL&#94;\\dagger |) computed by dPOTRF. !> An estimate is obtained for norm(inv(A)), and the reciprocal of the !> condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). pure subroutine dpocon ( uplo , n , a , lda , anorm , rcond , work , iwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: anorm real ( REAL64 ), intent ( out ) :: rcond real ( REAL64 ), intent ( inout ) :: work ( * ) integer , intent ( inout ) :: iwork ( * ) integer , intent ( out ) :: info end subroutine !> Original interface for CPOCON !> See also: [[mfi_pocon]], [[f77_pocon]]. !> cpocon estimates the reciprocal of the condition number (in the !> 1-norm) of a complex(REAL32) Hermitian positive definite matrix using the !> Cholesky factorization  A = U&#94;\\dagger U  or  A = LL&#94;\\dagger |) computed by cPOTRF. !> An estimate is obtained for norm(inv(A)), and the reciprocal of the !> condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). pure subroutine cpocon ( uplo , n , a , lda , anorm , rcond , work , rwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( in ) :: anorm real ( REAL32 ), intent ( out ) :: rcond complex ( REAL32 ), intent ( inout ) :: work ( * ) real ( REAL32 ), intent ( inout ) :: rwork ( * ) integer , intent ( out ) :: info end subroutine !> Original interface for ZPOCON !> See also: [[mfi_pocon]], [[f77_pocon]]. !> zpocon estimates the reciprocal of the condition number (in the !> 1-norm) of a complex(REAL64) Hermitian positive definite matrix using the !> Cholesky factorization  A = U&#94;\\dagger U  or  A = LL&#94;\\dagger |) computed by zPOTRF. !> An estimate is obtained for norm(inv(A)), and the reciprocal of the !> condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))). pure subroutine zpocon ( uplo , n , a , lda , anorm , rcond , work , rwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: uplo integer , intent ( in ) :: n integer , intent ( in ) :: lda complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( in ) :: anorm real ( REAL64 ), intent ( out ) :: rcond complex ( REAL64 ), intent ( inout ) :: work ( * ) real ( REAL64 ), intent ( inout ) :: rwork ( * ) integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for HEEVX. !> Supports c, z. !> See also: [[mfi_heevx]], [[cheevx]],[[zheevx]]. interface f77_heevx !> Original interface for CHEEVX !> See also: [[mfi_heevx]], [[f77_heevx]]. pure subroutine cheevx ( jobz , range , uplo , n , a , lda , vl , vu , il , iu , abstol , m , w , z , ldz ,& work , lwork , rwork , lrwork , iwork , liwork , ifail , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: z ( ldz , * ) real ( REAL32 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo character , intent ( in ) :: range real ( REAL32 ), intent ( in ) :: vl real ( REAL32 ), intent ( in ) :: vu real ( REAL32 ), intent ( in ) :: abstol integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: lda integer , intent ( in ) :: ldz integer , intent ( in ) :: il integer , intent ( in ) :: iu integer , intent ( in ) :: lwork integer , intent ( in ) :: lrwork integer , intent ( in ) :: liwork integer , intent ( in ) :: ifail complex ( REAL32 ), intent ( inout ) :: work ( * ) real ( REAL32 ), intent ( inout ) :: rwork ( * ) integer , intent ( inout ) :: iwork ( * ) end subroutine !> Original interface for ZHEEVX !> See also: [[mfi_heevx]], [[f77_heevx]]. pure subroutine zheevx ( jobz , range , uplo , n , a , lda , vl , vu , il , iu , abstol , m , w , z , ldz ,& work , lwork , rwork , lrwork , iwork , liwork , ifail , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: z ( ldz , * ) real ( REAL64 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo character , intent ( in ) :: range real ( REAL64 ), intent ( in ) :: vl real ( REAL64 ), intent ( in ) :: vu real ( REAL64 ), intent ( in ) :: abstol integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: lda integer , intent ( in ) :: ldz integer , intent ( in ) :: il integer , intent ( in ) :: iu integer , intent ( in ) :: lwork integer , intent ( in ) :: lrwork integer , intent ( in ) :: liwork integer , intent ( in ) :: ifail complex ( REAL64 ), intent ( inout ) :: work ( * ) real ( REAL64 ), intent ( inout ) :: rwork ( * ) integer , intent ( inout ) :: iwork ( * ) end subroutine end interface !> Generic old style interface for HEEVR. !> Supports c, z. !> See also: [[mfi_heevr]], [[cheevr]],[[zheevr]]. interface f77_heevr !> Original interface for CHEEVR !> See also: [[mfi_heevr]], [[f77_heevr]]. pure subroutine cheevr ( jobz , range , uplo , n , a , lda , vl , vu , il , iu , abstol , m , w , z , ldz ,& isuppz , work , lwork , rwork , lrwork , iwork , liwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: z ( ldz , * ) real ( REAL32 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo character , intent ( in ) :: range real ( REAL32 ), intent ( in ) :: vl real ( REAL32 ), intent ( in ) :: vu real ( REAL32 ), intent ( in ) :: abstol integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: lda integer , intent ( in ) :: ldz integer , intent ( in ) :: il integer , intent ( in ) :: iu integer , intent ( in ) :: lwork integer , intent ( in ) :: lrwork integer , intent ( in ) :: liwork integer , intent ( in ) :: isuppz ( * ) complex ( REAL32 ), intent ( inout ) :: work ( * ) real ( REAL32 ), intent ( inout ) :: rwork ( * ) integer , intent ( inout ) :: iwork ( * ) end subroutine !> Original interface for ZHEEVR !> See also: [[mfi_heevr]], [[f77_heevr]]. pure subroutine zheevr ( jobz , range , uplo , n , a , lda , vl , vu , il , iu , abstol , m , w , z , ldz ,& isuppz , work , lwork , rwork , lrwork , iwork , liwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: z ( ldz , * ) real ( REAL64 ), intent ( out ) :: w ( * ) integer , intent ( out ) :: info character , intent ( in ) :: jobz character , intent ( in ) :: uplo character , intent ( in ) :: range real ( REAL64 ), intent ( in ) :: vl real ( REAL64 ), intent ( in ) :: vu real ( REAL64 ), intent ( in ) :: abstol integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: lda integer , intent ( in ) :: ldz integer , intent ( in ) :: il integer , intent ( in ) :: iu integer , intent ( in ) :: lwork integer , intent ( in ) :: lrwork integer , intent ( in ) :: liwork integer , intent ( in ) :: isuppz ( * ) complex ( REAL64 ), intent ( inout ) :: work ( * ) real ( REAL64 ), intent ( inout ) :: rwork ( * ) integer , intent ( inout ) :: iwork ( * ) end subroutine end interface !> Generic old style interface for GELS. !> Supports s, d, c, z. !> See also: [[mfi_gels]], [[sgels]],[[dgels]],[[cgels]],[[zgels]]. interface f77_gels !> Original interface for SGELS !> See also: [[mfi_gels]], [[f77_gels]]. !> SGELS solves overdetermined or underdetermined systems for GE matrices pure subroutine sgels ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for DGELS !> See also: [[mfi_gels]], [[f77_gels]]. !> DGELS solves overdetermined or underdetermined systems for GE matrices pure subroutine dgels ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for CGELS !> See also: [[mfi_gels]], [[f77_gels]]. !> CGELS solves overdetermined or underdetermined systems for GE matrices pure subroutine cgels ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGELS !> See also: [[mfi_gels]], [[f77_gels]]. !> ZGELS solves overdetermined or underdetermined systems for GE matrices pure subroutine zgels ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GELST. !> Supports s, d, c, z. !> See also: [[mfi_gelst]], [[sgelst]],[[dgelst]],[[cgelst]],[[zgelst]]. interface f77_gelst !> Original interface for SGELST !> See also: [[mfi_gelst]], [[f77_gelst]]. !> SGELST solves overdetermined or underdetermined systems for GE matrices !> using QR or LQ factorization with compact WY representation of Q. pure subroutine sgelst ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for DGELST !> See also: [[mfi_gelst]], [[f77_gelst]]. !> DGELST solves overdetermined or underdetermined systems for GE matrices !> using QR or LQ factorization with compact WY representation of Q. pure subroutine dgelst ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for CGELST !> See also: [[mfi_gelst]], [[f77_gelst]]. !> CGELST solves overdetermined or underdetermined systems for GE matrices !> using QR or LQ factorization with compact WY representation of Q. pure subroutine cgelst ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGELST !> See also: [[mfi_gelst]], [[f77_gelst]]. !> ZGELST solves overdetermined or underdetermined systems for GE matrices !> using QR or LQ factorization with compact WY representation of Q. pure subroutine zgelst ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GETSLS. !> Supports s, d, c, z. !> See also: [[mfi_getsls]], [[sgetsls]],[[dgetsls]],[[cgetsls]],[[zgetsls]]. interface f77_getsls !> Original interface for SGETSLS !> See also: [[mfi_getsls]], [[f77_getsls]]. !> SGETSLS solves overdetermined or underdetermined systems for GE matrices pure subroutine sgetsls ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for DGETSLS !> See also: [[mfi_getsls]], [[f77_getsls]]. !> DGETSLS solves overdetermined or underdetermined systems for GE matrices pure subroutine dgetsls ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for CGETSLS !> See also: [[mfi_getsls]], [[f77_getsls]]. !> CGETSLS solves overdetermined or underdetermined systems for GE matrices pure subroutine cgetsls ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGETSLS !> See also: [[mfi_getsls]], [[f77_getsls]]. !> ZGETSLS solves overdetermined or underdetermined systems for GE matrices pure subroutine zgetsls ( trans , m , n , nrhs , a , lda , b , ldb , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: nrhs integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GELSD. !> Supports s, d, c, z. !> See also: [[mfi_gelsd]], [[sgelsd]],[[dgelsd]],[[cgelsd]],[[zgelsd]]. interface f77_gelsd !> Original interface for SGELSD !> See also: [[mfi_gelsd]], [[f77_gelsd]]. !> SGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices pure subroutine sgelsd ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , iwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: rcond real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( out ) :: s ( * ) real ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: iwork ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for DGELSD !> See also: [[mfi_gelsd]], [[f77_gelsd]]. !> DGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices pure subroutine dgelsd ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , iwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: rcond real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( out ) :: s ( * ) real ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: iwork ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for CGELSD !> See also: [[mfi_gelsd]], [[f77_gelsd]]. !> CGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices pure subroutine cgelsd ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , iwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: rcond complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( out ) :: s ( * ) complex ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: iwork ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGELSD !> See also: [[mfi_gelsd]], [[f77_gelsd]]. !> ZGELSD computes the minimum-norm solution to a linear least squares problem for GE matrices pure subroutine zgelsd ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , iwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: rcond complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( out ) :: s ( * ) complex ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: iwork ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GELSS. !> Supports s, d, c, z. !> See also: [[mfi_gelss]], [[sgelss]],[[dgelss]],[[cgelss]],[[zgelss]]. interface f77_gelss !> Original interface for SGELSS !> See also: [[mfi_gelss]], [[f77_gelss]]. !> SGELSS solves overdetermined or underdetermined systems for GE matrices pure subroutine sgelss ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: rcond real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( out ) :: s ( * ) real ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for DGELSS !> See also: [[mfi_gelss]], [[f77_gelss]]. !> DGELSS solves overdetermined or underdetermined systems for GE matrices pure subroutine dgelss ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: rcond real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( out ) :: s ( * ) real ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for CGELSS !> See also: [[mfi_gelss]], [[f77_gelss]]. !> CGELSS solves overdetermined or underdetermined systems for GE matrices pure subroutine cgelss ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: rcond complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( out ) :: s ( * ) complex ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGELSS !> See also: [[mfi_gelss]], [[f77_gelss]]. !> ZGELSS solves overdetermined or underdetermined systems for GE matrices pure subroutine zgelss ( m , n , nrhs , a , lda , b , ldb , s , rcond , rank , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: rcond complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( out ) :: s ( * ) complex ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GELSY. !> Supports s, d, c, z. !> See also: [[mfi_gelsy]], [[sgelsy]],[[dgelsy]],[[cgelsy]],[[zgelsy]]. interface f77_gelsy !> Original interface for SGELSY !> See also: [[mfi_gelsy]], [[f77_gelsy]]. !> SGELSY solves overdetermined or underdetermined systems for GE matrices pure subroutine sgelsy ( m , n , nrhs , a , lda , b , ldb , jpvt , rcond , rank , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( in ) :: rcond real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) integer , intent ( inout ) :: jpvt ( * ) real ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for DGELSY !> See also: [[mfi_gelsy]], [[f77_gelsy]]. !> DGELSY solves overdetermined or underdetermined systems for GE matrices pure subroutine dgelsy ( m , n , nrhs , a , lda , b , ldb , jpvt , rcond , rank , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( in ) :: rcond real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) integer , intent ( inout ) :: jpvt ( * ) real ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for CGELSY !> See also: [[mfi_gelsy]], [[f77_gelsy]]. !> CGELSY solves overdetermined or underdetermined systems for GE matrices pure subroutine cgelsy ( m , n , nrhs , a , lda , b , ldb , jpvt , rcond , rank , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( in ) :: rcond complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) integer , intent ( inout ) :: jpvt ( * ) complex ( REAL32 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGELSY !> See also: [[mfi_gelsy]], [[f77_gelsy]]. !> ZGELSY solves overdetermined or underdetermined systems for GE matrices pure subroutine zgelsy ( m , n , nrhs , a , lda , b , ldb , jpvt , rcond , rank , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( in ) :: rcond complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) integer , intent ( inout ) :: jpvt ( * ) complex ( REAL64 ), intent ( out ) :: work ( * ) integer , intent ( out ) :: info integer , intent ( out ) :: rank integer , intent ( in ) :: n integer , intent ( in ) :: m integer , intent ( in ) :: nrhs integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GGLSE. !> Supports s, d, c, z. !> See also: [[mfi_gglse]], [[sgglse]],[[dgglse]],[[cgglse]],[[zgglse]]. interface f77_gglse !> Original interface for SGGLSE !> See also: [[mfi_gglse]], [[f77_gglse]]. pure subroutine sgglse ( m , n , p , a , lda , b , ldb , c , d , x , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( inout ) :: c ( * ) real ( REAL32 ), intent ( inout ) :: d ( * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( out ) :: x ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for DGGLSE !> See also: [[mfi_gglse]], [[f77_gglse]]. pure subroutine dgglse ( m , n , p , a , lda , b , ldb , c , d , x , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( inout ) :: c ( * ) real ( REAL64 ), intent ( inout ) :: d ( * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( out ) :: x ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for CGGLSE !> See also: [[mfi_gglse]], [[f77_gglse]]. pure subroutine cgglse ( m , n , p , a , lda , b , ldb , c , d , x , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( inout ) :: c ( * ) complex ( REAL32 ), intent ( inout ) :: d ( * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( out ) :: x ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGGLSE !> See also: [[mfi_gglse]], [[f77_gglse]]. pure subroutine zgglse ( m , n , p , a , lda , b , ldb , c , d , x , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( inout ) :: c ( * ) complex ( REAL64 ), intent ( inout ) :: d ( * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( out ) :: x ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for GGLSM. !> Supports s, d, c, z. !> See also: [[mfi_gglsm]], [[sgglsm]],[[dgglsm]],[[cgglsm]],[[zgglsm]]. interface f77_gglsm !> Original interface for SGGLSM !> See also: [[mfi_gglsm]], [[f77_gglsm]]. pure subroutine sgglsm ( n , m , p , a , lda , b , ldb , d , x , y , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: b ( ldb , * ) real ( REAL32 ), intent ( inout ) :: d ( * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( out ) :: x ( * ) real ( REAL32 ), intent ( out ) :: y ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for DGGLSM !> See also: [[mfi_gglsm]], [[f77_gglsm]]. pure subroutine dgglsm ( n , m , p , a , lda , b , ldb , d , x , y , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: b ( ldb , * ) real ( REAL64 ), intent ( inout ) :: d ( * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( out ) :: x ( * ) real ( REAL64 ), intent ( out ) :: y ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for CGGLSM !> See also: [[mfi_gglsm]], [[f77_gglsm]]. pure subroutine cgglsm ( n , m , p , a , lda , b , ldb , d , x , y , work , lwork , info ) import :: REAL32 integer , parameter :: wp = REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL32 ), intent ( inout ) :: d ( * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( out ) :: x ( * ) complex ( REAL32 ), intent ( out ) :: y ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine !> Original interface for ZGGLSM !> See also: [[mfi_gglsm]], [[f77_gglsm]]. pure subroutine zgglsm ( n , m , p , a , lda , b , ldb , d , x , y , work , lwork , info ) import :: REAL64 integer , parameter :: wp = REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: b ( ldb , * ) complex ( REAL64 ), intent ( inout ) :: d ( * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( out ) :: x ( * ) complex ( REAL64 ), intent ( out ) :: y ( * ) integer , intent ( out ) :: info integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: p integer , intent ( in ) :: lda integer , intent ( in ) :: ldb integer , intent ( in ) :: lwork end subroutine end interface !> Generic old style interface for ORG2R. !> Supports s, d. !> See also: [[mfi_org2r]], [[sorg2r]],[[dorg2r]]. interface f77_org2r !> Original interface for SORG2R !> See also: [[mfi_org2r]], [[f77_org2r]]. !> This routine generates an M \\times N  real(REAL32) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:sgeqrf]]. pure subroutine sorg2r ( m , n , k , a , lda , tau , work , info ) import :: REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for DORG2R !> See also: [[mfi_org2r]], [[f77_org2r]]. !> This routine generates an M \\times N  real(REAL64) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:dgeqrf]]. pure subroutine dorg2r ( m , n , k , a , lda , tau , work , info ) import :: REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORGR2. !> Supports s, d. !> See also: [[mfi_orgr2]], [[sorgr2]],[[dorgr2]]. interface f77_orgr2 !> Original interface for SORGR2 !> See also: [[mfi_orgr2]], [[f77_orgr2]]. !> This routine generates an M \\times N  real(REAL32) !> matrix  Q  with orthonormal rows, !> which is defined as the last  M  rows of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:sgerqf]]. pure subroutine sorgr2 ( m , n , k , a , lda , tau , work , info ) import :: REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for DORGR2 !> See also: [[mfi_orgr2]], [[f77_orgr2]]. !> This routine generates an M \\times N  real(REAL64) !> matrix  Q  with orthonormal rows, !> which is defined as the last  M  rows of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:dgerqf]]. pure subroutine dorgr2 ( m , n , k , a , lda , tau , work , info ) import :: REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORM2R. !> Supports s, d. !> See also: [[mfi_orm2r]], [[sorm2r]],[[dorm2r]]. interface f77_orm2r !> Original interface for SORM2R !> See also: [[mfi_orm2r]], [[f77_orm2r]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:sgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine sorm2r ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine !> Original interface for DORM2R !> See also: [[mfi_orm2r]], [[f77_orm2r]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:dgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine dorm2r ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORMR2. !> Supports s, d. !> See also: [[mfi_ormr2]], [[sormr2]],[[dormr2]]. interface f77_ormr2 !> Original interface for SORMR2 !> See also: [[mfi_ormr2]], [[f77_ormr2]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:sgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine sormr2 ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine !> Original interface for DORMR2 !> See also: [[mfi_ormr2]], [[f77_ormr2]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:dgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine dormr2 ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORMQR. !> Supports s, d. !> See also: [[mfi_ormqr]], [[sormqr]],[[dormqr]]. interface f77_ormqr !> Original interface for SORMQR !> See also: [[mfi_ormqr]], [[f77_ormqr]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:sgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine sormqr ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for DORMQR !> See also: [[mfi_ormqr]], [[f77_ormqr]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:dgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine dormqr ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORMRQ. !> Supports s, d. !> See also: [[mfi_ormrq]], [[sormrq]],[[dormrq]]. interface f77_ormrq !> Original interface for SORMRQ !> See also: [[mfi_ormrq]], [[f77_ormrq]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:sgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine sormrq ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( inout ) :: c ( ldc , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for DORMRQ !> See also: [[mfi_ormrq]], [[f77_ormrq]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:dgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine dormrq ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( inout ) :: c ( ldc , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORGQR. !> Supports s, d. !> See also: [[mfi_orgqr]], [[sorgqr]],[[dorgqr]]. interface f77_orgqr !> Original interface for SORGQR !> See also: [[mfi_orgqr]], [[f77_orgqr]]. !> This routine generates an M \\times N  real(REAL32) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:sgeqrf]]. pure subroutine sorgqr ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for DORGQR !> See also: [[mfi_orgqr]], [[f77_orgqr]]. !> This routine generates an M \\times N  real(REAL64) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:dgeqrf]]. pure subroutine dorgqr ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for ORGRQ. !> Supports s, d. !> See also: [[mfi_orgrq]], [[sorgrq]],[[dorgrq]]. interface f77_orgrq !> Original interface for SORGRQ !> See also: [[mfi_orgrq]], [[f77_orgrq]]. !> This routine generates an M \\times N  real(REAL32) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger . . . H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:sgerqf]]. pure subroutine sorgrq ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL32 real ( REAL32 ), intent ( inout ) :: a ( lda , * ) real ( REAL32 ), intent ( out ) :: work ( * ) real ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for DORGRQ !> See also: [[mfi_orgrq]], [[f77_orgrq]]. !> This routine generates an M \\times N  real(REAL64) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger . . . H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:dgerqf]]. pure subroutine dorgrq ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL64 real ( REAL64 ), intent ( inout ) :: a ( lda , * ) real ( REAL64 ), intent ( out ) :: work ( * ) real ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNG2R. !> Supports c, z. !> See also: [[mfi_ung2r]], [[cung2r]],[[zung2r]]. interface f77_ung2r !> Original interface for CUNG2R !> See also: [[mfi_ung2r]], [[f77_ung2r]]. !> This routine generates an M \\times N  complex(REAL32) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:cgeqrf]]. pure subroutine cung2r ( m , n , k , a , lda , tau , work , info ) import :: REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for ZUNG2R !> See also: [[mfi_ung2r]], [[f77_ung2r]]. !> This routine generates an M \\times N  complex(REAL64) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:zgeqrf]]. pure subroutine zung2r ( m , n , k , a , lda , tau , work , info ) import :: REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNGR2. !> Supports c, z. !> See also: [[mfi_ungr2]], [[cungr2]],[[zungr2]]. interface f77_ungr2 !> Original interface for CUNGR2 !> See also: [[mfi_ungr2]], [[f77_ungr2]]. !> This routine generates an M \\times N  complex(REAL32) !> matrix  Q  with orthonormal rows, !> which is defined as the last  M  rows of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:cgerqf]]. pure subroutine cungr2 ( m , n , k , a , lda , tau , work , info ) import :: REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine !> Original interface for ZUNGR2 !> See also: [[mfi_ungr2]], [[f77_ungr2]]. !> This routine generates an M \\times N  complex(REAL64) !> matrix  Q  with orthonormal rows, !> which is defined as the last  M  rows of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:zgerqf]]. pure subroutine zungr2 ( m , n , k , a , lda , tau , work , info ) import :: REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNM2R. !> Supports c, z. !> See also: [[mfi_unm2r]], [[cunm2r]],[[zunm2r]]. interface f77_unm2r !> Original interface for CUNM2R !> See also: [[mfi_unm2r]], [[f77_unm2r]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:cgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine cunm2r ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine !> Original interface for ZUNM2R !> See also: [[mfi_unm2r]], [[f77_unm2r]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:zgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine zunm2r ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNMR2. !> Supports c, z. !> See also: [[mfi_unmr2]], [[cunmr2]],[[zunmr2]]. interface f77_unmr2 !> Original interface for CUNMR2 !> See also: [[mfi_unmr2]], [[f77_unmr2]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:cgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine cunmr2 ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine !> Original interface for ZUNMR2 !> See also: [[mfi_unmr2]], [[f77_unmr2]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:zgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine zunmr2 ( side , trans , m , n , k , a , lda , tau , c , ldc , work , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNMQR. !> Supports c, z. !> See also: [[mfi_unmqr]], [[cunmqr]],[[zunmqr]]. interface f77_unmqr !> Original interface for CUNMQR !> See also: [[mfi_unmqr]], [[f77_unmqr]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:cgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine cunmqr ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for ZUNMQR !> See also: [[mfi_unmqr]], [[f77_unmqr]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1) H(2) \\cdots H(k)  !> as returned by [[f77_geqrf:zgeqrf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine zunmqr ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNMRQ. !> Supports c, z. !> See also: [[mfi_unmrq]], [[cunmrq]],[[zunmrq]]. interface f77_unmrq !> Original interface for CUNMRQ !> See also: [[mfi_unmrq]], [[f77_unmrq]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:cgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine cunmrq ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL32 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for ZUNMRQ !> See also: [[mfi_unmrq]], [[f77_unmrq]]. !> This routine overwrites the general complex M \\times N matrix  C  with !>```fortran !>                 SIDE = 'L'     SIDE = 'R' !> TRANS = 'N':      Q * C          C * Q !> TRANS = 'C':      Q**H * C       C * Q**H !>``` !> where Q is a complex unitary matrix defined as the product of k !> elementary reflectors !> !>  Q = H(1)&#94;\\dagger H(2)&#94;\\dagger \\cdots H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:zgerqf]]. !>  Q  is of order  M  if `SIDE = 'L'` !> and of order  N  if `SIDE = 'R'`. pure subroutine zunmrq ( side , trans , m , n , k , a , lda , tau , c , ldc , work , lwork , info ) import :: REAL64 character , intent ( in ) :: side character , intent ( in ) :: trans complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( inout ) :: c ( ldc , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: ldc integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNGQR. !> Supports c, z. !> See also: [[mfi_ungqr]], [[cungqr]],[[zungqr]]. interface f77_ungqr !> Original interface for CUNGQR !> See also: [[mfi_ungqr]], [[f77_ungqr]]. !> This routine generates an M \\times N  complex(REAL32) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:cgeqrf]]. pure subroutine cungqr ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for ZUNGQR !> See also: [[mfi_ungqr]], [[f77_ungqr]]. !> This routine generates an M \\times N  complex(REAL64) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  M . !>  Q  =  H(1) H(2) . . . H(k)  !> as returned by [[f77_geqrf:zgeqrf]]. pure subroutine zungqr ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for UNGRQ. !> Supports c, z. !> See also: [[mfi_ungrq]], [[cungrq]],[[zungrq]]. interface f77_ungrq !> Original interface for CUNGRQ !> See also: [[mfi_ungrq]], [[f77_ungrq]]. !> This routine generates an M \\times N  complex(REAL32) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger . . . H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:cgerqf]]. pure subroutine cungrq ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL32 complex ( REAL32 ), intent ( inout ) :: a ( lda , * ) complex ( REAL32 ), intent ( out ) :: work ( * ) complex ( REAL32 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine !> Original interface for ZUNGRQ !> See also: [[mfi_ungrq]], [[f77_ungrq]]. !> This routine generates an M \\times N  complex(REAL64) !> matrix  Q  with orthonormal columns, !> which is defined as the first  N  columns of a product of  K  elementary !> reflectors of order  N . !>  Q  =  H(1)&#94;\\dagger H(2)&#94;\\dagger . . . H(k)&#94;\\dagger  !> as returned by [[f77_gerqf:zgerqf]]. pure subroutine zungrq ( m , n , k , a , lda , tau , work , lwork , info ) import :: REAL64 complex ( REAL64 ), intent ( inout ) :: a ( lda , * ) complex ( REAL64 ), intent ( out ) :: work ( * ) complex ( REAL64 ), intent ( in ) :: tau ( * ) integer , intent ( in ) :: m integer , intent ( in ) :: n integer , intent ( in ) :: k integer , intent ( in ) :: lda integer , intent ( in ) :: lwork integer , intent ( out ) :: info end subroutine end interface !> Generic old style interface for LARTG. !> Supports s, d, c, z. !> See also: [[mfi_lartg]], [[slartg]],[[dlartg]],[[clartg]],[[zlartg]]. interface f77_lartg !> Original interface for SLARTG !> See also: [[mfi_lartg]], [[f77_lartg]]. pure subroutine slartg ( f , g , c , s , r ) import :: REAL32 integer , parameter :: wp = REAL32 real ( wp ), intent ( inout ) :: c real ( REAL32 ), intent ( inout ) :: f real ( REAL32 ), intent ( inout ) :: g real ( REAL32 ), intent ( inout ) :: r real ( REAL32 ), intent ( inout ) :: s end subroutine !> Original interface for DLARTG !> See also: [[mfi_lartg]], [[f77_lartg]]. pure subroutine dlartg ( f , g , c , s , r ) import :: REAL64 integer , parameter :: wp = REAL64 real ( wp ), intent ( inout ) :: c real ( REAL64 ), intent ( inout ) :: f real ( REAL64 ), intent ( inout ) :: g real ( REAL64 ), intent ( inout ) :: r real ( REAL64 ), intent ( inout ) :: s end subroutine !> Original interface for CLARTG !> See also: [[mfi_lartg]], [[f77_lartg]]. pure subroutine clartg ( f , g , c , s , r ) import :: REAL32 integer , parameter :: wp = REAL32 real ( wp ), intent ( inout ) :: c complex ( REAL32 ), intent ( inout ) :: f complex ( REAL32 ), intent ( inout ) :: g complex ( REAL32 ), intent ( inout ) :: r complex ( REAL32 ), intent ( inout ) :: s end subroutine !> Original interface for ZLARTG !> See also: [[mfi_lartg]], [[f77_lartg]]. pure subroutine zlartg ( f , g , c , s , r ) import :: REAL64 integer , parameter :: wp = REAL64 real ( wp ), intent ( inout ) :: c complex ( REAL64 ), intent ( inout ) :: f complex ( REAL64 ), intent ( inout ) :: g complex ( REAL64 ), intent ( inout ) :: r complex ( REAL64 ), intent ( inout ) :: s end subroutine end interface interface f77_xerbla pure subroutine xerbla ( name , info ) character ( * ), intent ( in ) :: name integer , intent ( in ) :: info end subroutine end interface f77_xerbla end module","tags":"","loc":"sourcefile/lapack.f90~2.html"}]}