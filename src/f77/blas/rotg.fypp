#:mute
subroutine {s,d,c,z}rotg (
    type(wp)  a,
    type(wp)  b,
    real(wp)  c,
    type(wp)  s
)
#:def rotg(NAME,pfxs)
#:set wp = pfxs[0]
!>${NAME}$ generates a Givens rotation with real cosine and complex sine:
#:if type(wp) == real(wp)
!>```
!> [  c  s ] [ a ] = [ r ]
!> [ -s  c ] [ b ]   [ 0 ]
!>```
!> satisfying `c**2 + s**2 = 1`.
#:elif type(wp) == complex(wp)
!>```
!>  [  c         s ] [ a ] = [ r ]
!>  [ -conjg(s)  c ] [ b ]   [ 0 ]
!>```
!> where c is real, s is complex, and `c**2 + conjg(s)*s = 1`.
#:endif
pure subroutine ${NAME}$(a, b, c, s)
    import :: ${kind(wp)}$
@:parameter(integer, wp=${kind(wp)}$)
@:args(${type(wp)}$, inout, a, b)
@:args(${real(wp)}$, out, c)
@:args(${type(wp)}$,      out, s)
end subroutine

#:enddef
#:endmute
