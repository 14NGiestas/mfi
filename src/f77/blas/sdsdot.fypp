
#:def sdsdot(NAME,TYPE,KIND,PREFIX)
!> Compute the inner product of two vectors with extended
!> precision accumulation.
!>
!> Returns S.P. result with dot product accumulated in D.P.
!> SDSDOT = SB + sum for I = 0 to N-1 of SX(LX+I*INCX)*SY(LY+I*INCY),
!> where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is
!> defined in a similar way using INCY.
pure function ${NAME}$(n, sb, sx, incx, sy, incy)
    import :: ${KIND}$
@:parameter(integer, wp=${KIND}$)
    ${TYPE}$ :: ${NAME}$
@:args(${TYPE}$, in, sx(*), sy(*), sb)
@:args(integer,  in, n, incx, incy)
end function
#:enddef
