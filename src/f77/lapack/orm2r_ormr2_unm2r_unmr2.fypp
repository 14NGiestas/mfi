#:mute
subroutine {s,d}orm{2r,r2} (
subroutine {c,z}unm{2r,r2} (
    character side,
    character trans,
    integer  m,
    integer  n,
    integer  k,
    type(wp) a(lda,*),
    integer  lda,
    type(wp) tau(*),
    type(wp) c(ldc,*),
    integer  ldc,
    type(wp) work(*),
    integer  info
)

#:def orm2r_ormr2_unm2r_unmr2(NAME,pfxs)
#:set wp=pfxs[0]
!> This routine overwrites the general complex \(M \times N\) matrix \( C \) with
!>```fortran
!>                 SIDE = 'L'     SIDE = 'R'
!> TRANS = 'N':      Q * C          C * Q
!> TRANS = 'C':      Q**H * C       C * Q**H
!>```
!> where Q is a complex unitary matrix defined as the product of k
!> elementary reflectors
!>
#:if NAME.endswith('2r')
!> \( Q = H(1) H(2) \cdots H(k) \)
!> as returned by [[f77_geqrf:${wp}$geqrf]].
#:elif NAME.endswith('r2')
!> \( Q = H(1)^\dagger H(2)^\dagger \cdots H(k)^\dagger \)
!> as returned by [[f77_gerqf:${wp}$gerqf]].
#:endif
!> \( Q \) is of order \( M \) if `SIDE = 'L'`
!> and of order \( N \) if `SIDE = 'R'`.
pure subroutine ${NAME}$(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
$:imports(pfxs)
@:args(character,    in,    side, trans)
@:args(${type(wp)}$, inout, a(lda,*), c(ldc,*))
@:args(${type(wp)}$, out,   work(*))
@:args(${type(wp)}$, in,    tau(*))
@:args(integer,      in,    m, n, k, lda, ldc)
@:args(integer,      out,   info)
end subroutine
#:enddef
#:endmute
