#:def heevd(MFI_NAME,F77_NAME,TYPE,KIND,PREFIX)
pure subroutine ${MFI_NAME}$(a, w, jobz, uplo, info)
@:parameter(integer, wp=${KIND}$)
@:args(${TYPE}$, inout, a(:,:))
@:args(${REAL_TYPE}$, out, w(:))
@:optional(integer, out, info)
@:optional(character, in, jobz, uplo)
    ${TYPE}$,      pointer :: work(:)
    ${REAL_TYPE}$, pointer :: rwork(:)
    integer,       pointer :: iwork(:)
    ${TYPE}$      :: s_work(1)
    ${REAL_TYPE}$ :: s_rwork(1)
    integer       :: s_iwork(1)
    integer :: n, lda, lwork, lrwork, liwork, allocation_status, deallocation_status
@:defaults(jobz='N', uplo='U')
    lda = max(1,size(a,1))
    n   = size(a,2)
    allocation_status = 0
    lwork  = -1
    lrwork = -1
    liwork = -1

    call ${F77_NAME}$(local_jobz,local_uplo,n,a,lda,w, &
                      s_work,lwork,s_rwork,lrwork,s_iwork,liwork,local_info)
    if (local_info /= 0) goto 404
    lwork  = int(s_work(1))
    lrwork = int(s_rwork(1))
    liwork = int(s_iwork(1))

    allocate(iwork(liwork), stat=allocation_status)

    if (allocation_status == 0) then
        allocate(rwork(lrwork), stat=allocation_status)
        allocate(work(lwork),   stat=allocation_status)
        call ${F77_NAME}$(local_jobz,local_uplo,n,a,lda,w, &
                      work,lwork,rwork,lrwork,iwork,liwork,local_info)
    else
        local_info = -1000
    end if
    deallocate(iwork, stat=deallocation_status)
    deallocate(rwork, stat=deallocation_status)
    deallocate(work,  stat=deallocation_status)
404 continue
    if (present(info)) then
        info = local_info
    else if (local_info <= -1000) then
        call mfi_error('${F77_NAME}$', -local_info)
    end if
end subroutine
#:enddef
