#:def hegv(MFI_NAME,F77_NAME,TYPE,KIND,PREFIX)
pure subroutine ${MFI_NAME}$(a, b, w, itype, jobz, uplo, info)
@:parameter(integer, wp=${KIND}$)
@:args(${TYPE}$, inout, a(:,:), b(:,:))
@:args(${REAL_TYPE}$, out, w(:))
@:optional(integer,   in, itype)
@:optional(character, in, jobz, uplo)
@:optional(integer, out, info)
    ${TYPE}$,      pointer :: work(:)
    ${REAL_TYPE}$, pointer :: rwork(:)
    ${TYPE}$ :: s_work(1)
    integer :: n, lda, ldb, lwork, allocation_status, deallocation_status
@:defaults(itype=1, jobz='N', uplo='U')
    lda = max(1,size(a,1))
    ldb = max(1,size(b,1))
    n = size(a,2)
    allocation_status = 0
    allocate(rwork(max(1,3*N-2)), stat=allocation_status)
    lwork = -1
    call ${F77_NAME}$(local_itype,local_jobz,local_uplo,n,a,lda,b,ldb,w,s_work,lwork,rwork,local_info)
    if (local_info /= 0) goto 404
    lwork = int(s_work(1))
    if (allocation_status == 0) then
        allocate(work(lwork), stat=allocation_status)
    end if
    if (allocation_status == 0) then
        call ${F77_NAME}$(local_itype,local_jobz,local_uplo,n,a,lda,b,ldb,w,work,lwork,rwork,local_info)
    else
        local_info = -1000
    end if
    deallocate(work, stat=deallocation_status)
404 continue
    deallocate(rwork, stat=deallocation_status)
    if (present(info)) then
        info = local_info
    else if (local_info <= -1000) then
        call mfi_error('${F77_NAME}$', -local_info)
    end if
end subroutine
#:enddef
