#:def geqrf_gerqf(MFI_NAME,F77_NAME,TYPE,KIND,PREFIX)
pure subroutine ${MFI_NAME}$(a, tau, info)
@:parameter(integer, wp=${KIND}$)
@:args(${TYPE}$,      inout, a(:,:))
    ${TYPE}$, intent(out), optional, target :: tau(:)
@:optional(integer, out, info)
    integer :: m, n, lda, lwork, allocation_status, deallocation_status
    ${TYPE}$, pointer :: local_tau(:), work(:)
    ${TYPE}$, target  :: s_work(1)
    lda = max(1,size(a,1))
    m = size(a,1)
    n = size(a,2)
    allocation_status = 0
    if (present(tau)) then
        local_tau => tau
    else
        allocate(local_tau(min(m,n)), stat=allocation_status)
    end if
    ! Retrieve work array size
    lwork = -1
    call ${F77_NAME}$(m,n,a,lda,local_tau,s_work,lwork,local_info)
    if (local_info /= 0) goto 404

    lwork = int(s_work(1))
    if (allocation_status == 0) then
        allocate(work(lwork), stat=allocation_status)
    end if
    if (allocation_status == 0) then
        call ${F77_NAME}$(m,n,a,lda,local_tau,work,lwork,local_info)
    else
        local_info = -1000
    end if
    deallocate(work, stat=deallocation_status)

    ! Error handling
404 continue
    if (.not. present(tau)) then
        deallocate(local_tau, stat=deallocation_status)
    end if
    if (present(info)) then
        info = local_info
    else if (local_info <= -1000) then
        call mfi_error('${F77_NAME}$', -local_info)
    end if
end subroutine
#:enddef
