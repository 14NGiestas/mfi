#:def hetrf(MFI_NAME,F77_NAME,pfxs)
#:set wp = pfxs[0]
pure subroutine ${MFI_NAME}$(a, uplo, ipiv, info)
@:parameter(integer, wp=${kind(wp)}$)
@:args(${type(wp)}$,  inout, a(:,:))
    integer, intent(out), optional, target :: ipiv(:)
    integer, pointer :: local_ipiv(:)
@:optional(character, in, uplo)
@:optional(integer, out, info)
    integer   :: n, lda, lwork, allocation_status, deallocation_status
    ${type(wp)}$, target :: s_work(1)
    ${type(wp)}$, pointer :: work(:)
@:defaults(uplo='U')
    lda = max(1,size(a,1))
    n = size(a,2)
    allocation_status = 0
    if (present(ipiv)) then
        local_ipiv => ipiv
    else
        allocate(local_ipiv(n), stat=allocation_status)
    end if
    lwork = -1
    call ${F77_NAME}$(local_uplo,n,a,lda,local_ipiv,s_work,lwork,local_info)
    if (local_info /= 0) goto 404
    lwork = int(s_work(1))
    if (allocation_status == 0) then
        allocate(work(lwork), stat=allocation_status)
    else
        local_info = -1000
    end if
    deallocate(work, stat=deallocation_status)
404 continue
    if (.not. present(ipiv)) then
        info = local_info
    else if (local_info <= -1000) then
        call mfi_error('${F77_NAME}$',-local_info)
    end if
end subroutine
#:enddef
