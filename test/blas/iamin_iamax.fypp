#:def iamin_iamax(ORIGINAL,IMPROVED,MODERN,TYPE,KIND,PREFIX)
subroutine test_${ORIGINAL}$
    use f77_blas, only: ${ORIGINAL}$, ${IMPROVED}$
    use mfi_blas, only: ${MODERN}$, mfi_${ORIGINAL}$

    integer, parameter :: wp = ${KIND}$
    integer, parameter :: N = 20
    ${REAL_TYPE}$ :: rnd(N)
    ${TYPE}$ :: array(N)
    integer :: res(4)
    integer :: i

    ! Test sequential array
    array = [(1.0_wp*i,i=1,N)]
    res(1) = ${ORIGINAL}$(N, array, 1)
    res(2) = mfi_${ORIGINAL}$(array)
    res(3) = ${IMPROVED}$(N, array, 1)
    res(4) = ${MODERN}$(array)
    call assert(all(res == res(1)), "different results for sequential array")

#:if TYPE == COMPLEX_TYPE
    call random_number(rnd)
    array%re = rnd
    call random_number(rnd)
    array%im = rnd
#:else
    call random_number(array)
#:endif
    res(1) = ${ORIGINAL}$(N, array, 1)
    res(2) = ${IMPROVED}$(N, array, 1)
    res(3) = mfi_${ORIGINAL}$(array)
    res(4) = ${MODERN}$(array)
    call assert(all(res == res(1)), "different results for random array")

end subroutine
#:enddef
