#:def iamin_iamax(f77,f90,mfi,pfxs)
#:set wp = pfxs[0]
subroutine test_${f77}$
    use f77_blas, only: ${f77}$, ${f90}$
    use mfi_blas, only: ${mfi}$, mfi_${f77}$

    integer, parameter :: wp = ${kind(wp)}$
    integer, parameter :: N = 20
    ${real(wp)}$ :: rnd(N)
    ${type(wp)}$ :: array(N)
    integer :: res(4)
    integer :: i

    ! Test sequential array
    array = [(1.0_wp*i,i=1,N)]
    res(1) = ${f77}$(N, array, 1)
    res(2) = mfi_${f77}$(array)
    res(3) = ${f90}$(N, array, 1)
    res(4) = ${mfi}$(array)
    call assert(all(res == res(1)), "different results for sequential array")

#:if type(wp) == complex(wp)
    call random_number(rnd)
    array%re = rnd
    call random_number(rnd)
    array%im = rnd
#:else
    call random_number(array)
#:endif
    res(1) = ${f77}$(N, array, 1)
    res(2) = ${f90}$(N, array, 1)
    res(3) = mfi_${f77}$(array)
    res(4) = ${mfi}$(array)
    call assert(all(res == res(1)), "different results for random array")

end subroutine
#:enddef
