#:def rotg(f77,f90,mfi,pfxs)
#:set wp = pfxs[0]
subroutine test_${f77}$
    use f77_blas, only: ${f77}$
    use mfi_blas, only: ${mfi}$

    integer, parameter :: wp = ${kind(wp)}$
    integer, parameter :: N = 200
    ${type(wp)}$ :: a, b, s
    ${real(wp)}$ :: c

    ${type(wp)}$ :: a_in, b_in, s_in
    ${real(wp)}$ :: c_in

    ${type(wp)}$ :: a_rf, b_rf, s_rf
    ${real(wp)}$ :: c_rf
    integer :: i

    $:random_number(type(wp),'a')
    $:random_number(type(wp),'b')
    $:random_number(real(wp),'c')
    $:random_number(type(wp),'s')

    do i=1,N
        a_in = a
        b_in = b
        c_in = c
        s_in = s
        call ${f77}$(a_in, b_in, c_in, s_in)
        a_rf = a_in
        b_rf = b_in
        c_rf = c_in
        s_rf = s_in

        a_in = a
        b_in = b
        c_in = c
        s_in = s
        call ${mfi}$(a_in, b_in, c_in, s_in)

        call assert(a_in == a_rf .and. &
                    b_in == b_rf .and. &
                    s_in == s_rf .and. &
                    c_in == c_rf, "different results")
    end do

end subroutine
#:enddef
