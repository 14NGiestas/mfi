#:mute
#:def copy(f77,f90,mfi,pfxs)
#:set wp = pfxs[0]
subroutine test_${f77}$
    use f77_blas, only: ${f77}$, ${f90}$
    use mfi_blas, only: ${mfi}$, mfi_${f77}$

    integer, parameter :: wp = ${kind(wp)}$
    integer, parameter :: N = 20

    ${type(wp)}$ :: x(N),    y(N),    &
                    x_in(N), y_in(N), &
                    x_rf(N), y_rf(N)

    $:random_number(type(wp),'x','(N)')
    $:random_number(type(wp),'y','(N)')

    x_in = x
    y_in = y
    ! The test is always against the original
    call ${f77}$(N, x_in, 1, y_in, 1)
    x_rf = x_in
    y_rf = y_in

    x_in = x
    y_in = y
    call ${f90}$(N, x_in, 1, y_in, 1)
    call assert(all(x_in == x_rf) .and. all(y_in == y_rf), "different results")

    x_in = x
    y_in = y
    call mfi_${f77}$(x_in, y_in)
    call assert(all(x_in == x_rf) .and. all(y_in == y_rf), "different results")

    x_in = x
    y_in = y
    call ${mfi}$(x_in, y_in)
    call assert(all(x_in == x_rf) .and. all(y_in == y_rf), "different results")

end subroutine
#:enddef
#:endmute
