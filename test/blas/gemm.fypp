#:def gemm(f77,f90,mfi,pfxs)
#:set wp = pfxs[0]
subroutine test_${f77}$
    use f77_blas, only: ${f77}$, ${f90}$
    use mfi_blas, only: ${mfi}$, mfi_${f77}$

    integer, parameter :: wp = ${kind(wp)}$
    integer, parameter :: N = 20
    character, parameter :: options(*) = ['N','n','T','t','C','c']
    ${type(wp)}$ :: A(N,N),    B(N,N),    C(N,N),   &
                A_in(N,N), B_in(N,N), C_in(N,N),&
                A_rf(N,N), B_rf(N,N), C_rf(N,N)
    ${type(wp)}$ :: alpha, beta
    character :: transa, transb
    integer :: i, j
    logical :: use_gpu

    $:random_number(type(wp),'A','(N,N)')
    $:random_number(type(wp),'B','(N,N)')
    $:random_number(type(wp),'C','(N,N)')
    $:random_number(type(wp),'alpha')
    $:random_number(type(wp),'beta')

#:if defined('USE_GPU')
    use_gpu = .true.
#:else
    use_gpu = .false.
#:endif

    do i=1,size(options)
    do j=1,size(options)
        transa = options(i)
        transb = options(j)

        A_in = A
        B_in = B
        C_in = C
        call ${f77}$(transa, transb, N, N, N, alpha, A_in, N, B_in, N, beta, C_in, N)
        A_rf = A_in
        B_rf = B_in
        C_rf = C_in

        A_in = A
        B_in = B
        C_in = C
        call ${f90}$(transa, transb, N, N, N, alpha, A_in, N, B_in, N, beta, C_in, N)
        call assert(all(A_in == A_rf) .and. &
                    all(B_in == B_rf) .and. &
                    all(C_in == C_rf), "different results")

        A_in = A
        B_in = B
        C_in = C
        call mfi_${f77}$(A_in,B_in,C_in,alpha=alpha, beta=beta, transa=transa, transb=transb, use_gpu=use_gpu)
        call assert(all(A_in == A_rf) .and. &
                    all(B_in == B_rf) .and. &
                    all(C_in == C_rf), "different results")

        A_in = A
        B_in = B
        C_in = C
        call ${mfi}$(A_in,B_in,C_in,alpha=alpha, beta=beta, transa=transa, transb=transb, use_gpu=use_gpu)

        call assert(all(A_in == A_rf) .and. &
                    all(B_in == B_rf) .and. &
                    all(C_in == C_rf), "different results")
    end do
    end do

end subroutine
#:enddef
