#:def gemm(ORIGINAL,IMPROVED,MODERN,TYPE,KIND,PREFIX)
subroutine test_${ORIGINAL}$
    use f77_blas, only: ${ORIGINAL}$, ${IMPROVED}$
    use mfi_blas, only: ${MODERN}$, mfi_${ORIGINAL}$

    integer, parameter :: wp = ${KIND}$
    integer, parameter :: N = 20
    character, parameter :: options(*) = ['N','n','T','t','C','c']
    ${TYPE}$ :: A(N,N),    B(N,N),    C(N,N),   &
                A_in(N,N), B_in(N,N), C_in(N,N),&
                A_rf(N,N), B_rf(N,N), C_rf(N,N)
    ${TYPE}$ :: alpha, beta
    character :: transa, transb
    integer :: i, j

#:if TYPE == COMPLEX_TYPE
    @:random_complex(A,(N,N))
    @:random_complex(B,(N,N))
    @:random_complex(C,(N,N))
    @:random_complex(alpha)
    @:random_complex(beta)
#:else
    call random_number(A)
    call random_number(B)
    call random_number(C)
    call random_number(alpha)
    call random_number(beta)
#:endif


    do i=1,size(options)
    do j=1,size(options)
        transa = options(i)
        transb = options(j)

        A_in = A
        B_in = B
        C_in = C
        call ${ORIGINAL}$(transa, transb, N, N, N, alpha, A_in, N, B_in, N, beta, C_in, N)
        A_rf = A_in
        B_rf = B_in
        C_rf = C_in

        A_in = A
        B_in = B
        C_in = C
        call ${IMPROVED}$(transa, transb, N, N, N, alpha, A_in, N, B_in, N, beta, C_in, N)
        call assert(all(A_in == A_rf) .and. &
                    all(B_in == B_rf) .and. &
                    all(C_in == C_rf), "different results")

        A_in = A
        B_in = B
        C_in = C
        call mfi_${ORIGINAL}$(A_in,B_in,C_in,alpha=alpha, beta=beta, transa=transa, transb=transb)
        call assert(all(A_in == A_rf) .and. &
                    all(B_in == B_rf) .and. &
                    all(C_in == C_rf), "different results")

        A_in = A
        B_in = B
        C_in = C
        call ${MODERN}$(A_in,B_in,C_in,alpha=alpha, beta=beta, transa=transa, transb=transb)

        call assert(all(A_in == A_rf) .and. &
                    all(B_in == B_rf) .and. &
                    all(C_in == C_rf), "different results")
    end do
    end do

end subroutine
#:enddef
