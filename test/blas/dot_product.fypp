#:mute
#:def dot_product(f77,f90,mfi,pfxs)
#:set wp = pfxs[0]
subroutine test_${f77}$
    use f77_blas, only: ${f77}$, ${f90}$
    use mfi_blas, only: ${mfi}$, mfi_${f77}$

    integer, parameter :: wp = ${kind(wp)}$
    integer, parameter :: N = 20

    ${type(wp)}$ :: res, ref

    ${type(wp)}$ :: x(N), y(N)

    $:random_number(type(wp),'X','(N)')
    $:random_number(type(wp),'Y','(N)')

    ! The test is always against the original
    ref = ${f77}$(N, x, 1, y, 1)

    res = ${f90}$(N, x, 1, y, 1)
    call assert(ref == res, "different results")

    res = mfi_${f77}$(x, y)
    call assert(ref == res, "different results")

    res = ${mfi}$(x, y)
    call assert(ref == res, "different results")

end subroutine
#:enddef
#:endmute
